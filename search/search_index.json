{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Suitup 2 - PHP Framework \u00b6 composer require braghim-sistemas/suitup-php dev-version2.0 Getting Started \u00b6 Let us walk you through our Tutorial project and show you how Suitup can help you What is it? \u00b6 While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts. Modules \u00b6 You can write different and separate applications in the same project which will be accessed just changing the base URL. MVC \u00b6 It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project Why we keep this project? \u00b6 At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!! Contributors \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Thanks to \u00b6 JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas.","title":"Home"},{"location":"#suitup-2-php-framework","text":"composer require braghim-sistemas/suitup-php dev-version2.0","title":"Suitup 2 - PHP Framework"},{"location":"#getting-started","text":"Let us walk you through our Tutorial project and show you how Suitup can help you","title":"Getting Started"},{"location":"#what-is-it","text":"While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts.","title":"What is it?"},{"location":"#modules","text":"You can write different and separate applications in the same project which will be accessed just changing the base URL.","title":"Modules"},{"location":"#mvc","text":"It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project","title":"MVC"},{"location":"#why-we-keep-this-project","text":"At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!!","title":"Why we keep this project?"},{"location":"#contributors","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup.","title":"Contributors"},{"location":"#thanks-to","text":"JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas.","title":"Thanks to"},{"location":"about/","text":"Suitup PHP Framework \u00b6 Who we are \u00b6 Braghim Sistemas is a company partner of Thizer Aplicativos . Together we develop solutions and make dreams come true with hard work and truly dedication. Braghim Sistemas even don't have a website? No, we don't need it by now. The greate rising star here is Thizer, got it? Together, we are one. Splitted we doesn't exist anymore . PHP Framework? \u00b6 While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts. Why we keep this project? \u00b6 At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!! Contributors \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Made with love by Braghim Sistemas.","title":"Overview"},{"location":"about/#suitup-php-framework","text":"","title":"Suitup PHP Framework"},{"location":"about/#who-we-are","text":"Braghim Sistemas is a company partner of Thizer Aplicativos . Together we develop solutions and make dreams come true with hard work and truly dedication. Braghim Sistemas even don't have a website? No, we don't need it by now. The greate rising star here is Thizer, got it? Together, we are one. Splitted we doesn't exist anymore .","title":"Who we are"},{"location":"about/#php-framework","text":"While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts.","title":"PHP Framework?"},{"location":"about/#why-we-keep-this-project","text":"At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!!","title":"Why we keep this project?"},{"location":"about/#contributors","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Made with love by Braghim Sistemas.","title":"Contributors"},{"location":"about/LICENSE/","text":"The MIT License (MIT) Copyright (c) 2016 Braghim Sistemas Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/compatibility/","text":"Comparing to Suitup 1 \u00b6 We keep great compatibility with previous version talking about construct a project with Suitup of course, but there are some differences as the list below. Database connection \u00b6 You can keep the usual file config/database.config.php but now its contents must to be like that: 1 2 3 4 5 6 7 8 9 <?php return array ( 'adapter' => 'mysql' , // New property key 'host' => '127.0.0.1' , 'port' => '3306' , 'dbname' => 'suitup' , // Before was 'database' 'username' => 'root' , 'password' => '' , ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =) Transactions \u00b6 To begin/commit/rollBack transactions use the methods below: Suitup\\Database\\DbAdapter::beginTransaction() Suitup\\Database\\DbAdapter::commit() Suitup\\Database\\DbAdapter::rollBack() Layout Messages \u00b6 To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"Comparing to Suitup 1"},{"location":"about/compatibility/#comparing-to-suitup-1","text":"We keep great compatibility with previous version talking about construct a project with Suitup of course, but there are some differences as the list below.","title":"Comparing to Suitup 1"},{"location":"about/compatibility/#database-connection","text":"You can keep the usual file config/database.config.php but now its contents must to be like that: 1 2 3 4 5 6 7 8 9 <?php return array ( 'adapter' => 'mysql' , // New property key 'host' => '127.0.0.1' , 'port' => '3306' , 'dbname' => 'suitup' , // Before was 'database' 'username' => 'root' , 'password' => '' , ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =)","title":"Database connection"},{"location":"about/compatibility/#transactions","text":"To begin/commit/rollBack transactions use the methods below: Suitup\\Database\\DbAdapter::beginTransaction() Suitup\\Database\\DbAdapter::commit() Suitup\\Database\\DbAdapter::rollBack()","title":"Transactions"},{"location":"about/compatibility/#layout-messages","text":"To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"Layout Messages"},{"location":"contributors/","text":"How to contribute \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Development Tools \u00b6 As you want to contribute with the project there are mainly three projects that you must to know: Obviouslly Suitup PHP Framework Suitup Skeleton - a sample project Suitup Dev - An entire development environment project (always work in progress) Update the documentation \u00b6 To properly create documentation for Suitup you will need MkDocs which is a very simple way to create docs and publish with Github pages. Get Python 3 \u00b6 Download and install python 3, there's no secrets here. Download and install \u00b6 Get pip here 1 $ python3.5 ~/Downloads/get-pip.py If the outputs of the command $ pip --version is somethings like pip 19.2.2 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5) (note python 3.5) so you just need to run the command pip instead of pip3.5 Install mkdocs \u00b6 1 $ pip3.5 install mkdocs Material Theme \u00b6 1 $ php3.5 install mkdocs-material mkdocs Server \u00b6 1 $ mkdocs serve Deploy to Github pages \u00b6 After the work done deploy your changes to the gh-pages See some more information about it here 1 $ mkdocs gh-deploy Learn how to write it right \u00b6 Our documentation is made under MkDocs with Material Theme, to learn a bit more mkdocs click here and to get the best out of the Material Theme click here CodeHilite - The right syntax to the code \u00b6 CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation \u00b6 CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over [300 languages][4], CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments See more here","title":"Contributors"},{"location":"contributors/#how-to-contribute","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case.","title":"How to contribute"},{"location":"contributors/#development-tools","text":"As you want to contribute with the project there are mainly three projects that you must to know: Obviouslly Suitup PHP Framework Suitup Skeleton - a sample project Suitup Dev - An entire development environment project (always work in progress)","title":"Development Tools"},{"location":"contributors/#update-the-documentation","text":"To properly create documentation for Suitup you will need MkDocs which is a very simple way to create docs and publish with Github pages.","title":"Update the documentation"},{"location":"contributors/#get-python-3","text":"Download and install python 3, there's no secrets here.","title":"Get Python 3"},{"location":"contributors/#download-and-install","text":"Get pip here 1 $ python3.5 ~/Downloads/get-pip.py If the outputs of the command $ pip --version is somethings like pip 19.2.2 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5) (note python 3.5) so you just need to run the command pip instead of pip3.5","title":"Download and install"},{"location":"contributors/#install-mkdocs","text":"1 $ pip3.5 install mkdocs","title":"Install mkdocs"},{"location":"contributors/#material-theme","text":"1 $ php3.5 install mkdocs-material","title":"Material Theme"},{"location":"contributors/#mkdocs-server","text":"1 $ mkdocs serve","title":"mkdocs Server"},{"location":"contributors/#deploy-to-github-pages","text":"After the work done deploy your changes to the gh-pages See some more information about it here 1 $ mkdocs gh-deploy","title":"Deploy to Github pages"},{"location":"contributors/#learn-how-to-write-it-right","text":"Our documentation is made under MkDocs with Material Theme, to learn a bit more mkdocs click here and to get the best out of the Material Theme click here","title":"Learn how to write it right"},{"location":"contributors/#codehilite-the-right-syntax-to-the-code","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite - The right syntax to the code"},{"location":"contributors/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over [300 languages][4], CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments See more here","title":"Installation"},{"location":"troubleshooting/issues/","text":"Github Issues \u00b6 Please, let us know what is happening to make Suitup every day better. In the Github we keep the issues tracker. If you are having some kind of problem with Suitup, please create your own issue there.","title":"Github Issues"},{"location":"troubleshooting/issues/#github-issues","text":"Please, let us know what is happening to make Suitup every day better. In the Github we keep the issues tracker. If you are having some kind of problem with Suitup, please create your own issue there.","title":"Github Issues"},{"location":"user-guide/getting-started/","text":"How to begin \u00b6 Requirements \u00b6 Suitup Framework requires PHP >= 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker & Docker Compose Github First of all, there is a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton Tip You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer. Install \u00b6 There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium Important To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time. Docker \u00b6 Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Warning Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project 1 2 # step 1. $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder 1 2 # Step 2. $ cd suitup-skeleton Up the Docker services 1 2 # Step 3. $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. 1 2 # Step 4. $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder 1 2 # Step 5. $ cd /app Download the composer dependencies 1 2 # Step 6. $ php composer.phar install Grant access to the vendors folder 1 2 #Step 7. $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080 Skeleton Project \u00b6 Check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file. Suitup Manager \u00b6 To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. 1 $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: Tip Use the commands bellow to run automated actions into your project 1 2 3 4 5 $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table ( Business and Gateway files ) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created From Source \u00b6 For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how Suitup works and its mechanics. As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial Setup Web Server \u00b6 First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. What is a WEB SERVER? A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com Apache Web Server \u00b6 Install apache web server with apt: 1 $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. 1 $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. 1 $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. 1 $ sudo vi /etc/apache2/sites-available/000-default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Apache Example <VirtualHost *:80 > ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html <Directory /var/www/html > Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all </Directory> LogLevel error ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> That's it. Your apache server is ready to run Suitup framework.","title":"Getting Started"},{"location":"user-guide/getting-started/#how-to-begin","text":"","title":"How to begin"},{"location":"user-guide/getting-started/#requirements","text":"Suitup Framework requires PHP >= 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker & Docker Compose Github First of all, there is a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton Tip You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer.","title":"Requirements"},{"location":"user-guide/getting-started/#install","text":"There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium Important To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time.","title":"Install"},{"location":"user-guide/getting-started/#docker","text":"Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Warning Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project 1 2 # step 1. $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder 1 2 # Step 2. $ cd suitup-skeleton Up the Docker services 1 2 # Step 3. $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. 1 2 # Step 4. $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder 1 2 # Step 5. $ cd /app Download the composer dependencies 1 2 # Step 6. $ php composer.phar install Grant access to the vendors folder 1 2 #Step 7. $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080","title":"Docker"},{"location":"user-guide/getting-started/#skeleton-project","text":"Check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file.","title":"Skeleton Project"},{"location":"user-guide/getting-started/#suitup-manager","text":"To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. 1 $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: Tip Use the commands bellow to run automated actions into your project 1 2 3 4 5 $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table ( Business and Gateway files ) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created","title":"Suitup Manager"},{"location":"user-guide/getting-started/#from-source","text":"For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how Suitup works and its mechanics. As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial","title":"From Source"},{"location":"user-guide/getting-started/#setup-web-server","text":"First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. What is a WEB SERVER? A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com","title":"Setup Web Server"},{"location":"user-guide/getting-started/#apache-web-server","text":"Install apache web server with apt: 1 $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. 1 $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. 1 $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. 1 $ sudo vi /etc/apache2/sites-available/000-default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Apache Example <VirtualHost *:80 > ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html <Directory /var/www/html > Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all </Directory> LogLevel error ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> That's it. Your apache server is ready to run Suitup framework.","title":"Apache Web Server"},{"location":"user-guide/getting-started/from-source/","text":"Install From Source Tutorial \u00b6 Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ). Project Structure \u00b6 Create the project folder and get into it 1 2 $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cowboys / \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main . js \u2502 \u2514\u2500\u2500 styles . css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database . config . php \u2502 \u2514\u2500\u2500 default . routes . php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController . php \u2502 \u2502 \u2514\u2500\u2500 IndexController . php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index . phtml \u2502 \u2514\u2500\u2500 layout . phtml \u251c\u2500\u2500 . htaccess \u2514\u2500\u2500 index . php Composer require \u00b6 Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download Suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). 1 $ php composer.phar require braghim-sistemas/suitup-php ^2 Files contents \u00b6 Let's put some content into these files. .htaccess file \u00b6 file: cowboys/.htaccess Set some .htaccess configs so Suitup can work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true Important Note that there's two environments variables DEVELOPMENT and SHOW_ERRORS . You can set all the system to show in the screen the errors occurring in real time to debug. It will be done in the errors pages. Of course if you define DEVELOPMENT another kind of actions will be launched as you wish in the system such as show a list of SQL queries done to load the page. Actually this one is set so you can use your creativity to use as wish. You can simply don't use it by removing these lines or commenting as shown bellow. 1 2 3 # Env variables #SetEnv DEVELOPMENT true #SetEnv SHOW_ERRORS true Index file \u00b6 file: cowboys/index.php This is the most important file of whole system. It's by this file that every call to the system is done and every URL should run by here. It's from here that the system will load everything, even the Suitup itself. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php session_start (); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Now everything is related to this folder chdir ( __DIR__ ); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // You may want to implement your own libraries // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, run 'php composer.phar install'\" ); } // Let's start Suitup Framework $mvc = new SuitupStart ( 'modules/' ); // Sql monitoring $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run (); MVC \u00b6 A stop to coffee... Tip Now we will begin to setup some MVC code. If you aren't familiar to this concept yet, please go ahead and make some researches so you can back to this tutorial with necessary knowledge to continue. Basically... \"MVC is a software architecture - the structure of the system - that separates domain/application/business (whatever you prefer) logic from the rest of the user interface. It does this by separating the application into three parts: the model, the view, and the controller. The model manages fundamental behaviors and data of the application. It can respond to requests for information, respond to instructions to change the state of its information, and even to notify observers in event-driven systems when information changes. This could be a database, or any number of data structures or storage systems. In short, it is the data and data-management of the application. The view effectively provides the user interface element of the application. It'll render data from the model into a form that is suitable for the user interface. The controller receives user input and makes calls to model objects and the view to perform appropriate actions. All in all, these three components work together to create the three basic components of MVC.\" Link to this reference Abstract Controller \u00b6 file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php This file will be a regards to the all controllers from the module, it means that all the others controllers will extends the AbstractController so its contents is shared over. So if you need to create a method that must to be accessible over all controllers, make it in this file. This file is not actually required, but helps a lot and we highly recommend Tip Over this class there's some methods that is automatically called by Suitup in a certain order: __construct() // Avoid override this method preDispatch() init() {current}Action() posDispatch() IMPORTANT Every time you override one of these methods, please call the parent method inside to ensure that it will work properly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php namespace ModuleDefault\\Controllers ; use Suitup\\Mvc\\MvcAbstractController ; class AbstractController extends MvcAbstractController { public function init () { parent :: init (); // Keep this line } public function posDispatch () { parent :: posDispatch (); // Keep this line } } Index Controller \u00b6 file: cowboys/modules/ModuleDefault/Controllers/IndexController.php With Suitup you don't necessary have to create a route for every page , it is made automatically by accessing the right URL for every controller and action . A controller basically is a class that contain methods (functions) , these methods we call actions . In the example bellow we can access the indexAction by three ways: http://localhost/cowboys http://localhost/cowboys/index http://localhost/cowboys/index/index 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } Why index ? Like PHP itself when no controller name is set will be called the IndexController inside the module chosen, so as the action name too. /index/index = (new IndexController())->indexAction(); Ps.: Default module is ModuleDefault . HTML Layout \u00b6 file: cowboys/modules/ModuleDefault/views/layout.phtml Layout is a HTML content file with the code that will be shared with several pages, so you don't have to include header and footer html files inside your template pages. Layout files can be changed in execution time from the Controller. Usually, we set the layout file and use it all over the module except at home (landing page) and login pages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity = \"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < div class = \"container\" > < h1 > Suitup PHP Framework </ h1 > < h3 > ModuleDefault </ h3 > < h4 > From Source Tutorial </ h4 > <?php echo $content; ?> </ div > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity = \"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity = \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js\" ></ script > </ body > </ html > HTML View \u00b6 file: cowboys/modules/ModuleDefault/views/index/index.phtml The page content itself, this content is not shared over none other page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!-- The content created automatically --> < div class = \"row\" > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > </ div > What's next? \u00b6 Check out the reference guide to get the most out of this project.","title":"Step By Step Tutorial"},{"location":"user-guide/getting-started/from-source/#install-from-source-tutorial","text":"Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ).","title":"Install From Source Tutorial"},{"location":"user-guide/getting-started/from-source/#project-structure","text":"Create the project folder and get into it 1 2 $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cowboys / \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main . js \u2502 \u2514\u2500\u2500 styles . css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database . config . php \u2502 \u2514\u2500\u2500 default . routes . php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController . php \u2502 \u2502 \u2514\u2500\u2500 IndexController . php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index . phtml \u2502 \u2514\u2500\u2500 layout . phtml \u251c\u2500\u2500 . htaccess \u2514\u2500\u2500 index . php","title":"Project Structure"},{"location":"user-guide/getting-started/from-source/#composer-require","text":"Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download Suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). 1 $ php composer.phar require braghim-sistemas/suitup-php ^2","title":"Composer require"},{"location":"user-guide/getting-started/from-source/#files-contents","text":"Let's put some content into these files.","title":"Files contents"},{"location":"user-guide/getting-started/from-source/#htaccess-file","text":"file: cowboys/.htaccess Set some .htaccess configs so Suitup can work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true Important Note that there's two environments variables DEVELOPMENT and SHOW_ERRORS . You can set all the system to show in the screen the errors occurring in real time to debug. It will be done in the errors pages. Of course if you define DEVELOPMENT another kind of actions will be launched as you wish in the system such as show a list of SQL queries done to load the page. Actually this one is set so you can use your creativity to use as wish. You can simply don't use it by removing these lines or commenting as shown bellow. 1 2 3 # Env variables #SetEnv DEVELOPMENT true #SetEnv SHOW_ERRORS true","title":".htaccess file"},{"location":"user-guide/getting-started/from-source/#index-file","text":"file: cowboys/index.php This is the most important file of whole system. It's by this file that every call to the system is done and every URL should run by here. It's from here that the system will load everything, even the Suitup itself. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php session_start (); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Now everything is related to this folder chdir ( __DIR__ ); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // You may want to implement your own libraries // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, run 'php composer.phar install'\" ); } // Let's start Suitup Framework $mvc = new SuitupStart ( 'modules/' ); // Sql monitoring $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run ();","title":"Index file"},{"location":"user-guide/getting-started/from-source/#mvc","text":"A stop to coffee... Tip Now we will begin to setup some MVC code. If you aren't familiar to this concept yet, please go ahead and make some researches so you can back to this tutorial with necessary knowledge to continue. Basically... \"MVC is a software architecture - the structure of the system - that separates domain/application/business (whatever you prefer) logic from the rest of the user interface. It does this by separating the application into three parts: the model, the view, and the controller. The model manages fundamental behaviors and data of the application. It can respond to requests for information, respond to instructions to change the state of its information, and even to notify observers in event-driven systems when information changes. This could be a database, or any number of data structures or storage systems. In short, it is the data and data-management of the application. The view effectively provides the user interface element of the application. It'll render data from the model into a form that is suitable for the user interface. The controller receives user input and makes calls to model objects and the view to perform appropriate actions. All in all, these three components work together to create the three basic components of MVC.\" Link to this reference","title":"MVC"},{"location":"user-guide/getting-started/from-source/#abstract-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php This file will be a regards to the all controllers from the module, it means that all the others controllers will extends the AbstractController so its contents is shared over. So if you need to create a method that must to be accessible over all controllers, make it in this file. This file is not actually required, but helps a lot and we highly recommend Tip Over this class there's some methods that is automatically called by Suitup in a certain order: __construct() // Avoid override this method preDispatch() init() {current}Action() posDispatch() IMPORTANT Every time you override one of these methods, please call the parent method inside to ensure that it will work properly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php namespace ModuleDefault\\Controllers ; use Suitup\\Mvc\\MvcAbstractController ; class AbstractController extends MvcAbstractController { public function init () { parent :: init (); // Keep this line } public function posDispatch () { parent :: posDispatch (); // Keep this line } }","title":"Abstract Controller"},{"location":"user-guide/getting-started/from-source/#index-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/IndexController.php With Suitup you don't necessary have to create a route for every page , it is made automatically by accessing the right URL for every controller and action . A controller basically is a class that contain methods (functions) , these methods we call actions . In the example bellow we can access the indexAction by three ways: http://localhost/cowboys http://localhost/cowboys/index http://localhost/cowboys/index/index 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } Why index ? Like PHP itself when no controller name is set will be called the IndexController inside the module chosen, so as the action name too. /index/index = (new IndexController())->indexAction(); Ps.: Default module is ModuleDefault .","title":"Index Controller"},{"location":"user-guide/getting-started/from-source/#html-layout","text":"file: cowboys/modules/ModuleDefault/views/layout.phtml Layout is a HTML content file with the code that will be shared with several pages, so you don't have to include header and footer html files inside your template pages. Layout files can be changed in execution time from the Controller. Usually, we set the layout file and use it all over the module except at home (landing page) and login pages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity = \"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < div class = \"container\" > < h1 > Suitup PHP Framework </ h1 > < h3 > ModuleDefault </ h3 > < h4 > From Source Tutorial </ h4 > <?php echo $content; ?> </ div > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity = \"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity = \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js\" ></ script > </ body > </ html >","title":"HTML Layout"},{"location":"user-guide/getting-started/from-source/#html-view","text":"file: cowboys/modules/ModuleDefault/views/index/index.phtml The page content itself, this content is not shared over none other page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!-- The content created automatically --> < div class = \"row\" > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > </ div >","title":"HTML View"},{"location":"user-guide/getting-started/from-source/#whats-next","text":"Check out the reference guide to get the most out of this project.","title":"What's next?"},{"location":"user-guide/getting-started/impatients/","text":"Tutorial for impatients \u00b6 Skeleton Project \u00b6 As you are in a hurry just checkout our skeleton project from github and clone into your web server folder, install composer dependencies and be happy. It's pretty simple, right? =) If needed check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Note Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). What's next? \u00b6 Check out the reference guide to get the most out of this project.","title":"Tutorial for impatients"},{"location":"user-guide/getting-started/impatients/#tutorial-for-impatients","text":"","title":"Tutorial for impatients"},{"location":"user-guide/getting-started/impatients/#skeleton-project","text":"As you are in a hurry just checkout our skeleton project from github and clone into your web server folder, install composer dependencies and be happy. It's pretty simple, right? =) If needed check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Note Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost).","title":"Skeleton Project"},{"location":"user-guide/getting-started/impatients/#whats-next","text":"Check out the reference guide to get the most out of this project.","title":"What's next?"},{"location":"user-guide/reference/overview/","text":"Overview \u00b6 Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized. Structure \u00b6 Get know the way that Suitup is structured to give you the better. to be continued ... Workflow \u00b6 The path that Suitup system takes to run properly. to be continued ...","title":"Functions outstand"},{"location":"user-guide/reference/overview/#overview","text":"Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized.","title":"Overview"},{"location":"user-guide/reference/overview/#structure","text":"Get know the way that Suitup is structured to give you the better. to be continued ...","title":"Structure"},{"location":"user-guide/reference/overview/#workflow","text":"The path that Suitup system takes to run properly. to be continued ...","title":"Workflow"}]}
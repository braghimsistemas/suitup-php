{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Suitup 2 - PHP Framework \u00b6 composer require braghim-sistemas/suitup-php ^2 Getting Started \u00b6 Let us walk you through our Tutorial project and show you how Suitup can help you What is it? \u00b6 While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts. Modules \u00b6 You can write different and separate applications in the same project which will be accessed just changing the base URL. MVC \u00b6 It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project Why we keep this project? \u00b6 At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!! Contributors \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Thanks to \u00b6 JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas.","title":"Home"},{"location":"#suitup-2-php-framework","text":"composer require braghim-sistemas/suitup-php ^2","title":"Suitup 2 - PHP Framework"},{"location":"#getting-started","text":"Let us walk you through our Tutorial project and show you how Suitup can help you","title":"Getting Started"},{"location":"#what-is-it","text":"While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts.","title":"What is it?"},{"location":"#modules","text":"You can write different and separate applications in the same project which will be accessed just changing the base URL.","title":"Modules"},{"location":"#mvc","text":"It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project","title":"MVC"},{"location":"#why-we-keep-this-project","text":"At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!!","title":"Why we keep this project?"},{"location":"#contributors","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup.","title":"Contributors"},{"location":"#thanks-to","text":"JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas.","title":"Thanks to"},{"location":"about/","text":"Suitup PHP Framework \u00b6 Who we are \u00b6 Braghim Sistemas is a company partner of Thizer Aplicativos . Together we develop solutions and make dreams come true with hard work and truly dedication. Braghim Sistemas even don't have a website? No, we don't need it by now. The greate rising star here is Thizer, got it? Together, we are one. Splitted we doesn't exist anymore . PHP Framework? \u00b6 While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts. Why we keep this project? \u00b6 At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!! Contributors \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Made with love by Braghim Sistemas.","title":"Overview"},{"location":"about/#suitup-php-framework","text":"","title":"Suitup PHP Framework"},{"location":"about/#who-we-are","text":"Braghim Sistemas is a company partner of Thizer Aplicativos . Together we develop solutions and make dreams come true with hard work and truly dedication. Braghim Sistemas even don't have a website? No, we don't need it by now. The greate rising star here is Thizer, got it? Together, we are one. Splitted we doesn't exist anymore .","title":"Who we are"},{"location":"about/#php-framework","text":"While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! Suitup is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts.","title":"PHP Framework?"},{"location":"about/#why-we-keep-this-project","text":"At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created Suitup, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with Suitup yet here. Try it you too, awesome web projects with Suitup PHP Framework! Now in version 2!!","title":"Why we keep this project?"},{"location":"about/#contributors","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Please, get in this section to learn what is the best way to develop changes into Suitup. Made with love by Braghim Sistemas.","title":"Contributors"},{"location":"about/LICENSE/","text":"The MIT License (MIT) Copyright (c) 2016 Braghim Sistemas Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/compatibility/","text":"Comparing to Suitup 1 \u00b6 We keep great compatibility with previous version talking about construct a project with Suitup of course, but there are some differences as the list below. Database connection \u00b6 You can keep the usual file config/database.config.php but now its contents must to be like that: 1 2 3 4 5 6 7 8 9 <?php return array ( 'adapter' => 'mysql' , // New property key 'host' => '127.0.0.1' , 'port' => '3306' , 'dbname' => 'suitup' , // Before was 'database' 'username' => 'root' , 'password' => '' , ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =) Transactions \u00b6 To begin/commit/rollBack transactions use the methods below: Suitup\\Database\\DbAdapter::beginTransaction() Suitup\\Database\\DbAdapter::commit() Suitup\\Database\\DbAdapter::rollBack() Layout Messages \u00b6 To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"Comparing to Suitup 1"},{"location":"about/compatibility/#comparing-to-suitup-1","text":"We keep great compatibility with previous version talking about construct a project with Suitup of course, but there are some differences as the list below.","title":"Comparing to Suitup 1"},{"location":"about/compatibility/#database-connection","text":"You can keep the usual file config/database.config.php but now its contents must to be like that: 1 2 3 4 5 6 7 8 9 <?php return array ( 'adapter' => 'mysql' , // New property key 'host' => '127.0.0.1' , 'port' => '3306' , 'dbname' => 'suitup' , // Before was 'database' 'username' => 'root' , 'password' => '' , ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =)","title":"Database connection"},{"location":"about/compatibility/#transactions","text":"To begin/commit/rollBack transactions use the methods below: Suitup\\Database\\DbAdapter::beginTransaction() Suitup\\Database\\DbAdapter::commit() Suitup\\Database\\DbAdapter::rollBack()","title":"Transactions"},{"location":"about/compatibility/#layout-messages","text":"To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"Layout Messages"},{"location":"contributors/","text":"How to contribute \u00b6 Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Development Tools \u00b6 As you want to contribute with the project there are mainly three projects that you must to know: Obviouslly Suitup PHP Framework Suitup Skeleton - a sample project Suitup Dev - An entire development environment project (always work in progress) Update the documentation \u00b6 To properly create documentation for Suitup you will need MkDocs which is a very simple way to create docs and publish with Github pages. Get Python 3 \u00b6 Download and install python 3, there's no secrets here. Download and install \u00b6 Get pip here 1 $ python3.5 ~/Downloads/get-pip.py If the outputs of the command $ pip --version is somethings like pip 19.2.2 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5) (note python 3.5) so you just need to run the command pip instead of pip3.5 Install mkdocs \u00b6 1 $ pip3.5 install mkdocs Material Theme \u00b6 1 $ php3.5 install mkdocs-material mkdocs Server \u00b6 1 $ mkdocs serve Deploy to Github pages \u00b6 After the work done deploy your changes to the gh-pages See some more information about it here 1 $ mkdocs gh-deploy Learn how to write it right \u00b6 Our documentation is made under MkDocs with Material Theme, to learn a bit more mkdocs click here and to get the best out of the Material Theme click here CodeHilite - The right syntax to the code \u00b6 CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation \u00b6 CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over [300 languages][4], CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments See more here","title":"How to contribute"},{"location":"contributors/#how-to-contribute","text":"Everyone is welcome to contribute with Suitup PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case.","title":"How to contribute"},{"location":"contributors/#development-tools","text":"As you want to contribute with the project there are mainly three projects that you must to know: Obviouslly Suitup PHP Framework Suitup Skeleton - a sample project Suitup Dev - An entire development environment project (always work in progress)","title":"Development Tools"},{"location":"contributors/#update-the-documentation","text":"To properly create documentation for Suitup you will need MkDocs which is a very simple way to create docs and publish with Github pages.","title":"Update the documentation"},{"location":"contributors/#get-python-3","text":"Download and install python 3, there's no secrets here.","title":"Get Python 3"},{"location":"contributors/#download-and-install","text":"Get pip here 1 $ python3.5 ~/Downloads/get-pip.py If the outputs of the command $ pip --version is somethings like pip 19.2.2 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5) (note python 3.5) so you just need to run the command pip instead of pip3.5","title":"Download and install"},{"location":"contributors/#install-mkdocs","text":"1 $ pip3.5 install mkdocs","title":"Install mkdocs"},{"location":"contributors/#material-theme","text":"1 $ php3.5 install mkdocs-material","title":"Material Theme"},{"location":"contributors/#mkdocs-server","text":"1 $ mkdocs serve","title":"mkdocs Server"},{"location":"contributors/#deploy-to-github-pages","text":"After the work done deploy your changes to the gh-pages See some more information about it here 1 $ mkdocs gh-deploy","title":"Deploy to Github pages"},{"location":"contributors/#learn-how-to-write-it-right","text":"Our documentation is made under MkDocs with Material Theme, to learn a bit more mkdocs click here and to get the best out of the Material Theme click here","title":"Learn how to write it right"},{"location":"contributors/#codehilite-the-right-syntax-to-the-code","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite - The right syntax to the code"},{"location":"contributors/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over [300 languages][4], CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments See more here","title":"Installation"},{"location":"troubleshooting/issues/","text":"Github Issues \u00b6 Please, let us know what is happening to make Suitup every day better. In the Github we keep the issues tracker. If you are having some kind of problem with Suitup, please create your own issue there.","title":"Github Issues"},{"location":"troubleshooting/issues/#github-issues","text":"Please, let us know what is happening to make Suitup every day better. In the Github we keep the issues tracker. If you are having some kind of problem with Suitup, please create your own issue there.","title":"Github Issues"},{"location":"user-guide/demo-projects/","text":"Demo Projects \u00b6 Here we will feed with some examples to show how Suitup can help you. Work in progress... Thanks for the patience ...","title":"Demo projects"},{"location":"user-guide/demo-projects/#demo-projects","text":"Here we will feed with some examples to show how Suitup can help you. Work in progress... Thanks for the patience ...","title":"Demo Projects"},{"location":"user-guide/getting-started/","text":"How to begin \u00b6 Requirements \u00b6 Suitup Framework requires PHP >= 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker & Docker Compose Github First of all, there is a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton Tip You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer. Install \u00b6 There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium Important To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time. Docker \u00b6 Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Warning Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project 1 2 # step 1. $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder 1 2 # Step 2. $ cd suitup-skeleton Up the Docker services 1 2 # Step 3. $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. 1 2 # Step 4. $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder 1 2 # Step 5. $ cd /app Download the composer dependencies 1 2 # Step 6. $ php composer.phar install Grant access to the vendors folder 1 2 #Step 7. $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080 Skeleton Project \u00b6 Check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file. Suitup Manager \u00b6 To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. 1 $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: Tip Use the commands bellow to run automated actions into your project 1 2 3 4 5 $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table ( Business and Gateway files ) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created From Source \u00b6 For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how Suitup works and its mechanics. As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial Setup Web Server \u00b6 First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. What is a WEB SERVER? A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com Apache Web Server \u00b6 Install apache web server with apt: 1 $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. 1 $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. 1 $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. 1 $ sudo vi /etc/apache2/sites-available/000-default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Apache Example <VirtualHost *:80 > ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html <Directory /var/www/html > Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all </Directory> LogLevel error ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> PHP Built-in web server \u00b6 As PHP Built-in web server doesn't allow to configure something like the mod rewrite it's not possible to properly run Suitup with this method. Actually, you can start a built-in web server with PHP itself and Suitup will work, but only for the home page. I know... It's sad... There is some workarounds, but trust me, doesn't worth while... Don't know what is it? Read more here . That's it. Your apache server is ready to run Suitup framework.","title":"Getting Started"},{"location":"user-guide/getting-started/#how-to-begin","text":"","title":"How to begin"},{"location":"user-guide/getting-started/#requirements","text":"Suitup Framework requires PHP >= 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker & Docker Compose Github First of all, there is a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton Tip You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer.","title":"Requirements"},{"location":"user-guide/getting-started/#install","text":"There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium Important To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time.","title":"Install"},{"location":"user-guide/getting-started/#docker","text":"Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Warning Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project 1 2 # step 1. $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder 1 2 # Step 2. $ cd suitup-skeleton Up the Docker services 1 2 # Step 3. $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. 1 2 # Step 4. $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder 1 2 # Step 5. $ cd /app Download the composer dependencies 1 2 # Step 6. $ php composer.phar install Grant access to the vendors folder 1 2 #Step 7. $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080","title":"Docker"},{"location":"user-guide/getting-started/#skeleton-project","text":"Check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file.","title":"Skeleton Project"},{"location":"user-guide/getting-started/#suitup-manager","text":"To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. 1 $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: Tip Use the commands bellow to run automated actions into your project 1 2 3 4 5 $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table ( Business and Gateway files ) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created","title":"Suitup Manager"},{"location":"user-guide/getting-started/#from-source","text":"For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how Suitup works and its mechanics. As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial","title":"From Source"},{"location":"user-guide/getting-started/#setup-web-server","text":"First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. What is a WEB SERVER? A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com","title":"Setup Web Server"},{"location":"user-guide/getting-started/#apache-web-server","text":"Install apache web server with apt: 1 $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. 1 $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. 1 $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. 1 $ sudo vi /etc/apache2/sites-available/000-default.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Apache Example <VirtualHost *:80 > ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html <Directory /var/www/html > Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all </Directory> LogLevel error ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost>","title":"Apache Web Server"},{"location":"user-guide/getting-started/#php-built-in-web-server","text":"As PHP Built-in web server doesn't allow to configure something like the mod rewrite it's not possible to properly run Suitup with this method. Actually, you can start a built-in web server with PHP itself and Suitup will work, but only for the home page. I know... It's sad... There is some workarounds, but trust me, doesn't worth while... Don't know what is it? Read more here . That's it. Your apache server is ready to run Suitup framework.","title":"PHP Built-in web server"},{"location":"user-guide/getting-started/from-source/","text":"Install From Source Tutorial \u00b6 Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ). Project Structure \u00b6 Create the project folder and get into it 1 2 $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cowboys / \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main . js \u2502 \u2514\u2500\u2500 styles . css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database . config . php \u2502 \u2514\u2500\u2500 default . routes . php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController . php \u2502 \u2502 \u2514\u2500\u2500 IndexController . php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index . phtml \u2502 \u2514\u2500\u2500 layout . phtml \u251c\u2500\u2500 . htaccess \u2514\u2500\u2500 index . php Composer require \u00b6 Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download Suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). 1 $ php composer.phar require braghim-sistemas/suitup-php ^2 Files contents \u00b6 Let's put some content into these files. .htaccess file \u00b6 file: cowboys/.htaccess Set some .htaccess configs so Suitup can work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true Important Note that there's two environments variables DEVELOPMENT and SHOW_ERRORS . You can set all the system to show in the screen the errors occurring in real time to debug. It will be done in the errors pages. Of course if you define DEVELOPMENT another kind of actions will be launched as you wish in the system such as show a list of SQL queries done to load the page. Actually this one is set so you can use your creativity to use as wish. You can simply don't use it by removing these lines or commenting as shown bellow. 1 2 3 # Env variables #SetEnv DEVELOPMENT true #SetEnv SHOW_ERRORS true Index file \u00b6 file: cowboys/index.php This is the most important file of whole system. It's by this file that every call to the system is done and every URL should run by here. It's from here that the system will load everything, even the Suitup itself. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php session_start (); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Now everything is related to this folder chdir ( __DIR__ ); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // You may want to implement your own libraries // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, run 'php composer.phar install'\" ); } // Let's start Suitup Framework $mvc = new SuitUpStart ( 'modules/' ); // Sql monitoring $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run (); MVC \u00b6 A stop to coffee... Tip Now we will begin to setup some MVC code. If you aren't familiar to this concept yet, please go ahead and make some researches so you can back to this tutorial with necessary knowledge to continue. Basically... \"MVC is a software architecture - the structure of the system - that separates domain/application/business (whatever you prefer) logic from the rest of the user interface. It does this by separating the application into three parts: the model, the view, and the controller. The model manages fundamental behaviors and data of the application. It can respond to requests for information, respond to instructions to change the state of its information, and even to notify observers in event-driven systems when information changes. This could be a database, or any number of data structures or storage systems. In short, it is the data and data-management of the application. The view effectively provides the user interface element of the application. It'll render data from the model into a form that is suitable for the user interface. The controller receives user input and makes calls to model objects and the view to perform appropriate actions. All in all, these three components work together to create the three basic components of MVC.\" Link to this reference Abstract Controller \u00b6 file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php This file will be a regards to the all controllers from the module, it means that all the others controllers will extends the AbstractController so its contents is shared over. So if you need to create a method that must to be accessible over all controllers, make it in this file. This file is not actually required, but helps a lot and we highly recommend Tip Over this class there's some methods that is automatically called by Suitup in a certain order: __construct() // Avoid override this method preDispatch() init() {current}Action() posDispatch() IMPORTANT Every time you override one of these methods, please call the parent method inside to ensure that it will work properly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php namespace ModuleDefault\\Controllers ; use SuitUp\\Mvc\\MvcAbstractController ; class AbstractController extends MvcAbstractController { public function init () { parent :: init (); // Keep this line } public function posDispatch () { parent :: posDispatch (); // Keep this line } } Index Controller \u00b6 file: cowboys/modules/ModuleDefault/Controllers/IndexController.php With Suitup you don't necessary have to create a route for every page , it is made automatically by accessing the right URL for every controller and action . A controller basically is a class that contain methods (functions) , these methods we call actions . In the example bellow we can access the indexAction by three ways: http://localhost/cowboys http://localhost/cowboys/index http://localhost/cowboys/index/index 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } Why index ? Like PHP itself when no controller name is set will be called the IndexController inside the module chosen, so as the action name too. /index/index = (new IndexController())->indexAction(); Ps.: Default module is ModuleDefault . HTML Layout \u00b6 file: cowboys/modules/ModuleDefault/views/layout.phtml Layout is a HTML content file with the code that will be shared with several pages, so you don't have to include header and footer html files inside your template pages. Layout files can be changed in execution time from the Controller. Usually, we set the layout file and use it all over the module except at home (landing page) and login pages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity = \"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < div class = \"container mt-3\" > < div class = \"row\" > < div class = \"col-12 col-sm-8\" > < h1 > Suitup PHP Framework </ h1 > </ div > < div class = \"col-12 col-sm-4 text-right\" > < a href = \"https://github.com/braghimsistemas/suitup-php\" class = \"btn btn-warning\" >< i class = \"fab fa-github-alt\" ></ i > View on github </ a > </ div > </ div > < h4 > < a href = \"https://braghimsistemas.github.io/suitup-php/user-guide/getting-started/from-source/\" target = \"_blank\" > From Source Tutorial </ a > </ h4 > <?php echo $content; ?> </ div > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity = \"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity = \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js\" ></ script > < script src = \"https://kit.fontawesome.com/7578043df8.js\" ></ script > </ body > </ html > HTML View \u00b6 file: cowboys/modules/ModuleDefault/views/index/index.phtml The page content itself, this content is not shared over none other page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < div class = \"alert alert-success\" role = \"alert\" > < button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > < h4 class = \"alert-heading\" > Well done! </ h4 > < p > Aww yeah, you successfully completed all the steps right to create your first site with Suitup PHP Framework! </ p > < hr > < p class = \"mb-0\" > Now keep learning going to the next step into < a class = \"alert-link\" href = \"https://braghimsistemas.github.io/suitup-php/user-guide/reference/overview/\" > Reference documents </ a > . </ p > </ div > < div class = \"row\" > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > </ div > The Result \u00b6 If everything it's OK so you should see at http://localhost/cowboys something like image below. What's next? \u00b6 Check out the reference guide to get the most out of this project.","title":"Step By Step Tutorial"},{"location":"user-guide/getting-started/from-source/#install-from-source-tutorial","text":"Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ).","title":"Install From Source Tutorial"},{"location":"user-guide/getting-started/from-source/#project-structure","text":"Create the project folder and get into it 1 2 $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cowboys / \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main . js \u2502 \u2514\u2500\u2500 styles . css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database . config . php \u2502 \u2514\u2500\u2500 default . routes . php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController . php \u2502 \u2502 \u2514\u2500\u2500 IndexController . php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index . phtml \u2502 \u2514\u2500\u2500 layout . phtml \u251c\u2500\u2500 . htaccess \u2514\u2500\u2500 index . php","title":"Project Structure"},{"location":"user-guide/getting-started/from-source/#composer-require","text":"Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download Suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). 1 $ php composer.phar require braghim-sistemas/suitup-php ^2","title":"Composer require"},{"location":"user-guide/getting-started/from-source/#files-contents","text":"Let's put some content into these files.","title":"Files contents"},{"location":"user-guide/getting-started/from-source/#htaccess-file","text":"file: cowboys/.htaccess Set some .htaccess configs so Suitup can work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true Important Note that there's two environments variables DEVELOPMENT and SHOW_ERRORS . You can set all the system to show in the screen the errors occurring in real time to debug. It will be done in the errors pages. Of course if you define DEVELOPMENT another kind of actions will be launched as you wish in the system such as show a list of SQL queries done to load the page. Actually this one is set so you can use your creativity to use as wish. You can simply don't use it by removing these lines or commenting as shown bellow. 1 2 3 # Env variables #SetEnv DEVELOPMENT true #SetEnv SHOW_ERRORS true","title":".htaccess file"},{"location":"user-guide/getting-started/from-source/#index-file","text":"file: cowboys/index.php This is the most important file of whole system. It's by this file that every call to the system is done and every URL should run by here. It's from here that the system will load everything, even the Suitup itself. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php session_start (); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Now everything is related to this folder chdir ( __DIR__ ); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // You may want to implement your own libraries // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, run 'php composer.phar install'\" ); } // Let's start Suitup Framework $mvc = new SuitUpStart ( 'modules/' ); // Sql monitoring $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run ();","title":"Index file"},{"location":"user-guide/getting-started/from-source/#mvc","text":"A stop to coffee... Tip Now we will begin to setup some MVC code. If you aren't familiar to this concept yet, please go ahead and make some researches so you can back to this tutorial with necessary knowledge to continue. Basically... \"MVC is a software architecture - the structure of the system - that separates domain/application/business (whatever you prefer) logic from the rest of the user interface. It does this by separating the application into three parts: the model, the view, and the controller. The model manages fundamental behaviors and data of the application. It can respond to requests for information, respond to instructions to change the state of its information, and even to notify observers in event-driven systems when information changes. This could be a database, or any number of data structures or storage systems. In short, it is the data and data-management of the application. The view effectively provides the user interface element of the application. It'll render data from the model into a form that is suitable for the user interface. The controller receives user input and makes calls to model objects and the view to perform appropriate actions. All in all, these three components work together to create the three basic components of MVC.\" Link to this reference","title":"MVC"},{"location":"user-guide/getting-started/from-source/#abstract-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php This file will be a regards to the all controllers from the module, it means that all the others controllers will extends the AbstractController so its contents is shared over. So if you need to create a method that must to be accessible over all controllers, make it in this file. This file is not actually required, but helps a lot and we highly recommend Tip Over this class there's some methods that is automatically called by Suitup in a certain order: __construct() // Avoid override this method preDispatch() init() {current}Action() posDispatch() IMPORTANT Every time you override one of these methods, please call the parent method inside to ensure that it will work properly 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php namespace ModuleDefault\\Controllers ; use SuitUp\\Mvc\\MvcAbstractController ; class AbstractController extends MvcAbstractController { public function init () { parent :: init (); // Keep this line } public function posDispatch () { parent :: posDispatch (); // Keep this line } }","title":"Abstract Controller"},{"location":"user-guide/getting-started/from-source/#index-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/IndexController.php With Suitup you don't necessary have to create a route for every page , it is made automatically by accessing the right URL for every controller and action . A controller basically is a class that contain methods (functions) , these methods we call actions . In the example bellow we can access the indexAction by three ways: http://localhost/cowboys http://localhost/cowboys/index http://localhost/cowboys/index/index 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } Why index ? Like PHP itself when no controller name is set will be called the IndexController inside the module chosen, so as the action name too. /index/index = (new IndexController())->indexAction(); Ps.: Default module is ModuleDefault .","title":"Index Controller"},{"location":"user-guide/getting-started/from-source/#html-layout","text":"file: cowboys/modules/ModuleDefault/views/layout.phtml Layout is a HTML content file with the code that will be shared with several pages, so you don't have to include header and footer html files inside your template pages. Layout files can be changed in execution time from the Controller. Usually, we set the layout file and use it all over the module except at home (landing page) and login pages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <!doctype html> < html lang = \"en\" > < head > <!-- Required meta tags --> < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Bootstrap CSS --> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity = \"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin = \"anonymous\" > < title > Hello, world! </ title > </ head > < body > < div class = \"container mt-3\" > < div class = \"row\" > < div class = \"col-12 col-sm-8\" > < h1 > Suitup PHP Framework </ h1 > </ div > < div class = \"col-12 col-sm-4 text-right\" > < a href = \"https://github.com/braghimsistemas/suitup-php\" class = \"btn btn-warning\" >< i class = \"fab fa-github-alt\" ></ i > View on github </ a > </ div > </ div > < h4 > < a href = \"https://braghimsistemas.github.io/suitup-php/user-guide/getting-started/from-source/\" target = \"_blank\" > From Source Tutorial </ a > </ h4 > <?php echo $content; ?> </ div > <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity = \"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity = \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js\" ></ script > < script src = \"https://kit.fontawesome.com/7578043df8.js\" ></ script > </ body > </ html >","title":"HTML Layout"},{"location":"user-guide/getting-started/from-source/#html-view","text":"file: cowboys/modules/ModuleDefault/views/index/index.phtml The page content itself, this content is not shared over none other page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < div class = \"alert alert-success\" role = \"alert\" > < button type = \"button\" class = \"close\" data-dismiss = \"alert\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > < h4 class = \"alert-heading\" > Well done! </ h4 > < p > Aww yeah, you successfully completed all the steps right to create your first site with Suitup PHP Framework! </ p > < hr > < p class = \"mb-0\" > Now keep learning going to the next step into < a class = \"alert-link\" href = \"https://braghimsistemas.github.io/suitup-php/user-guide/reference/overview/\" > Reference documents </ a > . </ p > </ div > < div class = \"row\" > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > < div class = \"col-6\" > < div class = \"card\" > < img class = \"card-img-top\" src = \"holder.js/100px180/\" alt = \"Card image cap\" > < div class = \"card-body\" > < h5 class = \"card-title\" > Card title </ h5 > < p class = \"card-text\" > Some quick example text to build on the card title and make up the bulk of the card's content. </ p > < a href = \"#\" class = \"btn btn-primary\" > Go somewhere </ a > </ div > </ div > </ div > </ div >","title":"HTML View"},{"location":"user-guide/getting-started/from-source/#the-result","text":"If everything it's OK so you should see at http://localhost/cowboys something like image below.","title":"The Result"},{"location":"user-guide/getting-started/from-source/#whats-next","text":"Check out the reference guide to get the most out of this project.","title":"What's next?"},{"location":"user-guide/getting-started/impatients/","text":"Tutorial for impatients \u00b6 Skeleton Project \u00b6 As you are in a hurry just checkout our skeleton project from github and clone into your web server folder, install composer dependencies and be happy. It's pretty simple, right? =) If needed check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Note Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). What's next? \u00b6 Check out the reference guide to get the most out of this project.","title":"Tutorial for impatients"},{"location":"user-guide/getting-started/impatients/#tutorial-for-impatients","text":"","title":"Tutorial for impatients"},{"location":"user-guide/getting-started/impatients/#skeleton-project","text":"As you are in a hurry just checkout our skeleton project from github and clone into your web server folder, install composer dependencies and be happy. It's pretty simple, right? =) If needed check here to see how to setup a web server first. Clone the project from it's repository on github: 1 $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: 1 $ cd suitup-skeleton/ Install composer dependencies 1 $ php composer.phar install Done! Note Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost).","title":"Skeleton Project"},{"location":"user-guide/getting-started/impatients/#whats-next","text":"Check out the reference guide to get the most out of this project.","title":"What's next?"},{"location":"user-guide/old-version/en/1.-Install/","text":"SuitUp - PHP Framework \u00b6 Install by composer \u00b6 composer require braghim-sistemas/suitup-php Project structure \u00b6 This is the recommended structure to the project, remember that inside of each module folder must exist these following folders Controllers , Views and Models which must to follow this structure, Form structure is optional. You can store your assets (resources) where God touch in your heart, I use to put it in the project root in a folder named assets . By default the first module must to be always named ModuleDefault . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 assets | example.jpg config | database.config.php modules | ModuleDefault | | Controllers | | | IndexController.php | | | ErrorController.php | | Form | | | Index | | | | Index.php | | Model | | | Gateway | | | | User.php | | | UserBusiness.php | | views | | | index | | | | index.phtml | | | error | | | | not-found.phtml | | | | error.phtml | ModuleAdmin .htaccess composer.json composer.phar index.php .htaccess \u00b6 Our framework only works with mod rewrite enabled in Apache. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] index.php \u00b6 This is the main file from the system, every execution in our project will pass by here first. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php session_start (); // Sao Paulo Timezone (Brazil - Choose yours) date_default_timezone_set ( 'America/Sao_Paulo' ); // Constants configs setted in VirtualHost (we will get there) define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Everything is related to the root path chdir ( __DIR__ ); // Simple functions defined by you as help (optional) // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // If you want, can add your libraries here with composer // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, execute 'php composer.phar install' in the root of project\" ); } // To run our framework, we actually must to run just this few lines below $mvc = new SuitUpStart ( 'relative/path/to/your/modules/' ); // If you want, you can monitoring your SQL queries // just adding this line below $mvc -> setSqlMonitor ( DEVELOPMENT ); // Here is where fun begin! \\o/ $mvc -> run (); Virtual Host \u00b6 We recommend you to create your own Virtual Host for each application, simulating with that an environment more next to the production application working 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <VirtualHost *:80> ServerAdmin youremail@yourhost.com.br ServerName yourprojectname.dev ServerAlias yourprojectname.dev DocumentRoot /var/www/yourProject <Directory /var/www/yourProject> Options Indexes FollowSymLinks AllowOverride All Order allow,deny Allow from all </Directory> // We don 't show these folders created as recommended structure // because it just don' t mind. You can choose whatever folder to // store your log files, feel in home ; ) ErrorLog /var/www/yourProject/var/log/error.log CustomLog /var/www/yourProject/var/log/access.log combined LogLevel warn # Environment variables # Make sure to not include this variables online or even make it always false SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true </VirtualHost> This is everything you must to know to make it works. Good job, thank you!","title":"1. Install"},{"location":"user-guide/old-version/en/1.-Install/#suitup-php-framework","text":"","title":"SuitUp - PHP Framework"},{"location":"user-guide/old-version/en/1.-Install/#install-by-composer","text":"composer require braghim-sistemas/suitup-php","title":"Install by composer"},{"location":"user-guide/old-version/en/1.-Install/#project-structure","text":"This is the recommended structure to the project, remember that inside of each module folder must exist these following folders Controllers , Views and Models which must to follow this structure, Form structure is optional. You can store your assets (resources) where God touch in your heart, I use to put it in the project root in a folder named assets . By default the first module must to be always named ModuleDefault . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 assets | example.jpg config | database.config.php modules | ModuleDefault | | Controllers | | | IndexController.php | | | ErrorController.php | | Form | | | Index | | | | Index.php | | Model | | | Gateway | | | | User.php | | | UserBusiness.php | | views | | | index | | | | index.phtml | | | error | | | | not-found.phtml | | | | error.phtml | ModuleAdmin .htaccess composer.json composer.phar index.php","title":"Project structure"},{"location":"user-guide/old-version/en/1.-Install/#htaccess","text":"Our framework only works with mod rewrite enabled in Apache. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L]","title":".htaccess"},{"location":"user-guide/old-version/en/1.-Install/#indexphp","text":"This is the main file from the system, every execution in our project will pass by here first. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php session_start (); // Sao Paulo Timezone (Brazil - Choose yours) date_default_timezone_set ( 'America/Sao_Paulo' ); // Constants configs setted in VirtualHost (we will get there) define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Root path // Everything is related to the root path chdir ( __DIR__ ); // Simple functions defined by you as help (optional) // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // If you want, can add your libraries here with composer // $loader->add('System', 'library/.'); } else { exit ( \"Project dependencies not found, execute 'php composer.phar install' in the root of project\" ); } // To run our framework, we actually must to run just this few lines below $mvc = new SuitUpStart ( 'relative/path/to/your/modules/' ); // If you want, you can monitoring your SQL queries // just adding this line below $mvc -> setSqlMonitor ( DEVELOPMENT ); // Here is where fun begin! \\o/ $mvc -> run ();","title":"index.php"},{"location":"user-guide/old-version/en/1.-Install/#virtual-host","text":"We recommend you to create your own Virtual Host for each application, simulating with that an environment more next to the production application working 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <VirtualHost *:80> ServerAdmin youremail@yourhost.com.br ServerName yourprojectname.dev ServerAlias yourprojectname.dev DocumentRoot /var/www/yourProject <Directory /var/www/yourProject> Options Indexes FollowSymLinks AllowOverride All Order allow,deny Allow from all </Directory> // We don 't show these folders created as recommended structure // because it just don' t mind. You can choose whatever folder to // store your log files, feel in home ; ) ErrorLog /var/www/yourProject/var/log/error.log CustomLog /var/www/yourProject/var/log/access.log combined LogLevel warn # Environment variables # Make sure to not include this variables online or even make it always false SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true </VirtualHost> This is everything you must to know to make it works. Good job, thank you!","title":"Virtual Host"},{"location":"user-guide/old-version/en/1.1-Default-Constants/","text":"As you can see in [[installation guide|1. Install]], we have created on the begin of the index.php , main file from the system, two constants that is: index.php 1 2 define('DEVELOPMENT', (bool) getenv(\"DEVELOPMENT\")); define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); Both was defined in the Virtual Host as you can see below and was defined to inform us about the execution environment and the showing of errors from PHP. VirtualHost \u00b6 You can set this constants in your virtual host following these instructions in the apache virtual host space. You have the option to insert this configuration in the .htaccess file, but in this case you must to keep different files on production and development. We don't think that it is a good idea while you should be using GIT and it will cause conflicts. Anyway, it depends of yours necessities and how is you using GIT features. Feel free to invent your own way if you want it and God touch your heart. 1 2 3 4 5 6 7 <VirtualHost *:80> # ... SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true # ... What that means? \u00b6 DEVELOPMENT \u00b6 It indicates that the system is running on development environment, in this way you can set some blocks of code to run only in that environment and don't have the risk to forget dump 's accidentally lost in the code. 1 2 3 4 5 6 7 8 9 10 11 12 try { $userBo = new UserBusiness(); $user = $userBo->get((int) $this->getParam('user', 0)); } catch(\\Exception $e) { // If this is running on Development environment // will be dispatched the function dump() which shows // some variable content in a white screen. In this case an Exception. if (DEVELOPMENT) { dump($e); } } SHOW_ERRORS \u00b6 It indicates to the system that the errors must be shown. Actually, if you followed the recommendation to create index.php file you don't need to do anything else. Your index.php file must to be like this: index.php 1 2 3 4 5 define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); }","title":"1.1 Default Constants"},{"location":"user-guide/old-version/en/1.1-Default-Constants/#virtualhost","text":"You can set this constants in your virtual host following these instructions in the apache virtual host space. You have the option to insert this configuration in the .htaccess file, but in this case you must to keep different files on production and development. We don't think that it is a good idea while you should be using GIT and it will cause conflicts. Anyway, it depends of yours necessities and how is you using GIT features. Feel free to invent your own way if you want it and God touch your heart. 1 2 3 4 5 6 7 <VirtualHost *:80> # ... SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true # ...","title":"VirtualHost"},{"location":"user-guide/old-version/en/1.1-Default-Constants/#what-that-means","text":"","title":"What that means?"},{"location":"user-guide/old-version/en/1.1-Default-Constants/#development","text":"It indicates that the system is running on development environment, in this way you can set some blocks of code to run only in that environment and don't have the risk to forget dump 's accidentally lost in the code. 1 2 3 4 5 6 7 8 9 10 11 12 try { $userBo = new UserBusiness(); $user = $userBo->get((int) $this->getParam('user', 0)); } catch(\\Exception $e) { // If this is running on Development environment // will be dispatched the function dump() which shows // some variable content in a white screen. In this case an Exception. if (DEVELOPMENT) { dump($e); } }","title":"DEVELOPMENT"},{"location":"user-guide/old-version/en/1.1-Default-Constants/#show_errors","text":"It indicates to the system that the errors must be shown. Actually, if you followed the recommendation to create index.php file you don't need to do anything else. Your index.php file must to be like this: index.php 1 2 3 4 5 define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); }","title":"SHOW_ERRORS"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/","text":"Controllers and Views \u00b6 What is controllers about? \u00b6 If you aren't habituated with MVC architecture, [[try out to study it|https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]] to figure out what about is MVC in theory and how software programming world use to do it. How we use controllers : \u00b6 We think about a controller as a place specifically designed from your application (class) that realize some kind of job through actions (methods). It controls the data flow received from browser user and the destiny of these data. It's that what transfers data which could be useful in the views . If you aren't habituated with MVC at this point it can seem a little complex and that this whole thing should involve too many logic difficulties, but the truth is that in practice it's very simple. Example: \u00b6 Let's suppose you have in your view a button that when you click over it will reload the same page, but dispatching a message. Controller get this request that can be identified by a lot of ways, but let's suppose it's POST. Controller request the method $this->addMsg(\"I'm a message\", \\SuitUp\\Enum\\MsgType::INFO) . It will add a message to the $layoutMessages variable that can be recovered in the layout 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { // This action is executed when you access // http://yoursite.dev/ public function indexAction () { if ( $this -> isPost ()) { $this -> addMsg ( \"I'm a message\" , \\SuitUp\\Enum\\MsgType :: INFO ); } } } Realize that the role of the controller is receive the request made by browser user and respond it according to the need. How to create a Controller \u00b6 For now you already know what is a Controller , let's understand what is the basic structure to create a new one. Define the name you want to give to your new Controller (let's say it will be user ); Don't forget that this name will be used on the URL, in this case http://yoursite.dev/usuario/index or just http://yoursite.dev/usuario ; Without any special characters, the name of the controller must begin with one CAPITAL letter followed by lowercase characters and the namespace Controller at the end; In our example the controller user will be UserController This our controller must be inserted in Controllers folder inside the module choosen. The name of the controller class and file must to be identical, in our case the name of the file will be ModuleDefault/Controllers/UserController.php Below you will see the minimum required content to the controller file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php // File: ModuleDefault/Controllers/UserController.php namespace ModuleDefault\\Controllers ; class UserController extends AbstractController { public function indexAction () { // put your content here // To send content to the view $this -> addViewVar ( array ( 'variableName' => 'The content' )); } } Realize that to send a variable to the view you just need to use the method $this->addViewVar(); . AbstractController \u00b6 You must to realized in the examples above that the controllers usually to inherit from AbstractController class and may thougth this file is supplied by SuitUp framework , but it's no the truth. The truth is that this file must to be made by you inside each module and we sugest it should be made for turn your own life easier. The AbstractController must to exist because with it you can personalize some methods which SuitUp have no done exactally in according as you need for this your project or even for you can add some methods which will be useful and shared with all controllers inside the module and with that making better reusability of your code. Because of this we say that for a good application the AbstractController is required! Even don't being totaly needed that this file must to exist. We already mentioned this above, but maybe while reading this idea could have passed unnoticed, because of that we will say it again: Must to exist one AbstractController for each module in your application . It will prevents edition of methods which have impact in several modules at the same time. The idea is to create on this file methods that will be useful to be used in several locales on your system (at the same module). It will increase the productivity and you will not rewrite the same block of code several times. The minimum structure to create an AbstractController must to be: 1 2 3 4 5 6 7 8 9 <?php // File: ModuleDefault/Controllers/AbstractController.php namespace ModuleDefault\\Controllers ; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { // Add here how many methods God touch in your heart to make your life better. =) } You can open the file MvcAbstractController.php or use the function get_class_methods($this) to see which methods is already implemented in the instance. Before rewrite some method read [[this link|2.1 MvcAbstractController]] to understand the workflow of SuitUp and avoid some headaches. What are views ? \u00b6 Neither only from PHP a site lives, obviously will be needed show contents to the user and it will be made trough HTML (exception WebServices which return only preferably JSON). The SuitUp relates each method from a controller with a file .phtml automaticaly. How it can do that? Each module must to have a folder named views and inside it one folder for each controller which must to contain a file for each controller method. We will explain it a little better. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 modules | ModuleDefault | ModuleAdmin | | Controllers | | | AbstractController.php | | | UserController.php | | views | | | user | | | | index.phtml | | | | edit.phtml | | | layout.phtml .htaccess composer.json index.php Do you remember our controller user ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <?php // File: ModuleAdmin/Controllers/UserController.php namespace ModuleAdmin\\Controllers ; class UserController extends AbstractController { /** * This method will be accessed by 'http://yoursite.dev/admin/user' */ public function indexAction () { // Your content // Transfer content to the view $this -> addViewVar ( array ( 'yourVariable' => 'The content' )); } /** * This method will be accessed by 'http://seusite.dev/admin/user/edit' */ public function editAction () { // Logic to edit user } } Did you noticed something different? Now the module used is Admin , it make URL change too. Each of these methods is related to one .phtml file that are: ModuleAdmin/views/user/index.phtml ModuleAdmin/views/user/edit.phtml 1 2 3 4 5 6 7 8 9 10 <!-- File: ModuleAdmin/views/user/index.phtml --> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" >< i class = \"fa fa-bell\" ></ i > Header </ div > < div class = \"panel-body\" > <!-- Realize that this variable was sent by controller --> <?php echo $yourVariable; ?> </ div > </ div > Realize that is possible inside the view to use $yourVariable that was sent by controller through the method $this->addViewVar(); Maybe you have noticed that this file, even being HTML, does not begin with traditional type, I mean, <!DOCTYPE html> . This is because the view files contents are just the specific content for itself, everything that is repeated in all pages from your site used to be separated in only one file called [[layout. Click here to understand it better.|3. Layouts]].","title":"2. Controllers and Views"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#controllers-and-views","text":"","title":"Controllers and Views"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#what-is-controllers-about","text":"If you aren't habituated with MVC architecture, [[try out to study it|https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]] to figure out what about is MVC in theory and how software programming world use to do it.","title":"What is controllers about?"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#how-we-use-controllers","text":"We think about a controller as a place specifically designed from your application (class) that realize some kind of job through actions (methods). It controls the data flow received from browser user and the destiny of these data. It's that what transfers data which could be useful in the views . If you aren't habituated with MVC at this point it can seem a little complex and that this whole thing should involve too many logic difficulties, but the truth is that in practice it's very simple.","title":"How we use controllers:"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#example","text":"Let's suppose you have in your view a button that when you click over it will reload the same page, but dispatching a message. Controller get this request that can be identified by a lot of ways, but let's suppose it's POST. Controller request the method $this->addMsg(\"I'm a message\", \\SuitUp\\Enum\\MsgType::INFO) . It will add a message to the $layoutMessages variable that can be recovered in the layout 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { // This action is executed when you access // http://yoursite.dev/ public function indexAction () { if ( $this -> isPost ()) { $this -> addMsg ( \"I'm a message\" , \\SuitUp\\Enum\\MsgType :: INFO ); } } } Realize that the role of the controller is receive the request made by browser user and respond it according to the need.","title":"Example:"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#how-to-create-a-controller","text":"For now you already know what is a Controller , let's understand what is the basic structure to create a new one. Define the name you want to give to your new Controller (let's say it will be user ); Don't forget that this name will be used on the URL, in this case http://yoursite.dev/usuario/index or just http://yoursite.dev/usuario ; Without any special characters, the name of the controller must begin with one CAPITAL letter followed by lowercase characters and the namespace Controller at the end; In our example the controller user will be UserController This our controller must be inserted in Controllers folder inside the module choosen. The name of the controller class and file must to be identical, in our case the name of the file will be ModuleDefault/Controllers/UserController.php Below you will see the minimum required content to the controller file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php // File: ModuleDefault/Controllers/UserController.php namespace ModuleDefault\\Controllers ; class UserController extends AbstractController { public function indexAction () { // put your content here // To send content to the view $this -> addViewVar ( array ( 'variableName' => 'The content' )); } } Realize that to send a variable to the view you just need to use the method $this->addViewVar(); .","title":"How to create a Controller"},{"location":"user-guide/old-version/en/2.-Controllers-and-Views/#abstractcontroller","text":"You must to realized in the examples above that the controllers usually to inherit from AbstractController class and may thougth this file is supplied by SuitUp framework , but it's no the truth. The truth is that this file must to be made by you inside each module and we sugest it should be made for turn your own life easier. The AbstractController must to exist because with it you can personalize some methods which SuitUp have no done exactally in according as you need for this your project or even for you can add some methods which will be useful and shared with all controllers inside the module and with that making better reusability of your code. Because of this we say that for a good application the AbstractController is required! Even don't being totaly needed that this file must to exist. We already mentioned this above, but maybe while reading this idea could have passed unnoticed, because of that we will say it again: Must to exist one AbstractController for each module in your application . It will prevents edition of methods which have impact in several modules at the same time. The idea is to create on this file methods that will be useful to be used in several locales on your system (at the same module). It will increase the productivity and you will not rewrite the same block of code several times. The minimum structure to create an AbstractController must to be: 1 2 3 4 5 6 7 8 9 <?php // File: ModuleDefault/Controllers/AbstractController.php namespace ModuleDefault\\Controllers ; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { // Add here how many methods God touch in your heart to make your life better. =) } You can open the file MvcAbstractController.php or use the function get_class_methods($this) to see which methods is already implemented in the instance. Before rewrite some method read [[this link|2.1 MvcAbstractController]] to understand the workflow of SuitUp and avoid some headaches.","title":"AbstractController"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/","text":"MvcAbstractController \u00b6 During a system development is very common you need to realize the same task in a several different places, for example, check out if there was a POST . This is one of the reasons to MvcAbstractController must to exist, with it we can provide you a lot of methods that are useful like short cuts for this kind of repeated tasks in your system. By this way, you can implement your own methods here just extending this class and pointing the controller to this your new that we recommand to call AbstractController . [[You can found more details here.|2. Controllers and Views#abstractcontroller]] But unless it's static, these methods can't be accessed from views or models , actually it can't be accessed from anywhere outside the scope from controller , so for do it you must to create a file functions.php on the root of your project and implement your own functions that will be accessible from everywhere. That way you just have to do one include to this file in your index.php ([[like this|1. Install#indexphp]]). SuitUp Workflow \u00b6 There's no secrets, SuitUp knows your controller extends the class MvcAbstractController , this is required. Some methods from this class are needed to the perfect work of framework and still in a correct order. By this way it's possible to create some rotines in your system to specifics situations. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // With controller instance SuitUp will call // these methods in that order. // 1. Launched before init and current action $this->mvc->controller->preDispatch(); // 2. init method $this->mvc->controller->init(); // 3. Current action (depends on URL) $this->mvc->controller->{$this->mvc->actionName}(); // 4. Launched after current action, before show content on screen $this->mvc->controller->posDispatch(); You can override these methods as you wish, but in case of preDispatch and posDispatch don't forget to call the original method too, otherwise SuitUp won't work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 namespace ModuleDefault\\Controllers; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { public function preDispatch() { // Here you can implement what God touch in your heart // But don't forget to call the original method // because of properly work of SuitUp parent::preDispatch(); // Or you can implement here what God touch in your heart } public function posDispatch() { // Here you can implement what God touch in your heart // But don't forget to call the original method // because of properly work of SuitUp parent::posDispatch(); // Or you can implement here what God touch in your heart } } What are default methods from SuitUp \u00b6 The list below describes all of the methods which are default from MvcAbstractController and can be used inside everyone controller from your system. preDispatch init indexAction errorAction notFoundAction posDispatch getMsgNsp getModuleName getControllerName getActionName getLayoutName setLayout renderView addViewVar isViewVar getViewVar getParams getParam isPost getPost ~setLogin~ isLogged getLogin updateLoginKey addMsg uploadFile uploadFileImageBase64 getReferer redirect ajax addSessionFilter getSessionFilter removeSessionFilter clearSessionFilter $this->preDispatch(); \u00b6 Launched before anything on the controller , executes internally some actions to the properly work of SuitUp . Must not to be override without to be called internally with parent::preDispatch(); . $this->init(); \u00b6 Launched after preDispatch() , but before current action. For now, this method do not execute any internal action on SuitUp , so you don't need to call it with parent::init(); when override, even being a good practice to prevent future conflicts with missmatch versions . :eyes: $this->indexAction(); \u00b6 The index action is called when the name of current action is not specified on URL ex.: http://yoursite.dev/ which will call the module default , index controller and index action . This method was included on MvcAbstractController to prevent when a new controller do not implement this action. When overridden do not need to call parent::indexAction(); . $this->errorAction(); \u00b6 Always that SuitUp found on the way one Exception not treated, it dispatchs to the error window of [[ErrorController|2.2 ErrorController (en)]]. In this controller named ErrorController will be executed this action if it won't of the type 404 (Page not found). Read more in: [[ErrorController|2.2 ErrorController (en)]] $this->notFoundAction(); \u00b6 Always that SuitUp found on the way one Exception not treated, it dispatchs to the error window of [[ErrorController|2.2 ErrorController (en)]]. In this controller named ErrorController will be executed this action when SuitUp is not able to found module , controller , action or view file. Read more in: [[ErrorController|2.2 ErrorController (en)]] $this->posDispatch(); \u00b6 Launched after any controller action , executes internally some actions to the properly work of SuitUp . It must not to be overridden without to be called internally with parent::posDispatch(); . $this->getMsgNsp(); \u00b6 We don't wanna mixes messages dispatched in different modules on your system, so this method returns the namespace for the current module. But what about this messages ? A little while below you'll realize that exists a method $this->addMsg($msg, $type = MsgType::INFO, $withRedirect = false); , with parameter $withRedirect = true SuitUp will retain this message on the $_SESSION to show it only in the next page, normally used before a $this->redirect($to); . $this->getModuleName(); \u00b6 Return the current module name. Sample: Module default ( http://seusite.dev/ ), return: default Module Admin ( http://seusite.dev/admin ), return: admin $this->getControllerName(); \u00b6 Return the current controller name. Sample: http://seusite.dev/ : Return index http://seusite.dev/admin/user : Return user $this->getActionName(); \u00b6 Return the current action name. Sample: http://seusite.dev/ : Return index http://seusite.dev/admin/user/edit : Return edit $this->getLayoutName(); \u00b6 Return the layout name which is being used at the moment. [[Click here|3. Layouts (en)]] to understand better about what is a layout for SuitUp . $this->setLayout($name, $path = null); \u00b6 1 2 ( string ) $ name ; // Name to the new layout, this must be the name of the file without `.phtml`, so do not use spaces or any special chars ( string ) $ path ; // Path to the new layout file Is possible to change the layout in execution time, see the example below: 1 2 3 4 5 6 7 8 9 10 11 12 // Try to execute this code from your controller to see what happens public function indexAction() { // Echo the current layout name echo dump($this->getLayoutName()); // Change layout $this->setLayout('error'); // Echo the new current layout name dump(\"\\n<br/>\"$this->getLayoutName()); } $this->renderView($renderViewName, $vars = array(), $renderViewPath = null); \u00b6 1 2 3 ( string ) $ renderViewName ; // Name of the file to be rendered ( array ) $ vars ; // Variables that will be available to that file ( string ) $ renderViewPath ; // Path to this file Render a view is a therm that means you wish capture a HTML file and it's contents, you can even inject variables on it. It's very commom when, for example you need to send an e-mail through HTML to your client with some data as an ordered. $this->addViewVar($name, $value = null); \u00b6 1 2 ( string ) | ( array ) $ name ; // Variable name which will be accessible on the view or an array with name => value ( mixed ) $ value ; // It will be the value of the previous parameter if it's not an array After to do the actions you need in your controller you probably will need transfer some data to the view , this method make exactaly it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // File: Whatever controller file public function indexAction() { $something = [\"a\", 156, 0.5, 'c']; $other = \"A value from your mind\"; // You can transfer this variable to the view that way. $this->addViewVar('thing', $something); // Or can transfer several variables at the end of action (method) $this->addViewVar(array( 'thing' => $something, 'otherStuff' => $other, )); } Automatically this values will be available on respective view file. $this->isViewVar($name); \u00b6 1 ( string ) $ name ; // Variable name which are you looking for You can check if a variable already was transferred to the view using this method. $this->getViewVar($name); \u00b6 1 ( string ) $ name ; // Variable name which are you looking for Even before view dispatch you can get the value from a variable using this method. $this->getParams(); \u00b6 This method return all parameters indicated through URL ( query string GET) with parameters defined on the [[routes|6. Routes]]. $this->getParam($name, $default = null); \u00b6 1 2 ( string ) $ name ; // Parameter name which are you looking for ( mixed ) $defa ult ; // Default value which will be returned if parameter does not exists This method will return the parameter (URL or Route param) with the name indicated by $name parameter from method and $default otherwise. $this->isPost(); \u00b6 This method is extremely simple, but just equal important. With it is possible to check out if there was a POST from a form or WebService . Returns just true or false . $this->getPost($name = null, $default = null); \u00b6 1 2 ( string ) $ name ; // POST item name to get ( mixed ) $defa ult ; // Value that will be returned if item does not exists You can use this method to get all POST values or just a single one item just using or not the parameters. ~~ $this->setLogin(array $data = array()); ~~ \u00b6 Still not implemented. You can create the login to your system direct in the variable $_SESSION as we'll show below. The MvcAbstractController got the attribute $authNsp which works like namespace and allows you to override it to you create a different session for each module from your system. That means that even being just only one system you can sign in with different users in different modules at the same time. Simple Login \u00b6 1 2 3 4 5 6 // File: Anyone Controller // Come on, this is just an example $loginData = $this->getPost(); $_SESSION[parent::$authNsp] = $loginData; Realize that in this case we just save user data from POST direct in the session. Login with namespace by module \u00b6 1 2 3 4 5 6 // File: AbstractController from your module public function __construct() { // Just be creative to create a really cool namespace parent::$authNsp = \"someCoolNamespace\"; } Realize that we changed the namespace and with it done the login data for different modules will be independent each other. After that is enough follow previous step to save the login data on $_SESSION[parent::$authNsp] . $this->isLogged(); \u00b6 Return true if exists something in the current login namespace and false otherwise. static $this->getLogin($key = null, $default = null)(); \u00b6 1 2 ( string ) $ key ; // The index which you are looking for ( mixed ) $defa ult ; // A default value in case of previous index does not exists If $key parameter was not passed so this method will return all in this namespace session. When $key parameter exists this method will seek for this index return it, but if this index does not exists so this method will return $default value. Something interesting to be noted in this method is that it can be accessed from everywhere, even from the views statically. Sample: 1 <h2>Name: <?php echo \\SuitUp\\Mvc\\MvcAbstractController :: getLogin ( 'name' ); ?> </h2> static $this->updateLoginKey($key, $value); \u00b6 1 2 ( string ) $ key ; // An existing index to update its value ( mixed ) $ value ; // The value Updates an index of the session namespace to the module. If the index was not found this method does nothing. Just like getLogin this method is static too and can be called from everywhere. $this->addMsg($msg, $type = MsgType::INFO, $withRedirect = false); \u00b6 1 2 3 ( string ) $ msg ; // The message ( string ) $ type // Type to the message ( bool ) $ withRedirect // You will make a redirect before dispatch this message ? This method add a message to be dispatched separated by type by the system. To capture this message just at the next page just make true third parameter $withRedirect . Sorry, we have to talk about Bootstrap . Nowadays several sites on web are made with Bootstrap and it brings alerts that are colorized boxes to show messages to the users. By default Bootstrap uses 4 colors to this boxes (alert-success, alert-warning, alert-info and alert-danger). Because of this if you open [[this file from SuitUp|https://github.com/braghimsistemas/suitup-php/blob/master/src/Enum/MsgType.php]] you will see exactaly these four types of messages. We really like Bootstrap , it's just awesome! You can create your own types of messages with no problems, but if you will make it we recommand that it's to be done using constants to prevent typewrite mistakes and useless bugs. It's a very good practice. To know how to get these messages from the view and layout [[click here|3. Layouts#mensagens-de-layout]]. $this->uploadFile($file, $where, $exitFilename = null, array $allowedExt = array('jpeg', 'jpg', 'pdf', 'png', 'gif')); \u00b6 1 2 3 4 ( array ) $ file ; // Index from $ _FILES ( string ) $ where ; // Path to where upload the file ( string ) $ exitFilename ; // Name to give to the uploaded file ( array ) $ allowedExt ; // Allowed extensions list This method make the upload of the files by HTML forms. If you open composer.json file from SuitUp will see that there's a require verot/class.upload.php . We aren't trying to make SuitUp your only one way to do what you have to do with your application. Actually we stand up for the use of libraries which are easy to handle and make all the hard work so instead of make our own file upload module we recommand [[verot/class.upload.php|https://github.com/verot/class.upload.php]] which is open source and available for years doing even more than needed. If you feel this method do not suply your need, feel free to override it on your AbstractController . Warning. \u00b6 This method trows an Exception in error cases, so don't forget to \"cover\" your code with a try, catch $this->uploadFileImageBase64($file, $maxFilesize = 524288); \u00b6 1 2 ( array ) $ file ; // Index from $ _FILES ( int ) maxFilesize ; // Maximum file size It's possible to save an image not as a file, but as a kind of string using for that base64 , you just need to use this method. Warning. \u00b6 This method trows an Exception in error cases, so don't forget to \"cover\" your code with a try, catch $this->getReferer(); \u00b6 This method returns the URL user was before came to the current page. It is made through $_SERVER['HTTP_REFERER'] . $this->redirect($to); \u00b6 1 ( string ) $ to ; // Location where you want to redirect This method is simply a short cut to the header('Location: $to'); Use to call this method with a return, so the system will literaly stops after that. 1 2 3 4 public function indexAction() { return $this->redirect('/'); } $this->ajax(array $data); \u00b6 1 ( array ) $ data // The array data which will be parsed in a JSON \"object\" It's very common instead HTML there is the need from some action to return a JSON, being for an AJAX or even to build a WebService module. For that just use this method at the end of action passing an array formated just like you want the JSON. This own method avoid any HTML show and dispatch the header(\"Content-Type: application/json; Charset=UTF-8\") too. Warning! \u00b6 Anyone change of code after this method has no effect, it just make a literaly exit which does application really stops after dispatch JSON result. SessionFilter \u00b6 You probably already needed to use data from a form to filter a result list. To do this you can use GET which get parameters from URL or POST which get it from another protocol and it's more safe. Firstly we like to crimp that in most cases to use GET it's a really a good idea because like that the filters can be shared, but there's cases which this can be dangerous or you just don't wanna make the URL ugly. Whatever way, when you make filters by POST and use pagination at the same time the filter data will be lost after the first page, to prevent it we made the methods below which help you in a simple way to keep the filter data even with pagination case. How it works? Through an especific namespace for each action from your system the SuitUp separate these filter data and store it in the session ( $_SESSION ). Functional workflow sample. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Check if there was a POST if ( $this -> isPost ()) { // Check if was clicked on the button to clear the form // this is made with <button type=\"submit\" name=\"clear\">Clear</button> if ( $this -> getPost ( 'clear' , false )) { $this -> clearSessionFilter (); } else { // Add or replace the filters from the unique // session to this action $this -> addSessionFilter ( $this -> getPost ()); // Redirect to the same page to prevent the form // resend data confirmation from browser return $this -> redirect ( '/' ); } } $userBo = new ModuleDefault / Model / UserBusiness (); // Makes the query to the list normally // THIS LIST USE TO BE PAGINATED $list = $userBo -> getList ( $this -> getSessionFilter ()); // On the view this list will be accessible by $usersList $this -> addViewVar ( array ( 'usersList' => $list , )); } } $this->addSessionFilter($name, $value = null); \u00b6 1 2 ( string | array ) $ name ; // Add a list or an index to the session ( mixed ) $ value ; // When the first parameter is an INDEX , this is the value to it Add or update one or more values to the items on the unique form filter data space for the current action. $this->getSessionFilter(); \u00b6 Return all the data to the current session filter. $this->removeSessionFilter($key = null); \u00b6 1 ( string ) $ key ; // Index you want to remove Remove some index data from the current session filter. $this->clearSessionFilter(); \u00b6 Remove all the data to the current session filter.","title":"2.1 MvcAbstractController"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#mvcabstractcontroller","text":"During a system development is very common you need to realize the same task in a several different places, for example, check out if there was a POST . This is one of the reasons to MvcAbstractController must to exist, with it we can provide you a lot of methods that are useful like short cuts for this kind of repeated tasks in your system. By this way, you can implement your own methods here just extending this class and pointing the controller to this your new that we recommand to call AbstractController . [[You can found more details here.|2. Controllers and Views#abstractcontroller]] But unless it's static, these methods can't be accessed from views or models , actually it can't be accessed from anywhere outside the scope from controller , so for do it you must to create a file functions.php on the root of your project and implement your own functions that will be accessible from everywhere. That way you just have to do one include to this file in your index.php ([[like this|1. Install#indexphp]]).","title":"MvcAbstractController"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#suitup-workflow","text":"There's no secrets, SuitUp knows your controller extends the class MvcAbstractController , this is required. Some methods from this class are needed to the perfect work of framework and still in a correct order. By this way it's possible to create some rotines in your system to specifics situations. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // With controller instance SuitUp will call // these methods in that order. // 1. Launched before init and current action $this->mvc->controller->preDispatch(); // 2. init method $this->mvc->controller->init(); // 3. Current action (depends on URL) $this->mvc->controller->{$this->mvc->actionName}(); // 4. Launched after current action, before show content on screen $this->mvc->controller->posDispatch(); You can override these methods as you wish, but in case of preDispatch and posDispatch don't forget to call the original method too, otherwise SuitUp won't work properly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 namespace ModuleDefault\\Controllers; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { public function preDispatch() { // Here you can implement what God touch in your heart // But don't forget to call the original method // because of properly work of SuitUp parent::preDispatch(); // Or you can implement here what God touch in your heart } public function posDispatch() { // Here you can implement what God touch in your heart // But don't forget to call the original method // because of properly work of SuitUp parent::posDispatch(); // Or you can implement here what God touch in your heart } }","title":"SuitUp Workflow"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#what-are-default-methods-from-suitup","text":"The list below describes all of the methods which are default from MvcAbstractController and can be used inside everyone controller from your system. preDispatch init indexAction errorAction notFoundAction posDispatch getMsgNsp getModuleName getControllerName getActionName getLayoutName setLayout renderView addViewVar isViewVar getViewVar getParams getParam isPost getPost ~setLogin~ isLogged getLogin updateLoginKey addMsg uploadFile uploadFileImageBase64 getReferer redirect ajax addSessionFilter getSessionFilter removeSessionFilter clearSessionFilter","title":"What are default methods from SuitUp"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#simple-login","text":"1 2 3 4 5 6 // File: Anyone Controller // Come on, this is just an example $loginData = $this->getPost(); $_SESSION[parent::$authNsp] = $loginData; Realize that in this case we just save user data from POST direct in the session.","title":"Simple Login"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#login-with-namespace-by-module","text":"1 2 3 4 5 6 // File: AbstractController from your module public function __construct() { // Just be creative to create a really cool namespace parent::$authNsp = \"someCoolNamespace\"; } Realize that we changed the namespace and with it done the login data for different modules will be independent each other. After that is enough follow previous step to save the login data on $_SESSION[parent::$authNsp] .","title":"Login with namespace by module"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#warning","text":"This method trows an Exception in error cases, so don't forget to \"cover\" your code with a try, catch","title":"Warning."},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#warning_1","text":"This method trows an Exception in error cases, so don't forget to \"cover\" your code with a try, catch","title":"Warning."},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#warning_2","text":"Anyone change of code after this method has no effect, it just make a literaly exit which does application really stops after dispatch JSON result.","title":"Warning!"},{"location":"user-guide/old-version/en/2.1-MvcAbstractController/#sessionfilter","text":"You probably already needed to use data from a form to filter a result list. To do this you can use GET which get parameters from URL or POST which get it from another protocol and it's more safe. Firstly we like to crimp that in most cases to use GET it's a really a good idea because like that the filters can be shared, but there's cases which this can be dangerous or you just don't wanna make the URL ugly. Whatever way, when you make filters by POST and use pagination at the same time the filter data will be lost after the first page, to prevent it we made the methods below which help you in a simple way to keep the filter data even with pagination case. How it works? Through an especific namespace for each action from your system the SuitUp separate these filter data and store it in the session ( $_SESSION ). Functional workflow sample. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Check if there was a POST if ( $this -> isPost ()) { // Check if was clicked on the button to clear the form // this is made with <button type=\"submit\" name=\"clear\">Clear</button> if ( $this -> getPost ( 'clear' , false )) { $this -> clearSessionFilter (); } else { // Add or replace the filters from the unique // session to this action $this -> addSessionFilter ( $this -> getPost ()); // Redirect to the same page to prevent the form // resend data confirmation from browser return $this -> redirect ( '/' ); } } $userBo = new ModuleDefault / Model / UserBusiness (); // Makes the query to the list normally // THIS LIST USE TO BE PAGINATED $list = $userBo -> getList ( $this -> getSessionFilter ()); // On the view this list will be accessible by $usersList $this -> addViewVar ( array ( 'usersList' => $list , )); } }","title":"SessionFilter"},{"location":"user-guide/old-version/en/2.2-ErrorController/","text":"Error Controller \u00b6 When SuitUp found some error Exception it's thrown firstly the ErrorController on the current module, if this does not exist SuitUp throw the default ErrorController in src/ModuleError/Controllers/ErrorController.php . Implement your own ErrorController for each module allows you to personalize your system error pages. How to do? \u00b6 Create the controller class with the reserved name ErrorController inside controllers folder on the module; Create the view ModuleDefault/views/error/error.phtml for general errors; Create the view ModuleDefault/views/error/not-found.phtml for not found errors; This error is launched if module , controller , action or view is not found. Controller \u00b6 Just create a controller with the reserved name ErrorController which extends AbstractController or MvcAbstractController , in this file you don't need to create any method, but you can override the init one to define a different layout for errors. You can too override the methods errorAction and notFoundAction if want, for example, create a system log before dispatch the view . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php // File: ModuleDefault/Controllers/ErrorController.php namespace ModuleDefault\\Controllers ; class ErrorController extends AbstractController { public function init () { // With this line the system will use this file as specific error layout instead of current module layout. // Of course that for this the file `ModuleDefault/views/error/layout.phtml` must to exist. $this -> setLayout ( \"error/layout.phtml\" ); } } Para entender melhor o que n\u00f3s chamamos de layout [[clique aqui|3. Layouts (en)]] Views \u00b6 Obviously errors control are very important in the system to menage what is working and don't, so we made this easy way to follow errors on SuitUp . Otherwise don't make sense to show it as exceptions to the user, which it's a security failure so we use if DEVELOPMENT in the view . This prevents that the Exception description is shown to the user when system aren't in development environment. Automatically the variable $exception will be available on the view with all information about the error occurred. Follow the tip to the HTML for these errors page. \u00b6 ModuleDefault/views/error/error.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 < div class = \"page-header\" > < h1 > Ouch! Unexpected error. </ h1 > </ div > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > System error </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Message: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > File: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach ($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> File: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Back to the home </ a > </ p > ModuleDefault/views/error/not-found.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < h1 > Page not found </ h1 > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > System error </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Message: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > File: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> File: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Back to the home </ a > </ p >","title":"2.2 ErrorController"},{"location":"user-guide/old-version/en/2.2-ErrorController/#error-controller","text":"When SuitUp found some error Exception it's thrown firstly the ErrorController on the current module, if this does not exist SuitUp throw the default ErrorController in src/ModuleError/Controllers/ErrorController.php . Implement your own ErrorController for each module allows you to personalize your system error pages.","title":"Error Controller"},{"location":"user-guide/old-version/en/2.2-ErrorController/#how-to-do","text":"Create the controller class with the reserved name ErrorController inside controllers folder on the module; Create the view ModuleDefault/views/error/error.phtml for general errors; Create the view ModuleDefault/views/error/not-found.phtml for not found errors; This error is launched if module , controller , action or view is not found.","title":"How to do?"},{"location":"user-guide/old-version/en/2.2-ErrorController/#controller","text":"Just create a controller with the reserved name ErrorController which extends AbstractController or MvcAbstractController , in this file you don't need to create any method, but you can override the init one to define a different layout for errors. You can too override the methods errorAction and notFoundAction if want, for example, create a system log before dispatch the view . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php // File: ModuleDefault/Controllers/ErrorController.php namespace ModuleDefault\\Controllers ; class ErrorController extends AbstractController { public function init () { // With this line the system will use this file as specific error layout instead of current module layout. // Of course that for this the file `ModuleDefault/views/error/layout.phtml` must to exist. $this -> setLayout ( \"error/layout.phtml\" ); } } Para entender melhor o que n\u00f3s chamamos de layout [[clique aqui|3. Layouts (en)]]","title":"Controller"},{"location":"user-guide/old-version/en/2.2-ErrorController/#views","text":"Obviously errors control are very important in the system to menage what is working and don't, so we made this easy way to follow errors on SuitUp . Otherwise don't make sense to show it as exceptions to the user, which it's a security failure so we use if DEVELOPMENT in the view . This prevents that the Exception description is shown to the user when system aren't in development environment. Automatically the variable $exception will be available on the view with all information about the error occurred.","title":"Views"},{"location":"user-guide/old-version/en/2.2-ErrorController/#follow-the-tip-to-the-html-for-these-errors-page","text":"ModuleDefault/views/error/error.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 < div class = \"page-header\" > < h1 > Ouch! Unexpected error. </ h1 > </ div > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > System error </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Message: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > File: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach ($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> File: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Back to the home </ a > </ p > ModuleDefault/views/error/not-found.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < h1 > Page not found </ h1 > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > System error </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Message: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > File: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> File: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Back to the home </ a > </ p >","title":"Follow the tip to the HTML for these errors page."},{"location":"user-guide/old-version/en/2.3-Pagination/","text":"What is pagination? \u00b6 One of the commonest situations in a system is the need to list several data, like an user list for example. But sometimes this list is too big to be displayed just in only one page, because of this we split the results in separated pages. This is what we call pagination . To do a list pagination we need to think about some details: \u00b6 We need to build the query on database; Define pagination parameters; Number of items per page, Number of links on each page, Number of the current page Build the HTML for show the results; Database query (SQL) \u00b6 To create the pagination the building of the query SQL does not must to have any change, the only one change is that on the return from Gateway must to be the pagination object from SuitUp which is the method paginate from db instance, it means return $this->db->paginate($query); . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php namespace ModuleDefault\\Model\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class User extends AbstractGateway { protected $name = 'user' ; protected $primary = array ( 'pk_user' ); /** * Generate the paginated users list * * @param array $filters Filters list * @return SuitUp\\Paginate\\Paginate */ public function listUsers ( array $filters = array ()) { $query = $this -> select ( \"SELECT u.* FROM { $this -> name } u\" ) -> columns ( array ( 'id_user' => 'id' , 'name' , 'age' , 'document' , 'email' , )) -> innerJoin ( \"profile p\" , \"p.id_profile = u.id_profile\" ) -> innerJoin ( \"sector r\" , \"r.id_sector = p.id_sector\" ) -> where ( \"u.status = 1\" ); if ( isset ( $filters [ 'sector' ]) && $filters [ 'sector' ]) { $query -> where ( \"r.id_sector = ?\" , $filters [ 'sector' ]); } // This line is what really make the splitting of the results. return $this -> db -> paginate ( $query ); } } Pagination parameters \u00b6 From the controller is possible to change some default values from pagination like quantity of the page items, quantity of links of the other pages and the number of the current page. Isn't need to change this configurations, but you can do it if default values is not appliable to your needs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 namespace ModuleDefault\\Controllers; use ModuleDefault\\Model\\UserBusiness; class UserController extends AbstractController { public function indexAction() { $filters = $this->getPost(); // Realize that's not the GATEWAY // See why it is need in // https://github.com/braghimsistemas/suitup-php/wiki/5.-Database#business-rules $userBo = new UserBusiness(); $list = $userBo->listUsers($filters); /** Here you can change the pagination configs if want. That not required **/ // Number of the links for other pages $list->setPageRange(7); // Default is 5 // Current page number $list->setCurrentPage($this->getParam('page', 1)); // default = $_GET['pagina'] // Items per page numbers $list->setNumberPerPage(100); // Default = 50 $this->addViewVar(array( 'list' => $list )); } } Realize that above there is a solution to a problem that can give you nightmares, is the name of the parameter pagina (which means 'page' in portuguese). Remember that to change it is need to change on the HTML pagination file too. Default parameters \u00b6 The system gets $this->getParam('pagina', 1); to know what is the current page. The page range is 5. This is the number of links to other pages which will appear to the user choose. Quantity of the rows to the list per page is 50. Pagination object methods \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Change the total number of itens which will appear on page list to select public function setPageRange($pageRange); // Gets the number total of items which appear on the list to select the page public function getPageRange(); // Indicates the current page number public function setCurrentPage($currentPage); // Return the current page number. public function getCurrentPage(); // Set number of results from query which will appear on each page. public function setNumberPerPage($numberPerPage); // Get number of results from query which will appear on each page. public function getNumberPerPage(); // Total number of pages that this query will return. public function getTotalPages(); HTML \u00b6 Showing the result \u00b6 On the HTML the pagination object can be used with a foreach with no problems. Pages \u00b6 To show the pages just write the following code on your HTML. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- Your list HTML --> < table class = \"table table-striped\" > < tr > < td > ID </ td > < td > Nome </ td > </ tr > <!-- $list is the pagination instance --> <?php foreach($list as $key => $item): ?> < tr > < td > <?php echo $item['id']; ?> </ td > < td > <?php echo $item['nome']; ?> </ td > </ tr > <?php endforeach; ?> </ table > <!-- /end table --> <!-- Pagination links --> <?php echo paginateControl($list); ?> Pagination HTML \u00b6 Add the following file to the ModuleDefault/views/paginacao.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <?php if(count($items)): ?> < nav > < ul class = \"pagination\" > <?php if($previousPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>page=<?php echo $previousPage; ?>\" aria-label = \"Previous\" >< span aria-hidden = \"true\" > &laquo; </ span ></ a ></ li > <?php else:?> < li class = \"disabled\" >< a href = \"javascript:void(0);\" aria-label = \"Previous\" >< span aria-hidden = \"true\" > &laquo; </ span ></ a ></ li > <?php endif; ?> <?php foreach($items as $key => $page): ?> <?php if($page != $currentPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>page=<?php echo $page; ?>\" > <?php echo $page; ?> </ a ></ li > <?php else: ?> < li class = \"active\" >< a href = \"javascript:void(0);\" > <?php echo $page; ?> < span class = \"sr-only\" > (current) </ span ></ a ></ li > <?php endif; ?> <?php endforeach; ?> <?php if($nextPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>page=<?php echo $nextPage; ?>\" aria-label = \"Next\" >< span aria-hidden = \"true\" > &raquo; </ span ></ a ></ li > <?php else:?> < li class = \"disabled\" >< a href = \"javascript:void(0);\" aria-label = \"Next\" >< span aria-hidden = \"true\" > &raquo; </ span ></ a ></ li > <?php endif; ?> </ ul > </ nav > <?php endif; ?> Remember that to change the parameter pagina is necessary to capture this new parameter on the controller with $this->('page', 1); . See an example here.","title":"2.3 Pagination"},{"location":"user-guide/old-version/en/2.3-Pagination/#what-is-pagination","text":"One of the commonest situations in a system is the need to list several data, like an user list for example. But sometimes this list is too big to be displayed just in only one page, because of this we split the results in separated pages. This is what we call pagination .","title":"What is pagination?"},{"location":"user-guide/old-version/en/2.3-Pagination/#to-do-a-list-pagination-we-need-to-think-about-some-details","text":"We need to build the query on database; Define pagination parameters; Number of items per page, Number of links on each page, Number of the current page Build the HTML for show the results;","title":"To do a list pagination we need to think about some details:"},{"location":"user-guide/old-version/en/2.3-Pagination/#database-query-sql","text":"To create the pagination the building of the query SQL does not must to have any change, the only one change is that on the return from Gateway must to be the pagination object from SuitUp which is the method paginate from db instance, it means return $this->db->paginate($query); . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php namespace ModuleDefault\\Model\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class User extends AbstractGateway { protected $name = 'user' ; protected $primary = array ( 'pk_user' ); /** * Generate the paginated users list * * @param array $filters Filters list * @return SuitUp\\Paginate\\Paginate */ public function listUsers ( array $filters = array ()) { $query = $this -> select ( \"SELECT u.* FROM { $this -> name } u\" ) -> columns ( array ( 'id_user' => 'id' , 'name' , 'age' , 'document' , 'email' , )) -> innerJoin ( \"profile p\" , \"p.id_profile = u.id_profile\" ) -> innerJoin ( \"sector r\" , \"r.id_sector = p.id_sector\" ) -> where ( \"u.status = 1\" ); if ( isset ( $filters [ 'sector' ]) && $filters [ 'sector' ]) { $query -> where ( \"r.id_sector = ?\" , $filters [ 'sector' ]); } // This line is what really make the splitting of the results. return $this -> db -> paginate ( $query ); } }","title":"Database query (SQL)"},{"location":"user-guide/old-version/en/2.3-Pagination/#pagination-parameters","text":"From the controller is possible to change some default values from pagination like quantity of the page items, quantity of links of the other pages and the number of the current page. Isn't need to change this configurations, but you can do it if default values is not appliable to your needs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 namespace ModuleDefault\\Controllers; use ModuleDefault\\Model\\UserBusiness; class UserController extends AbstractController { public function indexAction() { $filters = $this->getPost(); // Realize that's not the GATEWAY // See why it is need in // https://github.com/braghimsistemas/suitup-php/wiki/5.-Database#business-rules $userBo = new UserBusiness(); $list = $userBo->listUsers($filters); /** Here you can change the pagination configs if want. That not required **/ // Number of the links for other pages $list->setPageRange(7); // Default is 5 // Current page number $list->setCurrentPage($this->getParam('page', 1)); // default = $_GET['pagina'] // Items per page numbers $list->setNumberPerPage(100); // Default = 50 $this->addViewVar(array( 'list' => $list )); } } Realize that above there is a solution to a problem that can give you nightmares, is the name of the parameter pagina (which means 'page' in portuguese). Remember that to change it is need to change on the HTML pagination file too.","title":"Pagination parameters"},{"location":"user-guide/old-version/en/2.3-Pagination/#default-parameters","text":"The system gets $this->getParam('pagina', 1); to know what is the current page. The page range is 5. This is the number of links to other pages which will appear to the user choose. Quantity of the rows to the list per page is 50.","title":"Default parameters"},{"location":"user-guide/old-version/en/2.3-Pagination/#pagination-object-methods","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Change the total number of itens which will appear on page list to select public function setPageRange($pageRange); // Gets the number total of items which appear on the list to select the page public function getPageRange(); // Indicates the current page number public function setCurrentPage($currentPage); // Return the current page number. public function getCurrentPage(); // Set number of results from query which will appear on each page. public function setNumberPerPage($numberPerPage); // Get number of results from query which will appear on each page. public function getNumberPerPage(); // Total number of pages that this query will return. public function getTotalPages();","title":"Pagination object methods"},{"location":"user-guide/old-version/en/2.3-Pagination/#html","text":"","title":"HTML"},{"location":"user-guide/old-version/en/2.3-Pagination/#showing-the-result","text":"On the HTML the pagination object can be used with a foreach with no problems.","title":"Showing the result"},{"location":"user-guide/old-version/en/2.3-Pagination/#pages","text":"To show the pages just write the following code on your HTML. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- Your list HTML --> < table class = \"table table-striped\" > < tr > < td > ID </ td > < td > Nome </ td > </ tr > <!-- $list is the pagination instance --> <?php foreach($list as $key => $item): ?> < tr > < td > <?php echo $item['id']; ?> </ td > < td > <?php echo $item['nome']; ?> </ td > </ tr > <?php endforeach; ?> </ table > <!-- /end table --> <!-- Pagination links --> <?php echo paginateControl($list); ?>","title":"Pages"},{"location":"user-guide/old-version/en/2.4-Debug/","text":"Checking out the system work \u00b6 It's really useful can see what some variable is storing while we're developing the system, for that we dispose a simple function (it's really a function, not a method) to show the content from anyone kind of variable. dump($var); It will print with a good visualization the content of any kind of variable which is passed as parameter. This function break the system after print \u00b6 That's right, at the end of this function there's an exit to make the system break before display HTML results, it's made to remove all visual distractions. Anyway, you can disable it passing the second parameter false . Example: 1 echo dump($var, false);","title":"2.4 Debug"},{"location":"user-guide/old-version/en/2.4-Debug/#checking-out-the-system-work","text":"It's really useful can see what some variable is storing while we're developing the system, for that we dispose a simple function (it's really a function, not a method) to show the content from anyone kind of variable. dump($var); It will print with a good visualization the content of any kind of variable which is passed as parameter.","title":"Checking out the system work"},{"location":"user-guide/old-version/en/2.4-Debug/#this-function-break-the-system-after-print","text":"That's right, at the end of this function there's an exit to make the system break before display HTML results, it's made to remove all visual distractions. Anyway, you can disable it passing the second parameter false . Example: 1 echo dump($var, false);","title":"This function break the system after print"},{"location":"user-guide/old-version/en/3.-Layouts/","text":"Don't repeat yourself \u00b6 Each module need a file inside the views to be the default HTML for all actions, we mean, all .phtml scripts will be rendered inside this file. It's called layout because it contain all HTML parts which are repeated in all pages from your system. Is not necessary to do any include or require to include this file, SuitUp do it for you automatically. Where you include on your layout HTML the variable <?php echo $content; ?> is where will be rendered (printed) the content from view . The layout \u00b6 File: ModuleDefault/views/layout.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- ... --> </ head > < body > < nav ></ nav > < div class = \"sidebar\" ></ div > < div class = \"content\" > <!-- Here the content will be rendered (printed) --> <?php echo $content; ?> </ div > <!-- Query SQL monitoring --> <?php echo $queryLog; ?> </ body > </ html > If you enabled the 'SQL monitoring', point in your layout where you want this HTML injection to be printed, generally at the end of the file, but before </body> tag. Layout messages \u00b6 Inside any action from any controller you can call the method $this->addMsg(\"mensagem\", MsgType::SUCCESS, true); to messages that will be displayed in the layout after a redirect or $this->addMsg(\"mensagem\", MsgType::SUCCESS); to messages that will be direct displayed in the layout. For this work well add these lines below anywhere in your layout.phtml file 1 2 3 4 5 6 7 8 9 <!-- System messages --> <?php foreach ($layoutMessages as $type => $msgs): ?> < div class = \"alert alert-<?php echo $type; ?>\" > < a href = \"#\" class = \"close\" > &times; </ a > <?php foreach ($msgs as $msg): ?> < p >< i class = \"fa fa-check\" ></ i > <?php echo $msg; ?> </ p > <?php endforeach; ?> </ div > <?php endforeach; ?> See more about this [[here|2.1-MvcAbstractController-(en)#addMsg]].","title":"3. Layouts"},{"location":"user-guide/old-version/en/3.-Layouts/#dont-repeat-yourself","text":"Each module need a file inside the views to be the default HTML for all actions, we mean, all .phtml scripts will be rendered inside this file. It's called layout because it contain all HTML parts which are repeated in all pages from your system. Is not necessary to do any include or require to include this file, SuitUp do it for you automatically. Where you include on your layout HTML the variable <?php echo $content; ?> is where will be rendered (printed) the content from view .","title":"Don't repeat yourself"},{"location":"user-guide/old-version/en/3.-Layouts/#the-layout","text":"File: ModuleDefault/views/layout.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- ... --> </ head > < body > < nav ></ nav > < div class = \"sidebar\" ></ div > < div class = \"content\" > <!-- Here the content will be rendered (printed) --> <?php echo $content; ?> </ div > <!-- Query SQL monitoring --> <?php echo $queryLog; ?> </ body > </ html > If you enabled the 'SQL monitoring', point in your layout where you want this HTML injection to be printed, generally at the end of the file, but before </body> tag.","title":"The layout"},{"location":"user-guide/old-version/en/3.-Layouts/#layout-messages","text":"Inside any action from any controller you can call the method $this->addMsg(\"mensagem\", MsgType::SUCCESS, true); to messages that will be displayed in the layout after a redirect or $this->addMsg(\"mensagem\", MsgType::SUCCESS); to messages that will be direct displayed in the layout. For this work well add these lines below anywhere in your layout.phtml file 1 2 3 4 5 6 7 8 9 <!-- System messages --> <?php foreach ($layoutMessages as $type => $msgs): ?> < div class = \"alert alert-<?php echo $type; ?>\" > < a href = \"#\" class = \"close\" > &times; </ a > <?php foreach ($msgs as $msg): ?> < p >< i class = \"fa fa-check\" ></ i > <?php echo $msg; ?> </ p > <?php endforeach; ?> </ div > <?php endforeach; ?> See more about this [[here|2.1-MvcAbstractController-(en)#addMsg]].","title":"Layout messages"},{"location":"user-guide/old-version/en/4.-Forms/","text":"","title":"4. Forms"},{"location":"user-guide/old-version/en/4.1-Validation/","text":"Valida\u00e7\u00f5es j\u00e1 inclusas no SuitUp \u00b6 O SuitUp j\u00e1 vem com diversos tipos de valida\u00e7\u00f5es de formul\u00e1rio prontos para serem utilizados, confira abaixo a lista desses m\u00e9todos. notEmpty isEmail isCep minLen maxLen maiorQue menorQue identico inArray notEmpty \u00b6 Ao utilizar este m\u00e9todo de valida\u00e7\u00e3o o valor do campo no formul\u00e1rio n\u00e3o pode estar vazio. Internamente o if para este m\u00e9todo avalia com !$value , ou seja, para o PHP vazio (false) \u00e9 o mesmo que: - String vazia - String com valor 0 num\u00e9rico - inteiro igual a zero - float ou double igual a zero - boolean igual a false - array sem elementos - tipo NULL Consulte a refer\u00eancia no manual PHP Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('notEmpty'), 'filter' => array()), ); isEmail \u00b6 Este m\u00e9todo avalia se o valor do campo \u00e9 correspondente a um endere\u00e7o de e-mail. Para isso utiliza a express\u00e3o regular: 1 \"/^[a-zA-Z0-9][a-zA-Z0-9\\._-]+@([a-zA-Z0-9\\._-]+\\.)[a-zA-Z-0-9]{2}/\" Este m\u00e9todo n\u00e3o avalia se o endere\u00e7o de e-mail realmente existe, apenas se ele tem o formato de um endere\u00e7o de e-mail Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isEmail'), 'filter' => array()), ); isCep \u00b6 Verifica se o n\u00famero de um CEP \u00e9 considerado v\u00e1lido no formato 99999-999 . Este m\u00e9todo n\u00e3o verifica se o campo est\u00e1 vazio , ou seja, ele n\u00e3o validar\u00e1 nem apresentar\u00e1 erro caso o campo chegue vazio, para isso utilize o m\u00e9todo notEmpty Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isCep', 'notEmpty'), 'filter' => array()), ); minLen \u00b6 Verifica se um campo do formul\u00e1rio \u00e9 menor que um dado valor. Este m\u00e9todo ir\u00e1 invalidar qualquer valor menor que o valor indicado como par\u00e2metro. Aceita par\u00e2metros size e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 6 caract\u00e9res 'name' => array('validation' => array('minLen' => 6), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 8 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('minLen' => array( 'size' => 8, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); maxLen \u00b6 Verifica se um campo do formul\u00e1rio \u00e9 maior que um dado valor. Este m\u00e9todo ir\u00e1 invalidar qualquer valor maior que o valor indicado como par\u00e2metro. Aceita par\u00e2metros size e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo no m\u00e1ximo 18 caract\u00e9res 'name' => array('validation' => array('minLen' => 18), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m no m\u00e1ximo 20 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('maxLen' => array( 'size' => 20, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); maiorQue \u00b6 O valor deste input deve ser maior que do target . Este m\u00e9todo compara o valor do input do formul\u00e1rio ao valor de outro input do mesmo formul\u00e1rio. A compara\u00e7\u00e3o que este m\u00e9todo realiza \u00e9 matem\u00e1tica , ou seja, o valor que deve ser inclu\u00eddo neste input bem como no target deve ser no seguinte formato 999.999,99 . Isto porque a ideia \u00e9 realizar compara\u00e7\u00e3o de valores monet\u00e1rios. Aceita par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name > name3 'name' => array('validation' => array('maiorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 > name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('maiorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), ); menorQue \u00b6 O valor deste input deve ser menor que do target . Este m\u00e9todo compara o valor do input do formul\u00e1rio ao valor de outro input do mesmo formul\u00e1rio. A compara\u00e7\u00e3o que este m\u00e9todo realiza \u00e9 matem\u00e1tica , ou seja, o valor que deve ser inclu\u00eddo neste input bem como no target deve ser no seguinte formato 999.999,99 . Isto porque a ideia \u00e9 realizar compara\u00e7\u00e3o de valores monet\u00e1rios. Aceita par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name < name3 'name' => array('validation' => array('menorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 < name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('menorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), ); identico \u00b6 Uma situa\u00e7\u00e3o muito comum \u00e9 comparar dois campos de um mesmo formul\u00e1rio que devem ser id\u00eanticos. Senha e confirma\u00e7\u00e3o de senha, por exemplo, para garantir assim que o usu\u00e1rio n\u00e3o vai cadastrar a senha errado. Este m\u00e9todo compara se dois campos do formul\u00e1rio s\u00e3o exatamente iguais. Aceita os par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara se o valor do input name == name2 'name' => array('validation' => array('identico' => 'name2'), 'filter' => array()), // Compara se o valor do input name3 == name4 'name3' => array('validation' => array('identico' => array( 'target' => 'name4', 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); inArray \u00b6 Qualquer usu\u00e1rio pode editar o HTML de uma p\u00e1gina em tempo real para injetar valores em um <select> o que pode significar uma falha de seguran\u00e7a, para isso este m\u00e9todo de valida\u00e7\u00e3o verifica se o valor que veio do post \u00e9 parte da lista de valores poss\u00edveis para este campo. Este m\u00e9todo necessita obrigatoriamente um array com a lista de valores poss\u00edveis para este campo. Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // File: ModuleDefault/Form/Index/Index.php protected $data = array( /** * Vamos assumir que o Select do formul\u00e1rio seria gerado a partir do seguinte array: * array( * '' => 'Selecione!', * 1 => 'Paran\u00e1', * 2 => 'S\u00e3o Paulo', * 3 => 'Minas Gerais', * 4 => 'Bahia', * ) */ 'name' => array('validation' => array('inArray' => array( '', 1, 2, 3, 4, )), 'filter' => array()), );","title":"4.1 Validation"},{"location":"user-guide/old-version/en/4.1-Validation/#validacoes-ja-inclusas-no-suitup","text":"O SuitUp j\u00e1 vem com diversos tipos de valida\u00e7\u00f5es de formul\u00e1rio prontos para serem utilizados, confira abaixo a lista desses m\u00e9todos. notEmpty isEmail isCep minLen maxLen maiorQue menorQue identico inArray","title":"Valida\u00e7\u00f5es j\u00e1 inclusas no SuitUp"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('notEmpty'), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_1","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isEmail'), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_2","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isCep', 'notEmpty'), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 6 caract\u00e9res 'name' => array('validation' => array('minLen' => 6), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 8 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('minLen' => array( 'size' => 8, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo no m\u00e1ximo 18 caract\u00e9res 'name' => array('validation' => array('minLen' => 18), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m no m\u00e1ximo 20 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('maxLen' => array( 'size' => 20, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name > name3 'name' => array('validation' => array('maiorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 > name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('maiorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name < name3 'name' => array('validation' => array('menorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 < name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('menorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara se o valor do input name == name2 'name' => array('validation' => array('identico' => 'name2'), 'filter' => array()), // Compara se o valor do input name3 == name4 'name3' => array('validation' => array('identico' => array( 'target' => 'name4', 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.1-Validation/#exemplo_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // File: ModuleDefault/Form/Index/Index.php protected $data = array( /** * Vamos assumir que o Select do formul\u00e1rio seria gerado a partir do seguinte array: * array( * '' => 'Selecione!', * 1 => 'Paran\u00e1', * 2 => 'S\u00e3o Paulo', * 3 => 'Minas Gerais', * 4 => 'Bahia', * ) */ 'name' => array('validation' => array('inArray' => array( '', 1, 2, 3, 4, )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/","text":"Filtros j\u00e1 inclusos no SuitUp \u00b6 Ap\u00f3s validar um campo do formul\u00e1rio pode ser necess\u00e1rio fazer alguns filtros nele antes de utilizar estes dados, por quest\u00e3o de seguran\u00e7a e tamb\u00e9m de integridade das informa\u00e7\u00f5es que voc\u00ea vai salvar no banco de dados. Mas do que se tratam esses filtros? Remo\u00e7\u00e3o de espa\u00e7os desnecess\u00e1rios, de caract\u00e9res como pontos, v\u00edrgulas, etc.. Confira abaixo a lista de m\u00e9todos para filtros que j\u00e1 vem junto com o SuitUp string trim toDbDate digits toDouble string \u00b6 Este m\u00e9todo remove espa\u00e7os em branco no in\u00edcio e final do campo do formul\u00e1rio e tamb\u00e9m aplica a fun\u00e7\u00e3o strip_tags que protege contra inser\u00e7\u00e3o de tags HTML. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('string')), ); \u00b6 trim \u00b6 Este m\u00e9todo remove espa\u00e7os em branco no in\u00edcio e final do campo do formul\u00e1rio. O filtro string \u00e9 uma esp\u00e9cie de evolu\u00e7\u00e3o deste m\u00e9todo e oferece mais seguran\u00e7a. Isso n\u00e3o quer dizer que este m\u00e9todo esteja obsoleto, apenas depende de qual a sua necessidade. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('trim')), ); \u00b6 toDbDate \u00b6 Este m\u00e9todo foi feito pensando no formato de data utilizado no Brasil (dd/mm/yyyy), ele pega este formato e o reverte para caber no formato universal do banco de dados (yyyy-mm-dd). Aten\u00e7\u00e3o \u00b6 Este m\u00e9todo n\u00e3o valida se o formato de entrada est\u00e1 correto, ele apenas realiza a invers\u00e3o, por isso certifique-se de criar um m\u00e9todo de valida\u00e7\u00e3o neste mesmo campo para garantir que o formato est\u00e1 correto. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDbDate')), ); \u00b6 digits \u00b6 Este m\u00e9todo garante que o campo ir\u00e1 retornar somente n\u00fameros (d\u00edgitos, inteiros ), ele remove automaticamente todos os caract\u00e9res que s\u00e3o diferentes de 0 a 9. Funciona somente com INTEIROS, para float ou double utilize toDouble Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('digits')), ); \u00b6 toDouble \u00b6 Este m\u00e9todo foi criado pensando no formato de moeda brasileira atual (BRL - Real), ou seja, R$ 999.999,99. Este m\u00e9todo pega um n\u00famero que chegou neste formato ou parecido e o transforma para double . Este m\u00e9todo utiliza as seguintes express\u00f5es regulares array(\"/[^0-9,.]/\", \"/\\./\", \"/\\,/\") . Isso significa que s\u00e3o tr\u00eas passos de formata\u00e7\u00e3o do campo. 1\u00ba Remover os caract\u00e9res que n\u00e3o sao num\u00e9ricos, v\u00edrgula ou ponto. 2\u00ba Remover os pontos e 3\u00ba substituir a v\u00edrgula por ponto. Ap\u00f3s isso o PHP consegue fazer a convers\u00e3o para double facilmente. Se o formato do campo for o inverso (R$ 999,999.99) ent\u00e3o este m\u00e9todo n\u00e3o ser\u00e1 eficiente, para isso voc\u00ea deve implementar seu [[pr\u00f3prio filtro|4.4 Filtro Personalizado]]. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDouble')), ); \u00b6","title":"4.2 Filters"},{"location":"user-guide/old-version/en/4.2-Filters/#filtros-ja-inclusos-no-suitup","text":"Ap\u00f3s validar um campo do formul\u00e1rio pode ser necess\u00e1rio fazer alguns filtros nele antes de utilizar estes dados, por quest\u00e3o de seguran\u00e7a e tamb\u00e9m de integridade das informa\u00e7\u00f5es que voc\u00ea vai salvar no banco de dados. Mas do que se tratam esses filtros? Remo\u00e7\u00e3o de espa\u00e7os desnecess\u00e1rios, de caract\u00e9res como pontos, v\u00edrgulas, etc.. Confira abaixo a lista de m\u00e9todos para filtros que j\u00e1 vem junto com o SuitUp string trim toDbDate digits toDouble","title":"Filtros j\u00e1 inclusos no SuitUp"},{"location":"user-guide/old-version/en/4.2-Filters/#exemplo","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-array-filter-arraystring","text":"","title":"1"},{"location":"user-guide/old-version/en/4.2-Filters/#exemplo_1","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-array-filter-arraytrim","text":"","title":"1"},{"location":"user-guide/old-version/en/4.2-Filters/#atencao","text":"Este m\u00e9todo n\u00e3o valida se o formato de entrada est\u00e1 correto, ele apenas realiza a invers\u00e3o, por isso certifique-se de criar um m\u00e9todo de valida\u00e7\u00e3o neste mesmo campo para garantir que o formato est\u00e1 correto.","title":"Aten\u00e7\u00e3o"},{"location":"user-guide/old-version/en/4.2-Filters/#exemplo_2","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-array-filter-arraytodbdate","text":"","title":"1"},{"location":"user-guide/old-version/en/4.2-Filters/#exemplo_3","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-array-filter-arraydigits","text":"","title":"1"},{"location":"user-guide/old-version/en/4.2-Filters/#exemplo_4","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/en/4.2-Filters/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-array-filter-arraytodouble","text":"","title":"1"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/","text":"Levando as valida\u00e7\u00f5es do seu formul\u00e1rio a outro n\u00edvel \u00b6 N\u00f3s queremos ampliar os horizontes \u00b6 Nosso objetivo criando o SuitUp nunca foi monopolizar seu projeto, ingessando-o para que voc\u00ea n\u00e3o utilize nada fora do nosso escopo, muito pelo contr\u00e1rio, em vez de ficar reinventando a roda, se existe uma ferramenta que faz o que precisamos e que funciona muito bem, ent\u00e3o por que n\u00e3o utiliz\u00e1-la? O SuitUp te ajuda com diversas situa\u00e7\u00f5es previstas e comuns de valida\u00e7\u00e3o de formul\u00e1rios, al\u00e9m disso voc\u00ea pode inserir as valida\u00e7\u00f5es do Zend Framework ( Github ) que inclusive j\u00e1 s\u00e3o marcadas pelo SuitUp como depend\u00eancias no composer , ou seja, ao utilizar o composer para fazer o download do SuitUp voc\u00ea estar\u00e1 automaticamente baixando as bibliotecas de valida\u00e7\u00f5es do Zend tamb\u00e9m. Mesmo depois de tudo isso, voc\u00ea muito provavelmente ir\u00e1 encontrar em seu sistema situa\u00e7\u00f5es de valida\u00e7\u00f5es que nem n\u00f3s do SuitUp nem o pessoal do Zend Framework previu. Para isso voc\u00ea pode muito facilmente criar seus pr\u00f3prios m\u00e9todos de valida\u00e7\u00e3o. Como fazer? \u00b6 Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar um stdClass com dois atributos ( error e message ). Exemplo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randErr' , 'randInvalid' => 'Mensagem personalizada' ), 'filter' => array ( 'string' ) ), ); // Exemplo simples de validacao public function randErr ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = '' ; // Casualmente retorna 1 e gera erro if ( rand ( 0 , 1 ) == 1 ) { $result -> error = true ; $result -> message = \"Este m\u00e9todo retorna erro aleatoriamente\" ; } return $result ; } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randInvalid ( $value , $options = null ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if ( is_int ( $value ) && ( $value % 2 ) == 0 ) { $result -> error = true ; // Verifica se foi passado parametro 'mensagem' if ( isset ( $options [ 'message' ]) { $result -> message = $options [ 'message' ]; // Verifica se foi passado simplesmente mensagem } elseif ( is_string ( $options )) { $result -> message = $options ; // Mensagem padrao (sem parametro) } else { $result -> message = 'Um erro foi detectado' ; } } return $result ; } } Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator \u00b6 Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de valida\u00e7\u00e3o ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios. Parece, mas n\u00e3o \u00e9 complicado! \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"4.3 Personal Validation"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#levando-as-validacoes-do-seu-formulario-a-outro-nivel","text":"","title":"Levando as valida\u00e7\u00f5es do seu formul\u00e1rio a outro n\u00edvel"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#nos-queremos-ampliar-os-horizontes","text":"Nosso objetivo criando o SuitUp nunca foi monopolizar seu projeto, ingessando-o para que voc\u00ea n\u00e3o utilize nada fora do nosso escopo, muito pelo contr\u00e1rio, em vez de ficar reinventando a roda, se existe uma ferramenta que faz o que precisamos e que funciona muito bem, ent\u00e3o por que n\u00e3o utiliz\u00e1-la? O SuitUp te ajuda com diversas situa\u00e7\u00f5es previstas e comuns de valida\u00e7\u00e3o de formul\u00e1rios, al\u00e9m disso voc\u00ea pode inserir as valida\u00e7\u00f5es do Zend Framework ( Github ) que inclusive j\u00e1 s\u00e3o marcadas pelo SuitUp como depend\u00eancias no composer , ou seja, ao utilizar o composer para fazer o download do SuitUp voc\u00ea estar\u00e1 automaticamente baixando as bibliotecas de valida\u00e7\u00f5es do Zend tamb\u00e9m. Mesmo depois de tudo isso, voc\u00ea muito provavelmente ir\u00e1 encontrar em seu sistema situa\u00e7\u00f5es de valida\u00e7\u00f5es que nem n\u00f3s do SuitUp nem o pessoal do Zend Framework previu. Para isso voc\u00ea pode muito facilmente criar seus pr\u00f3prios m\u00e9todos de valida\u00e7\u00e3o.","title":"N\u00f3s queremos ampliar os horizontes"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#como-fazer","text":"Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar um stdClass com dois atributos ( error e message ).","title":"Como fazer?"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randErr' , 'randInvalid' => 'Mensagem personalizada' ), 'filter' => array ( 'string' ) ), ); // Exemplo simples de validacao public function randErr ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = '' ; // Casualmente retorna 1 e gera erro if ( rand ( 0 , 1 ) == 1 ) { $result -> error = true ; $result -> message = \"Este m\u00e9todo retorna erro aleatoriamente\" ; } return $result ; } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randInvalid ( $value , $options = null ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if ( is_int ( $value ) && ( $value % 2 ) == 0 ) { $result -> error = true ; // Verifica se foi passado parametro 'mensagem' if ( isset ( $options [ 'message' ]) { $result -> message = $options [ 'message' ]; // Verifica se foi passado simplesmente mensagem } elseif ( is_string ( $options )) { $result -> message = $options ; // Mensagem padrao (sem parametro) } else { $result -> message = 'Um erro foi detectado' ; } } return $result ; } }","title":"Exemplo"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#extendendo-a-classe-suitupformvalidatorabstractformvalidator","text":"Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de valida\u00e7\u00e3o ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios.","title":"Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator"},{"location":"user-guide/old-version/en/4.3-Personal-Validation/#parece-mas-nao-e-complicado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"Parece, mas n\u00e3o \u00e9 complicado!"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/","text":"Filtrando dados do formul\u00e1rio \u00b6 Diferente das [[valida\u00e7\u00f5es|4.1-Valida\u00e7\u00f5es]] onde voc\u00ea tem a op\u00e7\u00e3o de utilizar os m\u00e9todos do Zend Framework os m\u00e9todos de filtro para formul\u00e1rios n\u00e3o t\u00eam esta op\u00e7\u00e3o. O motivo \u00e9 que ainda n\u00e3o houve interesse em incorporar este tipo filtro ainda. Por outro lado voc\u00ea ainda tem a op\u00e7\u00e3o de criar seus pr\u00f3prios m\u00e9todos de filtro assim como valida\u00e7\u00f5es o que te proporciona a possibilidade de levar seus filtros a outro n\u00edvel tamb\u00e9m. Como fazer? \u00b6 Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar o valor do input j\u00e1 com a aplica\u00e7\u00e3o dos filtros desejados. Exemplo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' ), 'filter' => array ( 'string' , 'randConcatNumber' , 'randConcatLetter' => 'abc' ) ), ); // Exemplo simples de filtro public function randConcatNumber ( $value ) { return $value . '_' . (( string ) rand ( 0 , 9 )); } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randConcatLetter ( $value , $options = 'ab' ) { // Garante que $options \u00e9 string $options = ( string ) $options ; // pega um indice randomico de $options $i = rand ( 0 , strlen ( $options )) - 1 ; // Retorna $value concatenado da letra randomica encontrada return $value . '-' . $options [ $i ]; } } Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator \u00b6 Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de filtro ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios. Parece, mas n\u00e3o \u00e9 complicado! \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"4.4 Personal Filter"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/#filtrando-dados-do-formulario","text":"Diferente das [[valida\u00e7\u00f5es|4.1-Valida\u00e7\u00f5es]] onde voc\u00ea tem a op\u00e7\u00e3o de utilizar os m\u00e9todos do Zend Framework os m\u00e9todos de filtro para formul\u00e1rios n\u00e3o t\u00eam esta op\u00e7\u00e3o. O motivo \u00e9 que ainda n\u00e3o houve interesse em incorporar este tipo filtro ainda. Por outro lado voc\u00ea ainda tem a op\u00e7\u00e3o de criar seus pr\u00f3prios m\u00e9todos de filtro assim como valida\u00e7\u00f5es o que te proporciona a possibilidade de levar seus filtros a outro n\u00edvel tamb\u00e9m.","title":"Filtrando dados do formul\u00e1rio"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/#como-fazer","text":"Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar o valor do input j\u00e1 com a aplica\u00e7\u00e3o dos filtros desejados.","title":"Como fazer?"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/#exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' ), 'filter' => array ( 'string' , 'randConcatNumber' , 'randConcatLetter' => 'abc' ) ), ); // Exemplo simples de filtro public function randConcatNumber ( $value ) { return $value . '_' . (( string ) rand ( 0 , 9 )); } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randConcatLetter ( $value , $options = 'ab' ) { // Garante que $options \u00e9 string $options = ( string ) $options ; // pega um indice randomico de $options $i = rand ( 0 , strlen ( $options )) - 1 ; // Retorna $value concatenado da letra randomica encontrada return $value . '-' . $options [ $i ]; } }","title":"Exemplo"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/#extendendo-a-classe-suitupformvalidatorabstractformvalidator","text":"Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de filtro ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios.","title":"Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator"},{"location":"user-guide/old-version/en/4.4-Personal-Filter/#parece-mas-nao-e-complicado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"Parece, mas n\u00e3o \u00e9 complicado!"},{"location":"user-guide/old-version/en/5.-Database/","text":"","title":"5. Database"},{"location":"user-guide/old-version/en/5.1-database.config.php/","text":"","title":"5.1 database.config.php"},{"location":"user-guide/old-version/en/5.2-SQL-Monitoring/","text":"","title":"5.2 SQL Monitoring"},{"location":"user-guide/old-version/en/6.-Routes/","text":"","title":"6. Routes"},{"location":"user-guide/old-version/en/7.-Functions/","text":"Fun\u00e7\u00f5es \u00fateis \u00b6 Voc\u00ea j\u00e1 sabe que o foco do SuitUp \u00e9 produtividade, por isso nem tudo aqui \u00e9 feito atrav\u00e9s de objetos. N\u00f3s temos que observar que o fato de algo n\u00e3o ser feito atrav\u00e9s de Orienta\u00e7\u00e3o a Objetos n\u00e3o significa que est\u00e1 mal feito ou que n\u00e3o vai funcionar direito. O PHP \u00e9 uma linguagem que tamb\u00e9m funciona atrav\u00e9s de script e n\u00f3s podemos tirar proveito disso para agilizar o desenvolvimento dos nossos aplicativos. De modo pr\u00e1tico n\u00f3s queremos dizer que escrever dump($var) \u00e9 muito mais r\u00e1pido que escrever \\SuitUp\\Debug\\Debug::dump($var) . ~ throwNewExceptionFromAnywhere ~ \u00b6 Reservado pelo sistema. Serve para n\u00f3s conseguirmos jogar Exceptions mesmo fora do escopo do SuitUp . Voc\u00ea n\u00e3o deve sobrescrever ou alterar isso. dump \u00b6 1 2 ( mixed ) $ var ; // Vari\u00e1vel que ser\u00e1 testada ( bool ) $ echo ; // Quando true em vez de travar o sistema , a fun\u00e7\u00e3o ir\u00e1 retornar o valor . Como j\u00e1 hav\u00edamos citado antes [[aqui|2.4 Debug]], esta fun\u00e7\u00e3o \u00e9 utilizada para realizar os testes ( debugs ) e poder assim verificar o funcionamento do sistema","title":"7. Functions"},{"location":"user-guide/old-version/en/7.-Functions/#funcoes-uteis","text":"Voc\u00ea j\u00e1 sabe que o foco do SuitUp \u00e9 produtividade, por isso nem tudo aqui \u00e9 feito atrav\u00e9s de objetos. N\u00f3s temos que observar que o fato de algo n\u00e3o ser feito atrav\u00e9s de Orienta\u00e7\u00e3o a Objetos n\u00e3o significa que est\u00e1 mal feito ou que n\u00e3o vai funcionar direito. O PHP \u00e9 uma linguagem que tamb\u00e9m funciona atrav\u00e9s de script e n\u00f3s podemos tirar proveito disso para agilizar o desenvolvimento dos nossos aplicativos. De modo pr\u00e1tico n\u00f3s queremos dizer que escrever dump($var) \u00e9 muito mais r\u00e1pido que escrever \\SuitUp\\Debug\\Debug::dump($var) .","title":"Fun\u00e7\u00f5es \u00fateis"},{"location":"user-guide/old-version/en/7.-Functions/#thrownewexceptionfromanywhere","text":"Reservado pelo sistema. Serve para n\u00f3s conseguirmos jogar Exceptions mesmo fora do escopo do SuitUp . Voc\u00ea n\u00e3o deve sobrescrever ou alterar isso.","title":"~throwNewExceptionFromAnywhere~"},{"location":"user-guide/old-version/en/7.-Functions/#dump","text":"1 2 ( mixed ) $ var ; // Vari\u00e1vel que ser\u00e1 testada ( bool ) $ echo ; // Quando true em vez de travar o sistema , a fun\u00e7\u00e3o ir\u00e1 retornar o valor . Como j\u00e1 hav\u00edamos citado antes [[aqui|2.4 Debug]], esta fun\u00e7\u00e3o \u00e9 utilizada para realizar os testes ( debugs ) e poder assim verificar o funcionamento do sistema","title":"dump"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/","text":"Suitup PHP Framework - Old version \u00b6 Esta \u00e9 a documenta\u00e7\u00e3o para a vers\u00e3o antiga do Suitup, procure utilizar a vers\u00e3o mais nova... Instala\u00e7\u00e3o Composer \u00b6 Caution Avoid to install this version composer require braghim-sistemas/suitup-php ^1 Estrutura do projeto \u00b6 Esta \u00e9 a estrutura recomendada do projeto, lembre-se que dentro da pasta de cada m\u00f3dulo temos, os Controllers , views e Models que devem seguir esta estrutura, a estrutura de Form \u00e9 opcional. Voc\u00ea pode colocar a pasta de arquivos css, js, etc, onde julgar melhor. Por padr\u00e3o o primeiro m\u00f3dulo \u00e9 sempre o ModuleDefault , este nunca deve deixar de existir. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 assets | example.jpg config | database.config.php modules | ModuleDefault | | Controllers | | | IndexController.php | | | ErrorController.php | | Form | | | Index | | | | Index.php | | Model | | | Gateway | | | | User.php | | | UserBusiness.php | | views | | | index | | | | index.phtml | | | error | | | | not-found.phtml | | | | error.phtml | ModuleAdmin .htaccess composer.json composer.phar index.php .htaccess \u00b6 Este framework funciona com o mod rewrite do apache habilitado. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L] index.php \u00b6 Este \u00e9 o arquivo onde o sistema vai iniciar sempre, independente de qual p\u00e1gina o usu\u00e1rio acessa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <?php session_start (); // horario de sao paulo date_default_timezone_set ( 'America/Sao_Paulo' ); // Constantes de configuracao definidas no VirtualHost (j\u00e1 chegamos l\u00e1). define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Diretorio raiz // Tudo \u00e9 relativo \u00e0 raiz do sistema chdir ( __DIR__ ); // Funcoes simples que voc\u00ea pode querer implementar (opcional) // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // Voc\u00ea pode adicionar suas bibliotecas aqui, se quiser. // $loader->add('System', 'library/.'); } else { exit ( \"Depend\u00eancias do projeto n\u00e3o encontradas, execute o comando 'php composer.phar install'\" ); } // Para rodar o framework bastam essas duas linhas. $mvc = new SuitUpStart ( 'caminho/relativo/para/os/modulos/' ); // Caso queira monitorar as consultas SQL // Cuidado para n\u00e3o deixar habilitado em ambiente de produ\u00e7\u00e3o $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run (); Virtual Host \u00b6 Recomendamos que voc\u00ea crie um Virtual Host para rodar a aplica\u00e7\u00e3o, simulando assim um ambiente mais pr\u00f3ximo do que ficar\u00e1 online 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <VirtualHost *:80> ServerAdmin seumail@seuhost.com.br ServerName seuprojeto.dev ServerAlias seuprojeto.dev DocumentRoot /var/www/seuProjeto <Directory /var/www/seuProjeto> Options Indexes FollowSymLinks AllowOverride All Order allow,deny Allow from all </Directory> ErrorLog /var/www/log/seuProjeto/error.log CustomLog /var/www/log/seuProjeto/access.log combined LogLevel warn # Variaveis de ambiente # False quando estiver online. SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true </VirtualHost> Isto \u00e9 tudo para fazer funcionar. Bom trabalho, muito obrigado.","title":"1. Instala\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#suitup-php-framework-old-version","text":"Esta \u00e9 a documenta\u00e7\u00e3o para a vers\u00e3o antiga do Suitup, procure utilizar a vers\u00e3o mais nova...","title":"Suitup PHP Framework - Old version"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#instalacao-composer","text":"Caution Avoid to install this version composer require braghim-sistemas/suitup-php ^1","title":"Instala\u00e7\u00e3o Composer"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#estrutura-do-projeto","text":"Esta \u00e9 a estrutura recomendada do projeto, lembre-se que dentro da pasta de cada m\u00f3dulo temos, os Controllers , views e Models que devem seguir esta estrutura, a estrutura de Form \u00e9 opcional. Voc\u00ea pode colocar a pasta de arquivos css, js, etc, onde julgar melhor. Por padr\u00e3o o primeiro m\u00f3dulo \u00e9 sempre o ModuleDefault , este nunca deve deixar de existir. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 assets | example.jpg config | database.config.php modules | ModuleDefault | | Controllers | | | IndexController.php | | | ErrorController.php | | Form | | | Index | | | | Index.php | | Model | | | Gateway | | | | User.php | | | UserBusiness.php | | views | | | index | | | | index.phtml | | | error | | | | not-found.phtml | | | | error.phtml | ModuleAdmin .htaccess composer.json composer.phar index.php","title":"Estrutura do projeto"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#htaccess","text":"Este framework funciona com o mod rewrite do apache habilitado. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI} : :$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E = BASE:%1] RewriteRule ^(.*)$ %{ENV : BASE}index.php [NC,L]","title":".htaccess"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#indexphp","text":"Este \u00e9 o arquivo onde o sistema vai iniciar sempre, independente de qual p\u00e1gina o usu\u00e1rio acessa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <?php session_start (); // horario de sao paulo date_default_timezone_set ( 'America/Sao_Paulo' ); // Constantes de configuracao definidas no VirtualHost (j\u00e1 chegamos l\u00e1). define ( 'DEVELOPMENT' , ( bool ) getenv ( \"DEVELOPMENT\" )); define ( 'SHOW_ERRORS' , ( bool ) getenv ( \"SHOW_ERRORS\" )); if ( SHOW_ERRORS ) { error_reporting ( E_ALL ); ini_set ( 'display_errors' , true ); } // Diretorio raiz // Tudo \u00e9 relativo \u00e0 raiz do sistema chdir ( __DIR__ ); // Funcoes simples que voc\u00ea pode querer implementar (opcional) // include_once './functions.php'; // Setup autoloading composer if ( file_exists ( 'vendor/autoload.php' )) { $loader = include 'vendor/autoload.php' ; // Voc\u00ea pode adicionar suas bibliotecas aqui, se quiser. // $loader->add('System', 'library/.'); } else { exit ( \"Depend\u00eancias do projeto n\u00e3o encontradas, execute o comando 'php composer.phar install'\" ); } // Para rodar o framework bastam essas duas linhas. $mvc = new SuitUpStart ( 'caminho/relativo/para/os/modulos/' ); // Caso queira monitorar as consultas SQL // Cuidado para n\u00e3o deixar habilitado em ambiente de produ\u00e7\u00e3o $mvc -> setSqlMonitor ( DEVELOPMENT ); $mvc -> run ();","title":"index.php"},{"location":"user-guide/old-version/ptbr/1.-Instala\u00e7\u00e3o/#virtual-host","text":"Recomendamos que voc\u00ea crie um Virtual Host para rodar a aplica\u00e7\u00e3o, simulando assim um ambiente mais pr\u00f3ximo do que ficar\u00e1 online 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <VirtualHost *:80> ServerAdmin seumail@seuhost.com.br ServerName seuprojeto.dev ServerAlias seuprojeto.dev DocumentRoot /var/www/seuProjeto <Directory /var/www/seuProjeto> Options Indexes FollowSymLinks AllowOverride All Order allow,deny Allow from all </Directory> ErrorLog /var/www/log/seuProjeto/error.log CustomLog /var/www/log/seuProjeto/access.log combined LogLevel warn # Variaveis de ambiente # False quando estiver online. SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true </VirtualHost> Isto \u00e9 tudo para fazer funcionar. Bom trabalho, muito obrigado.","title":"Virtual Host"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/","text":"Constantes padr\u00e3o do sistema \u00b6 Voc\u00ea pode notar [[aqui na instala\u00e7\u00e3o|1. Instala\u00e7\u00e3o]] que j\u00e1 de cara n\u00f3s criamos duas constantes no arquivo index.php , s\u00e3o elas: index.php 1 2 define('DEVELOPMENT', (bool) getenv(\"DEVELOPMENT\")); define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); Que vieram do Virtual Host como voc\u00ea pode notar abaixo e s\u00e3o definidas para nos informar sobre o ambiente de execu\u00e7\u00e3o e a mostragem de erros do PHP. VirtualHost \u00b6 Lembre-se que para definir essas constantes (desde que voc\u00ea tenha seguido a recomenda\u00e7\u00e3o para o index.php ) voce deve fazer da seguinte forma no seu VirtualHost. 1 2 3 4 5 6 7 <VirtualHost *:80> # ... SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true # ... O que elas significam? \u00b6 DEVELOPMENT \u00b6 Indica que o sistema est\u00e1 em ambiente de desenvolvimento, assim voc\u00ea pode separar em seu c\u00f3digo quest\u00f5es que v\u00e3o acontecer somente em desenvolvimento. 1 2 3 4 5 6 7 8 9 10 11 12 try { $userBo = new UserBusiness(); $user = $userBo->get((int) $this->getParam('user', 0)); } catch(\\Exception $e) { // Se este c\u00f3digo estiver rodando em ambiente de desenvolvimento // haver\u00e1 o disparo na tela da fun\u00e7\u00e3o dump() que mostra o conte\u00fado // de uma vari\u00e1vel na tela em branco. Neste caso a Exception if (DEVELOPMENT) { dump($e); } } SHOW_ERRORS \u00b6 Indica para o sistema que os erros devem ser mostrados. Na verdade, se voc\u00ea seguiu a recomenda\u00e7\u00e3o para criar o index.php n\u00e3o precisa fazer mais nada, ficou assim: 1 2 3 4 5 define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); }","title":"1.1 Constantes padr\u00e3o"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/#constantes-padrao-do-sistema","text":"Voc\u00ea pode notar [[aqui na instala\u00e7\u00e3o|1. Instala\u00e7\u00e3o]] que j\u00e1 de cara n\u00f3s criamos duas constantes no arquivo index.php , s\u00e3o elas: index.php 1 2 define('DEVELOPMENT', (bool) getenv(\"DEVELOPMENT\")); define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); Que vieram do Virtual Host como voc\u00ea pode notar abaixo e s\u00e3o definidas para nos informar sobre o ambiente de execu\u00e7\u00e3o e a mostragem de erros do PHP.","title":"Constantes padr\u00e3o do sistema"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/#virtualhost","text":"Lembre-se que para definir essas constantes (desde que voc\u00ea tenha seguido a recomenda\u00e7\u00e3o para o index.php ) voce deve fazer da seguinte forma no seu VirtualHost. 1 2 3 4 5 6 7 <VirtualHost *:80> # ... SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true # ...","title":"VirtualHost"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/#o-que-elas-significam","text":"","title":"O que elas significam?"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/#development","text":"Indica que o sistema est\u00e1 em ambiente de desenvolvimento, assim voc\u00ea pode separar em seu c\u00f3digo quest\u00f5es que v\u00e3o acontecer somente em desenvolvimento. 1 2 3 4 5 6 7 8 9 10 11 12 try { $userBo = new UserBusiness(); $user = $userBo->get((int) $this->getParam('user', 0)); } catch(\\Exception $e) { // Se este c\u00f3digo estiver rodando em ambiente de desenvolvimento // haver\u00e1 o disparo na tela da fun\u00e7\u00e3o dump() que mostra o conte\u00fado // de uma vari\u00e1vel na tela em branco. Neste caso a Exception if (DEVELOPMENT) { dump($e); } }","title":"DEVELOPMENT"},{"location":"user-guide/old-version/ptbr/1.1-Constantes-padr\u00e3o/#show_errors","text":"Indica para o sistema que os erros devem ser mostrados. Na verdade, se voc\u00ea seguiu a recomenda\u00e7\u00e3o para criar o index.php n\u00e3o precisa fazer mais nada, ficou assim: 1 2 3 4 5 define('SHOW_ERRORS', (bool) getenv(\"SHOW_ERRORS\")); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); }","title":"SHOW_ERRORS"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/","text":"Controladores e Views \u00b6 O que s\u00e3o controladores ? \u00b6 Se voc\u00ea n\u00e3o est\u00e1 acostumado com a arquitetura MVC, procure [[estudar o assunto|https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]] para entender do que se trata em teoria e como o mundo da programa\u00e7\u00e3o de softwares costuma empreg\u00e1-lo. Como n\u00f3s empregamos os controladores: \u00b6 Na pr\u00e1tica, pensamos em um controlador como um local espec\u00edfico (classe) de seu aplicativo que realiza uma determinada tarefa atrav\u00e9s de a\u00e7\u00f5es (m\u00e9todos). Ele controla o fluxo de dados recebidos pelo usu\u00e1rio do navegador e o destino desses dados. \u00c9 ele inclusive que transfere as informa\u00e7\u00f5es que poder\u00e3o ser utilizadas nas views . Se voc\u00ea n\u00e3o est\u00e1 habituado com MVC a princ\u00edpio pode parecer um pouco complexo e que isso tudo envolve muitas dificuldades l\u00f3gicas, mas a verdade \u00e9 que na pr\u00e1tica acaba sendo bem simples. Exemplo: \u00b6 Vamos supor que voc\u00ea tenha em sua view um bot\u00e3o onde ao clicar ele recarrega a mesma p\u00e1gina, mas disparando uma mensagem. O controlador pega esta requisi\u00e7\u00e3o que pode ser identificada de v\u00e1rios m\u00e9todos, mas vamos tratar aqui como POST. O controlador chama o m\u00e9todo $this->addMsg(\"Eu sou uma mensagem\", \\SuitUp\\Enum\\MsgType::INFO) que vai adicionar a mensagem \u00e0 vari\u00e1vel $layoutMessages que pode ser recuperada no layout. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php // Arquivo: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { // Esta a\u00e7\u00e3o ser\u00e1 executada ao acessar // http://seusite.dev/ public function indexAction () { if ( $this -> isPost ()) { $this -> addMsg ( \"Eu sou uma mensagem\" , \\SuitUp\\Enum\\MsgType :: INFO ); } } } Perceba que o papel do controlador \u00e9 receber a requisi\u00e7\u00e3o feita pelo usu\u00e1rio e responder a ela de acordo com a necessidade. Como criar um controlador \u00b6 Agora que voc\u00ea j\u00e1 sabe o que \u00e9 um Controlador vamos entender qual a estrutura b\u00e1sica para criar um novo. Defina o nome que quer dar ao seu Controlador (vamos dizer que seja usu\u00e1rio ); N\u00e3o esque\u00e7a que este nome ser\u00e1 usado na URL, neste caso http://seusite.dev/usuario/index ou simplesmente http://seusite.dev/usuario Sem acentos ou espa\u00e7os em branco, o nome do controlador deve iniciar com letra mai\u00fascula seguido de min\u00fasculas; Neste nosso exemplo o controlador usu\u00e1rio ficar\u00e1 UsuarioController ; Este nosso controlador dever\u00e1 ficar dentro da pasta Controllers do m\u00f3dulo escolhido; O nome da classe e do arquivo devem ser iguais, neste nosso caso, ModuleDefault/Controllers/UsuarioController.php O arquivo dever\u00e1 ter o seguinte conte\u00fado m\u00ednimo : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php // Arquivo: ModuleDefault/Controllers/UsuarioController.php namespace ModuleDefault\\Controllers ; class UsuarioController extends AbstractController { public function indexAction () { // Seu conte\u00fado aqui // Para transferir um conte\u00fado para a view $this -> addViewVar ( array ( 'nomeDaVariavel' => 'Seu conte\u00fado' )); } } Note que para transferir uma vari\u00e1vel para a view basta voc\u00ea utilizar o m\u00e9todo $this->addViewVar(); . AbstractController \u00b6 Voc\u00ea deve ter notado nos exemplos acima que os controladores costumam herdar de AbstractController e talvez pense que este arquivo \u00e9 fornecido por nosso framework , mas isso n\u00e3o \u00e9 verdade. A verdade \u00e9 que este arquivo dever\u00e1 ser criado por voc\u00ea dentro de cada m\u00f3dulo e n\u00f3s sugerimos que isso seja feito para facilitar sua vida. O AbstractController deve existir para que voc\u00ea possa personalizar alguns m\u00e9todos que o SuitUp n\u00e3o implementou exatamente de acordo com o que voc\u00ea precisa para este projeto ou at\u00e9 mesmo para adicionar m\u00e9todos que poder\u00e3o ser compartilhados entre todos os controladores do m\u00f3dulo e assim melhorar a reusabilidade do seu c\u00f3digo. Por isso dizemos que para uma boa aplica\u00e7\u00e3o o AbstractController \u00e9 obrigat\u00f3rio! Mesmo que n\u00e3o seja de fato obrigat\u00f3rio que este arquivo exista. N\u00f3s j\u00e1 mencionamos isso acima, mas talvez durante a leitura este bloco lhe tenha passado sem muita import\u00e2ncia, por isso vamos frisar novamente: Deve existir um AbstractController para cada m\u00f3dulo do seu aplicativo . Isso evita edi\u00e7\u00e3o de m\u00e9todos que impactam em v\u00e1rios m\u00f3dulos ao mesmo tempo. A ideia \u00e9 criar neste arquivo m\u00e9todos que s\u00e3o \u00fateis para serem usados em diversos locais (do mesmo m\u00f3dulo) de seu sistema para al\u00e9m de aumentar a produtividade tamb\u00e9m n\u00e3o ter que reescrever o mesmo bloco de c\u00f3digo v\u00e1rias vezes. A estrutura m\u00ednima de um AbstractController deve ser: 1 2 3 4 5 6 7 8 9 <?php // Arquivo: ModuleDefault/Controllers/AbstractController.php namespace ModuleDefault\\Controllers ; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { // Adicione aqui os m\u00e9todos que ser\u00e3o \u00fateis a voc\u00ea em diversos controladores. } Voc\u00ea pode abrir o arquivo MvcAbstractController.php ou usar a fun\u00e7\u00e3o get_class_methods($this) para ver quais m\u00e9todos j\u00e1 est\u00e3o inclusos na inst\u00e2ncia. Antes de sobrescrever algum m\u00e9todo leia [[este link|2.1 MvcAbstractController]] para entender o workflow do SuitUp e evitar algumas dores de cabe\u00e7a. O que s\u00e3o views ? \u00b6 Nem s\u00f3 de PHP vive um site, obviamente ser\u00e1 necess\u00e1rio mostrar conte\u00fados para o usu\u00e1rio e isso ser\u00e1 feito atrav\u00e9s de HTML (com exce\u00e7\u00e3o aos WebServices que retornam preferencialmente JSON). O SuitUp relaciona cada m\u00e9todo de um controlador a um arquivo .phtml automaticamente. Como ele faz isso? Cada m\u00f3dulo deve ter uma pasta chamada views e dentro dela uma pasta para cada controlador que por sua vez vai conter um arquivo para cada m\u00e9todo do controlador. N\u00f3s vamos explicar um pouco melhor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 modules | ModuleDefault | ModuleAdmin | | Controllers | | | AbstractController.php | | | UsuarioController.php | | views | | | usuario | | | | index.phtml | | | | editar.phtml | | | layout.phtml .htaccess composer.json index.php Lembra do nosso controlador usu\u00e1rio ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <?php // Arquivo: ModuleAdmin/Controllers/UsuarioController.php namespace ModuleAdmin\\Controllers ; class UsuarioController extends AbstractController { /** * Este m\u00e9todo deve ser acessado por 'http://seusite.dev/admin/usuario' */ public function indexAction () { // Seu conte\u00fado aqui // Para transferir um conte\u00fado para a view $this -> addViewVar ( array ( 'nomeDaVariavel' => 'Seu conte\u00fado' )); } /** * Este m\u00e9todo deve ser acessado por 'http://seusite.dev/admin/usuario/editar' */ public function editarAction () { // Este m\u00e9todo deve editar um usuario } } Notou alguma coisa diferente? Agora o m\u00f3dulo usado \u00e9 Admin, isso faz com que a URL mude tamb\u00e9m. Cada m\u00e9todo deste ter\u00e1 um arquivo .phtml correspondente e ser\u00e3o eles: ModuleAdmin/views/usuario/index.phtml ModuleAdmin/views/usuario/editar.phtml 1 2 3 4 5 6 7 8 9 10 <!-- Arquivo: ModuleAdmin/views/usuario/index.phtml --> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" >< i class = \"fa fa-bell\" ></ i > Cabe\u00e7alho </ div > < div class = \"panel-body\" > <!-- Note que esta vari\u00e1vel foi enviada pelo controlador --> <?php echo $nomeDaVariavel; ?> </ div > </ div > Note que \u00e9 poss\u00edvel dentro da view recuperar a vari\u00e1vel $nomeDaVariavel que foi transferida do controlador atrav\u00e9s do m\u00e9todo $this->addViewVar(); Talvez voc\u00ea tenha percebido que este arquivo, mesmo sendo HTML, n\u00e3o inicia de modo tradicional, ou seja, <!DOCTYPE html> . Isso porqu\u00ea os arquivos de view cont\u00e9m apenas o conte\u00fado espec\u00edfico para eles e tudo aquilo que ser\u00e1 repetido em todas as p\u00e1ginas do seu site ficam separados em um \u00fanico arquivo chamado [[layout. Clique aqui para continuar|3. Layouts]].","title":"2. Controllers e Views"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#controladores-e-views","text":"","title":"Controladores e Views"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#o-que-sao-controladores","text":"Se voc\u00ea n\u00e3o est\u00e1 acostumado com a arquitetura MVC, procure [[estudar o assunto|https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]] para entender do que se trata em teoria e como o mundo da programa\u00e7\u00e3o de softwares costuma empreg\u00e1-lo.","title":"O que s\u00e3o controladores?"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#como-nos-empregamos-os-controladores","text":"Na pr\u00e1tica, pensamos em um controlador como um local espec\u00edfico (classe) de seu aplicativo que realiza uma determinada tarefa atrav\u00e9s de a\u00e7\u00f5es (m\u00e9todos). Ele controla o fluxo de dados recebidos pelo usu\u00e1rio do navegador e o destino desses dados. \u00c9 ele inclusive que transfere as informa\u00e7\u00f5es que poder\u00e3o ser utilizadas nas views . Se voc\u00ea n\u00e3o est\u00e1 habituado com MVC a princ\u00edpio pode parecer um pouco complexo e que isso tudo envolve muitas dificuldades l\u00f3gicas, mas a verdade \u00e9 que na pr\u00e1tica acaba sendo bem simples.","title":"Como n\u00f3s empregamos os controladores:"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#exemplo","text":"Vamos supor que voc\u00ea tenha em sua view um bot\u00e3o onde ao clicar ele recarrega a mesma p\u00e1gina, mas disparando uma mensagem. O controlador pega esta requisi\u00e7\u00e3o que pode ser identificada de v\u00e1rios m\u00e9todos, mas vamos tratar aqui como POST. O controlador chama o m\u00e9todo $this->addMsg(\"Eu sou uma mensagem\", \\SuitUp\\Enum\\MsgType::INFO) que vai adicionar a mensagem \u00e0 vari\u00e1vel $layoutMessages que pode ser recuperada no layout. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php // Arquivo: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { // Esta a\u00e7\u00e3o ser\u00e1 executada ao acessar // http://seusite.dev/ public function indexAction () { if ( $this -> isPost ()) { $this -> addMsg ( \"Eu sou uma mensagem\" , \\SuitUp\\Enum\\MsgType :: INFO ); } } } Perceba que o papel do controlador \u00e9 receber a requisi\u00e7\u00e3o feita pelo usu\u00e1rio e responder a ela de acordo com a necessidade.","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#como-criar-um-controlador","text":"Agora que voc\u00ea j\u00e1 sabe o que \u00e9 um Controlador vamos entender qual a estrutura b\u00e1sica para criar um novo. Defina o nome que quer dar ao seu Controlador (vamos dizer que seja usu\u00e1rio ); N\u00e3o esque\u00e7a que este nome ser\u00e1 usado na URL, neste caso http://seusite.dev/usuario/index ou simplesmente http://seusite.dev/usuario Sem acentos ou espa\u00e7os em branco, o nome do controlador deve iniciar com letra mai\u00fascula seguido de min\u00fasculas; Neste nosso exemplo o controlador usu\u00e1rio ficar\u00e1 UsuarioController ; Este nosso controlador dever\u00e1 ficar dentro da pasta Controllers do m\u00f3dulo escolhido; O nome da classe e do arquivo devem ser iguais, neste nosso caso, ModuleDefault/Controllers/UsuarioController.php O arquivo dever\u00e1 ter o seguinte conte\u00fado m\u00ednimo : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php // Arquivo: ModuleDefault/Controllers/UsuarioController.php namespace ModuleDefault\\Controllers ; class UsuarioController extends AbstractController { public function indexAction () { // Seu conte\u00fado aqui // Para transferir um conte\u00fado para a view $this -> addViewVar ( array ( 'nomeDaVariavel' => 'Seu conte\u00fado' )); } } Note que para transferir uma vari\u00e1vel para a view basta voc\u00ea utilizar o m\u00e9todo $this->addViewVar(); .","title":"Como criar um controlador"},{"location":"user-guide/old-version/ptbr/2.-Controllers-e-Views/#abstractcontroller","text":"Voc\u00ea deve ter notado nos exemplos acima que os controladores costumam herdar de AbstractController e talvez pense que este arquivo \u00e9 fornecido por nosso framework , mas isso n\u00e3o \u00e9 verdade. A verdade \u00e9 que este arquivo dever\u00e1 ser criado por voc\u00ea dentro de cada m\u00f3dulo e n\u00f3s sugerimos que isso seja feito para facilitar sua vida. O AbstractController deve existir para que voc\u00ea possa personalizar alguns m\u00e9todos que o SuitUp n\u00e3o implementou exatamente de acordo com o que voc\u00ea precisa para este projeto ou at\u00e9 mesmo para adicionar m\u00e9todos que poder\u00e3o ser compartilhados entre todos os controladores do m\u00f3dulo e assim melhorar a reusabilidade do seu c\u00f3digo. Por isso dizemos que para uma boa aplica\u00e7\u00e3o o AbstractController \u00e9 obrigat\u00f3rio! Mesmo que n\u00e3o seja de fato obrigat\u00f3rio que este arquivo exista. N\u00f3s j\u00e1 mencionamos isso acima, mas talvez durante a leitura este bloco lhe tenha passado sem muita import\u00e2ncia, por isso vamos frisar novamente: Deve existir um AbstractController para cada m\u00f3dulo do seu aplicativo . Isso evita edi\u00e7\u00e3o de m\u00e9todos que impactam em v\u00e1rios m\u00f3dulos ao mesmo tempo. A ideia \u00e9 criar neste arquivo m\u00e9todos que s\u00e3o \u00fateis para serem usados em diversos locais (do mesmo m\u00f3dulo) de seu sistema para al\u00e9m de aumentar a produtividade tamb\u00e9m n\u00e3o ter que reescrever o mesmo bloco de c\u00f3digo v\u00e1rias vezes. A estrutura m\u00ednima de um AbstractController deve ser: 1 2 3 4 5 6 7 8 9 <?php // Arquivo: ModuleDefault/Controllers/AbstractController.php namespace ModuleDefault\\Controllers ; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { // Adicione aqui os m\u00e9todos que ser\u00e3o \u00fateis a voc\u00ea em diversos controladores. } Voc\u00ea pode abrir o arquivo MvcAbstractController.php ou usar a fun\u00e7\u00e3o get_class_methods($this) para ver quais m\u00e9todos j\u00e1 est\u00e3o inclusos na inst\u00e2ncia. Antes de sobrescrever algum m\u00e9todo leia [[este link|2.1 MvcAbstractController]] para entender o workflow do SuitUp e evitar algumas dores de cabe\u00e7a.","title":"AbstractController"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/","text":"MvcAbstractController \u00b6 Durante a programa\u00e7\u00e3o de um sistema \u00e9 muito comum que voc\u00ea precise realizar uma mesma tarefa em diversos locais diferentes, por exemplo, verificar se houve POST . Este \u00e9 um dos motivos para este arquivo existir, assim n\u00f3s podemos prover a voc\u00ea uma s\u00e9rie de m\u00e9todos que servem de atalho para tarefas repetitivas em seus sistemas. Neste mesmo modelo, voc\u00ea pode implementar seus pr\u00f3prios m\u00e9todos aqui apenas extendendo esta classe e apontando o controlador para esta sua nova que recomendamos chamar de AbstractController . [[Voc\u00ea pode encontrar mais detalhes aqui.|2. Controllers e Views#abstractcontroller]] Mas a menos que sejam est\u00e1ticos, estes m\u00e9todos n\u00e3o podem ser acessados da view ou de model , na verdade n\u00e3o podem ser acessados em nenhum lugar fora do escopo do controlador, ent\u00e3o para isso voc\u00ea pode criar um arquivo functions.php na raiz de seu projeto e implementar suas pr\u00f3prias fun\u00e7\u00f5es que ser\u00e3o acess\u00edveis de qualquer lugar. Neste caso basta fazer um include deste seu novo arquivo no index.php ([[aqui neste link|1. Instala\u00e7\u00e3o#indexphp]]). Workflow do SuitUp \u00b6 N\u00e3o h\u00e1 segredos, o SuitUp sabe que seu controlador extende a esta classe MvcAbstractController , isso \u00e9 obrigat\u00f3rio. Alguns m\u00e9todos desta classe s\u00e3o necess\u00e1rios para o funcionamento do framework e ainda em uma determinada ordem correta. Deste modo \u00e9 poss\u00edvel criar algumas rotinas em seu sistema para situa\u00e7\u00f5es espec\u00edficas. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Com a instancia do seu controlador o SuitUp // ir\u00e1 chamar os m\u00e9todos a seguir nesta mesma ordem // 1. Lan\u00e7ado antes do init e da a\u00e7\u00e3o atual $this->mvc->controller->preDispatch(); // 2. M\u00e9todo init $this->mvc->controller->init(); // 3. A\u00e7\u00e3o atual (depende da URL) $this->mvc->controller->{$this->mvc->actionName}(); // 4. Lan\u00e7ado depois da a\u00e7\u00e3o atual, antes de mostrar o conte\u00fado na tela. $this->mvc->controller->posDispatch(); Voc\u00ea pode sobrescrever estes m\u00e9todos a vontade, mas no caso do preDispatch e posDispatch n\u00e3o se esque\u00e7a de chamar o m\u00e9todo original tamb\u00e9m, caso contr\u00e1rio o SuitUp n\u00e3o funcionar\u00e1 corretamente. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 namespace ModuleDefault\\Controllers; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { public function preDispatch() { // Aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o // Mas n\u00e3o esque\u00e7a de chamar o m\u00e9todo original // para o bom funcionamento do SuitUp parent::preDispatch(); // OU aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o } public function posDispatch() { // Aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o // Mas n\u00e3o esque\u00e7a de chamar o m\u00e9todo original // para o bom funcionamento do SuitUp parent::posDispatch(); // OU aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o } } O que j\u00e1 vem por padr\u00e3o no SuitUp \u00b6 A lista abaixo descreve todos os m\u00e9todos que s\u00e3o padr\u00e3o do MvcAbstractController e podem ser utilizados dentro de qualquer controlador do seu sistema. preDispatch init indexAction errorAction notFoundAction posDispatch getMsgNsp getModuleName getControllerName getActionName getLayoutName setLayout renderView addViewVar isViewVar getViewVar getParams getParam isPost getPost setLogin isLogged getLogin updateLoginKey addMsg uploadFile uploadFileImageBase64 getReferer redirect ajax addSessionFilter getSessionFilter removeSessionFilter clearSessionFilter $this->preDispatch(); \u00b6 Lan\u00e7ado antes de qualquer outra coisa no controlador, executa internamente algumas a\u00e7\u00f5es para o bom funcionamento do SuitUp . N\u00e3o deve ser sobrescrito sem ser chamado internamente com parent::preDispatch(); . $this->init(); \u00b6 Lan\u00e7ado ap\u00f3s o preDispatch() , mas antes da a\u00e7\u00e3o atual. At\u00e9 o momento este m\u00e9todo n\u00e3o executa nenhuma a\u00e7\u00e3o interna do SuitUp , portanto n\u00e3o precisa ser chamado com parent::init(); ao ser sobrescrito, embora isso seja uma boa pr\u00e1tica para prevenir conflitos com vers\u00f5es futuras . :eyes: $this->indexAction(); \u00b6 A a\u00e7\u00e3o index \u00e9 chamada quando o nome da a\u00e7\u00e3o n\u00e3o \u00e9 apontada na url ex.: http://seusite.dev/ que chamar\u00e1 o m\u00f3dulo default , o controlador index e a a\u00e7\u00e3o index . Este m\u00e9todo ser inclu\u00eddo no MvcAbstractController apenas previne o caso de um novo controlador n\u00e3o implementar esta a\u00e7\u00e3o. Caso seja sobrescrito n\u00e3o necessita ser invocado com parent::indexAction(); . $this->errorAction(); \u00b6 Sempre que o SuitUp encontra pelo caminho uma Exception n\u00e3o tratada, ele dispara para a tela de erros do [[ErrorController|2.2 ErrorController]]. Dentro desse controlador ErrorController ele ir\u00e1 executar esta a\u00e7\u00e3o se n\u00e3o for o tipo de erro 404 (P\u00e1gina N\u00e3o Encontrada). Leia mais em: [[ErrorController|2.2 ErrorController]] $this->notFoundAction(); \u00b6 Sempre que o SuitUp encontra pelo caminho uma Exception n\u00e3o tratada, ele dispara para a tela de erros do [[ErrorController|2.2 ErrorController]]. Esta Exception pode ter sido lan\u00e7ada por causa de um m\u00f3dulo , controlador ou a\u00e7\u00e3o que n\u00e3o foi encontrada, para estes casos \u00e9 que esta a\u00e7\u00e3o \u00e9 lan\u00e7ada no ErrorController . Leia mais em: [[ErrorController|2.2 ErrorController]] $this->posDispatch(); \u00b6 Lan\u00e7ado depois de qualquer a\u00e7\u00e3o no controlador, executa internamente algumas a\u00e7\u00f5es para o bom funcionamento do SuitUp . N\u00e3o deve ser sobrescrito sem ser chamado internamente com parent::posDispatch(); . $this->getMsgNsp(); \u00b6 N\u00f3s n\u00e3o queremos misturar as mensagens disparadas em m\u00f3dulos diferentes do seu sistema, por isso, este m\u00e9todo retorna o namespace do m\u00f3dulo atual. Mas o que s\u00e3o estas mensagens? Mais adiante voc\u00ea notar\u00e1 que existe o m\u00e9todo $this->addMsg($msg, $type = MsgType::INFO, $withRedirect = false); , com o par\u00e2metro $withRedirect = true o SuitUp ir\u00e1 guardar sua mensagem na $_SESSION para apresent\u00e1-la somente na pr\u00f3xima p\u00e1gina, normalmente usado antes a um $this->redirect($to); $this->getModuleName(); \u00b6 Retorna o nome do m\u00f3dulo atual. Exemplo: M\u00f3dulo padr\u00e3o ( http://seusite.dev/ ), retorna: default M\u00f3dulo Admin ( http://seusite.dev/admin ), retorna: admin $this->getControllerName(); \u00b6 Retorna o nome do controlador atual. Exemplo: http://seusite.dev/ : Retorna index http://seusite.dev/admin/usuario : Retorna usuario $this->getActionName(); \u00b6 Retorna o nome da a\u00e7\u00e3o atual. Exemplo: http://seusite.dev/ : Retorna index http://seusite.dev/admin/usuario/editar : Retorna editar $this->getLayoutName(); \u00b6 Retorna o nome do layout que est\u00e1 sendo utilizado no momento. [[Clique aqui|3. Layouts]] para entender melhor sobre o que se trata layout . $this->setLayout($name, $path = null); \u00b6 1 2 ( string ) $ name ; // Nome do novo layout, este \u00e9 o nome do arquivo sem o `.phtml`, por isso n\u00e3o use espa\u00e7os ou caract\u00e9res especiais ( string ) $ path ; // Caminho at\u00e9 o novo arquivo de layout \u00c9 poss\u00edvel mudar o layout em tempo de execu\u00e7\u00e3o, segue o exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 // Execute este c\u00f3digo no seu controlador para ver o que acontece public function indexAction() { // Imprime o nome do layout atual echo dump($this->getLayoutName()); // troca o layout $this->setLayout('error'); // Imprime o novo nome do layout dump(\"\\n<br/>\"$this->getLayoutName()); } $this->renderView($renderViewName, $vars = array(), $renderViewPath = null); \u00b6 1 2 3 ( string ) $ renderViewName ; // Nome do arquivo que ser\u00e1 renderizado ( array ) $ vars ; // Vari\u00e1veis que estar\u00e3o dispon\u00edveis neste arquivo ( string ) $ renderViewPath ; // Caminho at\u00e9 este arquivo. Renderizar uma view \u00e9 um termo que significa que voc\u00ea quer capturar um arquivo html e seu conte\u00fado, podendo inclusive passar a ela vari\u00e1veis. Isso \u00e9 muito comum ao por exemplo, enviar um e-mail HTML ao seu cliente com dados de um pedido. $this->addViewVar($name, $value = null); \u00b6 1 2 ( string ) | ( array ) $ name ; // Nome da vari\u00e1vel que ser\u00e1 acess\u00edvel no controlador ou um array associativo com nome => valor ( mixed ) $ value ; // No caso do par\u00e2metro anterior n\u00e3o ser um array este ser\u00e1 o valor desta vari\u00e1vel Ap\u00f3s realizar as a\u00e7\u00f5es que voc\u00ea precisa que seu controlador realize voc\u00ea possivelmente vai precisar passar para a view alguma informa\u00e7\u00e3o, este m\u00e9todo existe para isso. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // File: Qualquer arquivo Controller public function indexAction() { $something = [\"a\", 156, 0.5, 'c']; $other = \"A value from your mind\"; // Pode transferir esta variavel para a view assim $this->addViewVar('thing', $something); // Ou pode passar todas as vari\u00e1veis de uma s\u00f3 vez no final da acao (metodo) $this->addViewVar(array( 'thing' => $something, 'otherStuff' => $other, )); } Automaticamente estes valores estar\u00e3o dispon\u00edveis na respectiva view . Neste caso ficar\u00e3o acess\u00edveis por $thing e $otherStuff ; $this->isViewVar($name); \u00b6 1 ( string ) $ name ; // Nome da vari\u00e1vel que est\u00e1 procurando Voc\u00ea pode verificar se uma vari\u00e1vel j\u00e1 foi passada para a view utilizando este m\u00e9todo. $this->getViewVar($name); \u00b6 1 ( string ) $ name ; // Nome da vari\u00e1vel que est\u00e1 procurando Mesmo antes da view voc\u00ea pode recuperar o valor de uma vari\u00e1vel utilizando este m\u00e9todo. $this->getParams(); \u00b6 Este m\u00e9todo retorna todos os par\u00e2metros passados pela URL ( query string GET) juntamente com os par\u00e2metros definidos nas [[rotas|6. Rotas]]. Para mais informa\u00e7\u00f5es sobre rotas [[clique aqui|6. Rotas]]. $this->getParam($name, $default = null); \u00b6 1 2 ( string ) $ name ; // Nome do par\u00e2metro que voc\u00ea est\u00e1 tentando capturar ( mixed ) $defa ult ; // Valor que ser\u00e1 retornado caso o par\u00e2metro n\u00e3o exista A exemplo do m\u00e9todo $this->getParams(); este m\u00e9todo ir\u00e1 retornar apenas o pr\u00f3prio par\u00e2metro apontado por $name e o valor apontado em $default caso este n\u00e3o exista. $this->isPost(); \u00b6 Este m\u00e9todo \u00e9 extremamente simples, mas igualmente importante. Com ele \u00e9 poss\u00edvel se houve um POST de formul\u00e1rio ou de WebService . Retorna somente true ou false . $this->getPost($name = null, $default = null); \u00b6 1 2 ( string ) $ name ; // Nome do item de post que deseja capturar ( mixed ) $defa ult ; // Valor que ser\u00e1 retornado caso este item n\u00e3o exista Voc\u00ea pode utilizar este m\u00e9todo para capturar todo o POST ou apenas um \u00edndice espec\u00edfico apenas utilizando ou n\u00e3o os par\u00e2metros que ele leva. $this->setLogin(array $data = array()); \u00b6 O MvcAbstractController cont\u00e9m o atributo $authNsp que funciona como namespace e te permite sobrescreve-lo para que voc\u00ea possa criar uma sess\u00e3o diferente para cada m\u00f3dulo do seu sistema. Isso significa que mesmo sendo um \u00fanico sistema voc\u00ea pode fazer login com usu\u00e1rios diferentes em v\u00e1rios m\u00f3dulos ao mesmo tempo. Login simples \u00b6 1 2 3 4 5 6 // File: Qualquer controlador // Vamos l\u00e1, isso \u00e9 s\u00f3 um exemplo... $loginData = $this->getPost(); $this->setLogin($loginData); Note que neste caso simplesmente gravamos os dados do usu\u00e1rio diretamente na sess\u00e3o. Login com namespace por m\u00f3dulo \u00b6 1 2 3 4 5 6 // File: AbstractController do seu m\u00f3dulo diferent\u00e3o public function __construct() { // Apenas seja criativo para criar um namespace legal parent::$authNsp = \"umNamespaceQualquer\"; } Note que modificamos o namespace e assim os dados de login ficar\u00e3o independentes. Depois disso basta seguir o passo anterior para gravar o login em $this->setLogin($loginData) . $this->isLogged(); \u00b6 Retorna true caso exista alguma coisa no namespace atual de login e false do contr\u00e1rio. static $this->getLogin($key = null, $default = null)(); \u00b6 1 2 ( string ) $ key ; // Um \u00ed ndice para ser buscado ( mixed ) $ default ; // Um valor padr\u00e3o caso o \u00ed ndice n\u00e3o seja encontrado . Se o par\u00e2metro $key n\u00e3o for passado ent\u00e3o este m\u00e9todo retornar\u00e1 tudo que est\u00e1 na sess\u00e3o de login deste namespace . Quando existe o par\u00e2metro $key o m\u00e9todo tenta retorna-lo e caso n\u00e3o encontre este \u00edndice ir\u00e1 retornar o valor de $default . Algo interessante de se notar neste m\u00e9todo \u00e9 que ele pode ser acessado estaticamente, ou seja, at\u00e9 mesmo nas views voc\u00ea pode acessa-lo. Exemplo: 1 <h2>Nome: <?php echo \\SuitUp\\Mvc\\MvcAbstractController :: getLogin ( 'name' ); ?> </h2> Mas n\u00e3o \u00e9 necess\u00e1rio . Dentro das views \u00e9 poss\u00edvel usar a vari\u00e1vel $login em vez disso. static $this->updateLoginKey($key, $value); \u00b6 1 2 ( string ) $ key ; // Um indice j\u00e1 existente para alterar ( mixed ) $ value ; // Valor Atualiza um \u00edndice da sess\u00e3o de login para o m\u00f3dulo. Se o \u00edndice n\u00e3o for encontrado o m\u00e9todo n\u00e3o faz nada. A exemplo do getLogin este m\u00e9todo tamb\u00e9m \u00e9 est\u00e1tico e pode ser acessado de qualquer lugar. $this->addMsg($msg, $type = MsgType::INFO, $withRedirect = false); \u00b6 1 2 3 ( string ) $ msg ; // Mensagem que voc\u00ea quer disparar ( string ) $ type // Tipo de mensagem ( bool ) $ withRedirect // Com ou sem redirecionamento Este m\u00e9todo adiciona uma mensagem separando por tipo para o sistema disparar. Para capturar esta mensagem somente ap\u00f3s um redirecionamento basta passar o terceiro par\u00e2metro $withRedirect como true . Desculpa, temos que falar sobre o Bootstrap . Atualmente a maioria dos sites s\u00e3o constru\u00eddos com a ajuda do Bootstrap e consigo ele traz os alerts que s\u00e3o boxes coloridos feitos com intuito de exibir mensagens aos usu\u00e1rios. Por padr\u00e3o o Bootstrap utiliza 4 tipos de boxes (alert-success, alert-warning, alert-info e alert-danger). Por isso se voc\u00ea abrir [[este arquivo do SuitUp|https://github.com/braghimsistemas/suitup-php/blob/master/src/Enum/MsgType.php]] voc\u00ea ver\u00e1 exatamente estes quatro tipos de mensagens. Voc\u00ea pode criar seus pr\u00f3prios tipos de mensagens sem problemas, mas se for fazer isso n\u00f3s recomendamos que seja feito em forma de constantes para assim evitar erros de digita\u00e7\u00e3o e consequentes bugs desnecess\u00e1rios. Para recuperar nas views e layout as mensagens disparadas [[clique aqui|3. Layouts#mensagens-de-layout]]. $this->uploadFile($file, $where, $exitFilename = null, array $allowedExt = array('jpeg', 'jpg', 'pdf', 'png', 'gif')); \u00b6 1 2 3 4 ( array ) $f ile ; // \u00cdndice do arquivo em $_FILES ( string ) $ where ; // Caminho para onde voc\u00ea quer mover o arquivo depois do upload ( string ) $e xitFilename ; // Nome do arquivo depois do upload ( array ) $a llowedExt ; // Lista de ext's aceitas pelo upload Este m\u00e9todo efetua o upload de arquivos via formul\u00e1rio HTML. Se voc\u00ea abrir o arquivo composer.json do SuitUp ver\u00e1 que h\u00e1 um require verot/class.upload.php . N\u00f3s n\u00e3o estamos tentando fazer com que o SuitUp seja seu \u00fanico caminho para fazer tudo que voc\u00ea precisa em seu aplicativo. Na verdade apoiamos a utiliza\u00e7\u00e3o de bibliotecas que s\u00e3o de f\u00e1cil manuseio e fazem todo o trabalho duro por isso em vez de fazermos nosso pr\u00f3prio m\u00f3dulo para upload de arquivos recomendamos [[verot/class.upload.php|https://github.com/verot/class.upload.php]] que j\u00e1 est\u00e1 h\u00e1 anos no mercado e sempre cumpriu at\u00e9 mais do que o necess\u00e1rio para uploads de arquivos. Se sentir que este m\u00e9todo n\u00e3o supre suas necessidades, fique a vontade para sobrescreve-lo em seu AbstractController . Aten\u00e7\u00e3o. \u00b6 Este m\u00e9todo joga uma Exception em caso de erros, portanto n\u00e3o esque\u00e7a de \"cobrir\" seu c\u00f3digo com um try, catch $this->uploadFileImageBase64($file, $maxFilesize = 524288); \u00b6 1 2 ( array ) $ file ; // Arquivo feito upload ( $ _FILES ) ( int ) maxFilesize ; // Tamanho m\u00e1ximo para o arquivo \u00c9 poss\u00edvel salvar uma imagem n\u00e3o como arquivo, mas como string utilizando para isso o base64 , para isso basta utilizar este m\u00e9todo. Aten\u00e7\u00e3o. \u00b6 Este m\u00e9todo joga uma Exception em caso de erros, portanto n\u00e3o esque\u00e7a de \"cobrir\" seu c\u00f3digo com um try, catch $this->getReferer(); \u00b6 Este m\u00e9todo retorna a URL em que o usu\u00e1rio esteve antes de chegar \u00e0 p\u00e1gina atual. Faz isso atrav\u00e9s de $_SERVER['HTTP_REFERER'] . $this->redirect($to); \u00b6 1 ( string ) $ to ; // Local para onde quer redirecionar Este m\u00e9todo \u00e9 simplesmente um atalho para header('Location: $to'); . Procure utilizar este m\u00e9todo sempre precedido pelo return dentro da a\u00e7\u00e3o 1 2 3 4 public function indexAction() { return $this->redirect('/'); } $this->ajax(array $data); \u00b6 1 ( array ) $ data // Array que ser\u00e1 transformado em JSON e retornado \u00c9 muito comum que em vez de html haja a necessidade de alguma a\u00e7\u00e3o retornar um JSON, seja para um AJAX ou at\u00e9 mesmo para construir um m\u00f3dulo de WebService. Para isso basta que no final do sua a\u00e7\u00e3o voc\u00ea passe a este m\u00e9todo um array modelado com a forma que voc\u00ea deseja para seu JSON. Este pr\u00f3prio m\u00e9todo evita que seja renderizado qualquer HTML e dispara tamb\u00e9m o header(\"Content-Type: application/json; Charset=UTF-8\") . Aten\u00e7\u00e3o! \u00b6 Qualquer altera\u00e7\u00e3o ap\u00f3s a chamada a este m\u00e9todo n\u00e3o tem nenhum efeito, pois ele pr\u00f3prio faz um exit o que faz com que a aplica\u00e7\u00e3o pare totalmente. SessionFilter (Sess\u00e3o de Filtros) \u00b6 Voc\u00ea provavelmente j\u00e1 precisou utilizar dados de um formul\u00e1rio para filtrar uma lista de resultados. Para fazer isso voc\u00ea pode utilizar GET que recupera os par\u00e2metros de filtro pela URL ou POST que os esconde e torna o formul\u00e1rio mais seguro. Em primeiro lugar gostamos de frisar que na maioria dos casos utilizar GET \u00e9 sim uma boa op\u00e7\u00e3o pelo fato de que assim os filtros podem ser compartilhados, mas existem casos em que isso pode ser perigoso ou que voc\u00ea n\u00e3o queira deixar a URL feia . Seja como for ao efetuar esses filtros por POST e utilizar pagina\u00e7\u00e3o ao mesmo tempo os dados do filtro ser\u00e3o perdidos ap\u00f3s a primeira p\u00e1gina, para isso temos aqui estes m\u00e9todos abaixo que te ajudam de modo simples a manter os filtros mesmo utilizando pagina\u00e7\u00e3o. Como funciona isso? Atrav\u00e9s de um namespace espec\u00edfico para cada a\u00e7\u00e3o do seu sistema o SuitUp separa os dados deste filtro e os guarda na sess\u00e3o ( $_SESSION ). Exemplo de workflow funcional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Verifica se houve post if ( $this -> isPost ()) { // Verifica se foi clicado no bot\u00e3o para limpar o formul\u00e1rio // Isso \u00e9 feito com <button type=\"submit\" name=\"clear\">Limpar</button> if ( $this -> getPost ( 'clear' , false )) { $this -> clearSessionFilter (); } else { // Adiciona ou substitui os filtros na sessao // unica para esta acao $this -> addSessionFilter ( $this -> getPost ()); // Redireciona para a mesma tela apenas para evitar // a confirma\u00e7\u00e3o de reenvio de formul\u00e1rio do navegador return $this -> redirect ( '/' ); } } $userBo = new ModuleDefault / Model / UserBusiness (); // Efetua a consulta da lista normalmente // ESTA LISTA NORMALMENTE SERA PAGINADA $list = $userBo -> getList ( $this -> getSessionFilter ()); // Na view esta lista ser\u00e1 acess\u00edvel por $usersList $this -> addViewVar ( array ( 'usersList' => $list , )); } } $this->addSessionFilter($name, $value = null); \u00b6 1 2 ( string | array ) $ name ; // Adiciona uma lista ou um \u00ed ndice a sess\u00e3o ( mixed ) $ value ; // No caso de adicionar um \u00ed ndice este ser\u00e1 seu valor Adiciona ou atualiza um ou v\u00e1rios itens a um espa\u00e7o \u00fanico por a\u00e7\u00e3o na sess\u00e3o de filtros. $this->getSessionFilter(); \u00b6 Retorna todos os itens de sess\u00e3o para o controlador e a\u00e7\u00e3o atuais. $this->removeSessionFilter($key = null); \u00b6 1 ( string ) $ key ; // \u00cd ndice que quer remover Remove um item da sess\u00e3o de filtros \u00fanico por a\u00e7\u00e3o. $this->clearSessionFilter(); \u00b6 Remove todos os filtros na sess\u00e3o de filtros \u00fanicos para a a\u00e7\u00e3o atual.","title":"2.1 MvcAbstractController"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#mvcabstractcontroller","text":"Durante a programa\u00e7\u00e3o de um sistema \u00e9 muito comum que voc\u00ea precise realizar uma mesma tarefa em diversos locais diferentes, por exemplo, verificar se houve POST . Este \u00e9 um dos motivos para este arquivo existir, assim n\u00f3s podemos prover a voc\u00ea uma s\u00e9rie de m\u00e9todos que servem de atalho para tarefas repetitivas em seus sistemas. Neste mesmo modelo, voc\u00ea pode implementar seus pr\u00f3prios m\u00e9todos aqui apenas extendendo esta classe e apontando o controlador para esta sua nova que recomendamos chamar de AbstractController . [[Voc\u00ea pode encontrar mais detalhes aqui.|2. Controllers e Views#abstractcontroller]] Mas a menos que sejam est\u00e1ticos, estes m\u00e9todos n\u00e3o podem ser acessados da view ou de model , na verdade n\u00e3o podem ser acessados em nenhum lugar fora do escopo do controlador, ent\u00e3o para isso voc\u00ea pode criar um arquivo functions.php na raiz de seu projeto e implementar suas pr\u00f3prias fun\u00e7\u00f5es que ser\u00e3o acess\u00edveis de qualquer lugar. Neste caso basta fazer um include deste seu novo arquivo no index.php ([[aqui neste link|1. Instala\u00e7\u00e3o#indexphp]]).","title":"MvcAbstractController"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#workflow-do-suitup","text":"N\u00e3o h\u00e1 segredos, o SuitUp sabe que seu controlador extende a esta classe MvcAbstractController , isso \u00e9 obrigat\u00f3rio. Alguns m\u00e9todos desta classe s\u00e3o necess\u00e1rios para o funcionamento do framework e ainda em uma determinada ordem correta. Deste modo \u00e9 poss\u00edvel criar algumas rotinas em seu sistema para situa\u00e7\u00f5es espec\u00edficas. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Com a instancia do seu controlador o SuitUp // ir\u00e1 chamar os m\u00e9todos a seguir nesta mesma ordem // 1. Lan\u00e7ado antes do init e da a\u00e7\u00e3o atual $this->mvc->controller->preDispatch(); // 2. M\u00e9todo init $this->mvc->controller->init(); // 3. A\u00e7\u00e3o atual (depende da URL) $this->mvc->controller->{$this->mvc->actionName}(); // 4. Lan\u00e7ado depois da a\u00e7\u00e3o atual, antes de mostrar o conte\u00fado na tela. $this->mvc->controller->posDispatch(); Voc\u00ea pode sobrescrever estes m\u00e9todos a vontade, mas no caso do preDispatch e posDispatch n\u00e3o se esque\u00e7a de chamar o m\u00e9todo original tamb\u00e9m, caso contr\u00e1rio o SuitUp n\u00e3o funcionar\u00e1 corretamente. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 namespace ModuleDefault\\Controllers; abstract class AbstractController extends \\SuitUp\\Mvc\\MvcAbstractController { public function preDispatch() { // Aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o // Mas n\u00e3o esque\u00e7a de chamar o m\u00e9todo original // para o bom funcionamento do SuitUp parent::preDispatch(); // OU aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o } public function posDispatch() { // Aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o // Mas n\u00e3o esque\u00e7a de chamar o m\u00e9todo original // para o bom funcionamento do SuitUp parent::posDispatch(); // OU aqui voc\u00ea pode implementar o que Deus tocar no seu cora\u00e7\u00e3o } }","title":"Workflow do SuitUp"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#o-que-ja-vem-por-padrao-no-suitup","text":"A lista abaixo descreve todos os m\u00e9todos que s\u00e3o padr\u00e3o do MvcAbstractController e podem ser utilizados dentro de qualquer controlador do seu sistema. preDispatch init indexAction errorAction notFoundAction posDispatch getMsgNsp getModuleName getControllerName getActionName getLayoutName setLayout renderView addViewVar isViewVar getViewVar getParams getParam isPost getPost setLogin isLogged getLogin updateLoginKey addMsg uploadFile uploadFileImageBase64 getReferer redirect ajax addSessionFilter getSessionFilter removeSessionFilter clearSessionFilter","title":"O que j\u00e1 vem por padr\u00e3o no SuitUp"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#login-simples","text":"1 2 3 4 5 6 // File: Qualquer controlador // Vamos l\u00e1, isso \u00e9 s\u00f3 um exemplo... $loginData = $this->getPost(); $this->setLogin($loginData); Note que neste caso simplesmente gravamos os dados do usu\u00e1rio diretamente na sess\u00e3o.","title":"Login simples"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#login-com-namespace-por-modulo","text":"1 2 3 4 5 6 // File: AbstractController do seu m\u00f3dulo diferent\u00e3o public function __construct() { // Apenas seja criativo para criar um namespace legal parent::$authNsp = \"umNamespaceQualquer\"; } Note que modificamos o namespace e assim os dados de login ficar\u00e3o independentes. Depois disso basta seguir o passo anterior para gravar o login em $this->setLogin($loginData) .","title":"Login com namespace por m\u00f3dulo"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#atencao","text":"Este m\u00e9todo joga uma Exception em caso de erros, portanto n\u00e3o esque\u00e7a de \"cobrir\" seu c\u00f3digo com um try, catch","title":"Aten\u00e7\u00e3o."},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#atencao_1","text":"Este m\u00e9todo joga uma Exception em caso de erros, portanto n\u00e3o esque\u00e7a de \"cobrir\" seu c\u00f3digo com um try, catch","title":"Aten\u00e7\u00e3o."},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#atencao_2","text":"Qualquer altera\u00e7\u00e3o ap\u00f3s a chamada a este m\u00e9todo n\u00e3o tem nenhum efeito, pois ele pr\u00f3prio faz um exit o que faz com que a aplica\u00e7\u00e3o pare totalmente.","title":"Aten\u00e7\u00e3o!"},{"location":"user-guide/old-version/ptbr/2.1-MvcAbstractController/#sessionfilter-sessao-de-filtros","text":"Voc\u00ea provavelmente j\u00e1 precisou utilizar dados de um formul\u00e1rio para filtrar uma lista de resultados. Para fazer isso voc\u00ea pode utilizar GET que recupera os par\u00e2metros de filtro pela URL ou POST que os esconde e torna o formul\u00e1rio mais seguro. Em primeiro lugar gostamos de frisar que na maioria dos casos utilizar GET \u00e9 sim uma boa op\u00e7\u00e3o pelo fato de que assim os filtros podem ser compartilhados, mas existem casos em que isso pode ser perigoso ou que voc\u00ea n\u00e3o queira deixar a URL feia . Seja como for ao efetuar esses filtros por POST e utilizar pagina\u00e7\u00e3o ao mesmo tempo os dados do filtro ser\u00e3o perdidos ap\u00f3s a primeira p\u00e1gina, para isso temos aqui estes m\u00e9todos abaixo que te ajudam de modo simples a manter os filtros mesmo utilizando pagina\u00e7\u00e3o. Como funciona isso? Atrav\u00e9s de um namespace espec\u00edfico para cada a\u00e7\u00e3o do seu sistema o SuitUp separa os dados deste filtro e os guarda na sess\u00e3o ( $_SESSION ). Exemplo de workflow funcional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 <?php // File: ModuleDefault/Controllers/IndexController.php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Verifica se houve post if ( $this -> isPost ()) { // Verifica se foi clicado no bot\u00e3o para limpar o formul\u00e1rio // Isso \u00e9 feito com <button type=\"submit\" name=\"clear\">Limpar</button> if ( $this -> getPost ( 'clear' , false )) { $this -> clearSessionFilter (); } else { // Adiciona ou substitui os filtros na sessao // unica para esta acao $this -> addSessionFilter ( $this -> getPost ()); // Redireciona para a mesma tela apenas para evitar // a confirma\u00e7\u00e3o de reenvio de formul\u00e1rio do navegador return $this -> redirect ( '/' ); } } $userBo = new ModuleDefault / Model / UserBusiness (); // Efetua a consulta da lista normalmente // ESTA LISTA NORMALMENTE SERA PAGINADA $list = $userBo -> getList ( $this -> getSessionFilter ()); // Na view esta lista ser\u00e1 acess\u00edvel por $usersList $this -> addViewVar ( array ( 'usersList' => $list , )); } }","title":"SessionFilter (Sess\u00e3o de Filtros)"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/","text":"Controlador de Erros \u00b6 Sempre que o sistema encontra um erro pelo caminho ( Exception ) \u00e9 lan\u00e7ada em primeiro lugar o ErrorController dentro do m\u00f3dulo onde o usu\u00e1rio est\u00e1, se n\u00e3o existir ele lan\u00e7a o ErrorController padr\u00e3o do SuitUp em src/ModuleError/Controllers/ErrorController.php . Implementar um ErrorController dentro de seu m\u00f3dulo lhe permite personalizar as p\u00e1ginas de erros do sistema. Como fazer? \u00b6 Criar a classe de controlador com o nome reservado ErrorController dentro do m\u00f3dulo; Criar a view ModuleDefault/views/error/error.phtml para erros em geral; Criar o view ModuleDefault/views/error/not-found.phtml para erros de p\u00e1gina n\u00e3o encontrada; Este erro \u00e9 lan\u00e7ado caso o m\u00f3dulo , o controlador , a a\u00e7\u00e3o ou a view n\u00e3o seja encontrado. Controlador \u00b6 Basta criar um controlador com o nome reservado ErrorController que extende ao AbstractController ou MvcAbstractController , neste arquivo n\u00e3o precisa criar nenhum m\u00e9todo, mas voc\u00ea pode sobrescrever o m\u00e9todo init para definir um layout espec\u00edfico para erros. Voc\u00ea tamb\u00e9m pode sobrescrever os m\u00e9todos errorAction e notFoundAction caso queira por exemplo criar um log antes de disparar a view . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php // File: ModuleDefault/Controllers/ErrorController.php namespace ModuleDefault\\Controllers ; class ErrorController extends AbstractController { public function init () { // Com esta linha o sistema utilizar\u00e1 este arquivo como layout em vez do padr\u00e3o do m\u00f3dulo. // claro que para isto o arquivo `ModuleDefault/views/error/layout.phtml` deve existir. $this -> setLayout ( \"error/layout.phtml\" ); } } Para entender melhor o que n\u00f3s chamamos de layout [[clique aqui|3. Layouts]] Views \u00b6 Obviamente que os erros s\u00e3o muito importantes dentro de um sistema para gerenciar o que est\u00e1 e o que n\u00e3o est\u00e1 dando certo, por isso deixamos assim t\u00e3o f\u00e1cil acompanhar os erros dentro do SuitUp . Mas por outro lado n\u00e3o faz nenhum sentido mostrar as exceptions para o usu\u00e1rio, al\u00e9m de ser tamb\u00e9m uma falha de seguran\u00e7a, por isso usamos o if DEVELOPMENT dentro da view . Isso faz com que a descri\u00e7\u00e3o da Exception seja mostrada somente em ambiente de desenvolvimento. Automaticamente a vari\u00e1vel $exception estar\u00e1 dispon\u00edvel na view com todas as informa\u00e7\u00f5es sobre o erro ocorrido. Segue uma dica de montagem do html desses arquivos. \u00b6 ModuleDefault/views/error/error.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 < div class = \"page-header\" > < h1 > Ops, houve um erro inesperado. </ h1 > </ div > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > Erro do Sistema </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Mensagem: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > Arquivo: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach ($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> Arquivo: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Voltar ao in\u00edcio ;) </ a > </ p > ModuleDefault/views/error/not-found.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < h1 > P\u00e1gina N\u00e3o Encontrada </ h1 > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > Erro do Sistema </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Mensagem: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > Arquivo: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> Arquivo: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Voltar ao in\u00edcio ;) </ a > </ p >","title":"2.2 ErrorController"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/#controlador-de-erros","text":"Sempre que o sistema encontra um erro pelo caminho ( Exception ) \u00e9 lan\u00e7ada em primeiro lugar o ErrorController dentro do m\u00f3dulo onde o usu\u00e1rio est\u00e1, se n\u00e3o existir ele lan\u00e7a o ErrorController padr\u00e3o do SuitUp em src/ModuleError/Controllers/ErrorController.php . Implementar um ErrorController dentro de seu m\u00f3dulo lhe permite personalizar as p\u00e1ginas de erros do sistema.","title":"Controlador de Erros"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/#como-fazer","text":"Criar a classe de controlador com o nome reservado ErrorController dentro do m\u00f3dulo; Criar a view ModuleDefault/views/error/error.phtml para erros em geral; Criar o view ModuleDefault/views/error/not-found.phtml para erros de p\u00e1gina n\u00e3o encontrada; Este erro \u00e9 lan\u00e7ado caso o m\u00f3dulo , o controlador , a a\u00e7\u00e3o ou a view n\u00e3o seja encontrado.","title":"Como fazer?"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/#controlador","text":"Basta criar um controlador com o nome reservado ErrorController que extende ao AbstractController ou MvcAbstractController , neste arquivo n\u00e3o precisa criar nenhum m\u00e9todo, mas voc\u00ea pode sobrescrever o m\u00e9todo init para definir um layout espec\u00edfico para erros. Voc\u00ea tamb\u00e9m pode sobrescrever os m\u00e9todos errorAction e notFoundAction caso queira por exemplo criar um log antes de disparar a view . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php // File: ModuleDefault/Controllers/ErrorController.php namespace ModuleDefault\\Controllers ; class ErrorController extends AbstractController { public function init () { // Com esta linha o sistema utilizar\u00e1 este arquivo como layout em vez do padr\u00e3o do m\u00f3dulo. // claro que para isto o arquivo `ModuleDefault/views/error/layout.phtml` deve existir. $this -> setLayout ( \"error/layout.phtml\" ); } } Para entender melhor o que n\u00f3s chamamos de layout [[clique aqui|3. Layouts]]","title":"Controlador"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/#views","text":"Obviamente que os erros s\u00e3o muito importantes dentro de um sistema para gerenciar o que est\u00e1 e o que n\u00e3o est\u00e1 dando certo, por isso deixamos assim t\u00e3o f\u00e1cil acompanhar os erros dentro do SuitUp . Mas por outro lado n\u00e3o faz nenhum sentido mostrar as exceptions para o usu\u00e1rio, al\u00e9m de ser tamb\u00e9m uma falha de seguran\u00e7a, por isso usamos o if DEVELOPMENT dentro da view . Isso faz com que a descri\u00e7\u00e3o da Exception seja mostrada somente em ambiente de desenvolvimento. Automaticamente a vari\u00e1vel $exception estar\u00e1 dispon\u00edvel na view com todas as informa\u00e7\u00f5es sobre o erro ocorrido.","title":"Views"},{"location":"user-guide/old-version/ptbr/2.2-ErrorController/#segue-uma-dica-de-montagem-do-html-desses-arquivos","text":"ModuleDefault/views/error/error.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 < div class = \"page-header\" > < h1 > Ops, houve um erro inesperado. </ h1 > </ div > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > Erro do Sistema </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Mensagem: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > Arquivo: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach ($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> Arquivo: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Voltar ao in\u00edcio ;) </ a > </ p > ModuleDefault/views/error/not-found.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 < h1 > P\u00e1gina N\u00e3o Encontrada </ h1 > <?php if (DEVELOPMENT && isset($exception)): ?> < div class = \"panel panel-primary\" > < div class = \"panel-heading\" > Erro do Sistema </ div > < table class = \"table table-striped\" > < thead > < tr > < td > Mensagem: </ td > < td > <?php echo $exception->getMessage(); ?> </ td > </ tr > </ thead > < tbody > < tr > < td > Arquivo: </ td > < td > <?php echo $exception->getFile(); ?> :: (( < b > <?php echo $exception->getLine(); ?> </ b > )) </ td > </ tr > <?php if ($exception->getTrace()): ?> < tr > < td > Stack Trace: </ td > < td > < div class = \"row\" > <?php foreach($exception->getTrace() as $key => $trace): ?> < div class = \"col-sm-4\" > < div class = \"panel panel-default\" > < div class = \"panel-heading\" > # <?php echo $key; ?> </ div > < div class = \"panel-body\" > <?php if ($trace['args']): ?> <?php echo $trace['function']; ?> (' <?php echo implode(\"','\", $trace['args']); ?> '); <?php else: ?> <?php echo $trace['function']; ?> (); <?php endif; ?> < br /> < br /> Arquivo: <?php echo $trace['file']; ?> ::( <?php echo $trace['line']; ?> ) </ div > </ div > </ div > <?php endforeach; ?> </ div > </ td > </ tr > <?php endif; ?> </ tbody > < tfoot > < tr > < td > String: </ td > < td >< div class = \"well well-sm\" > <?php echo nl2br($exception->__toString()); ?> </ div ></ td > </ tr > </ tfoot > </ table > </ div > <?php endif; ?> < p > < a href = \"/\" > Voltar ao in\u00edcio ;) </ a > </ p >","title":"Segue uma dica de montagem do html desses arquivos."},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/","text":"O que \u00e9 pagina\u00e7\u00e3o? \u00b6 Uma das situa\u00e7\u00f5es mais comuns em um sistema \u00e9 a necessidade de listar dados, como uma lista de usu\u00e1rios por exemplo. Mas as vezes esta lista \u00e9 muito grande para ser exibida em apenas uma p\u00e1gina, por isso separamos os resultados em diversas p\u00e1ginas diferentes. Isso \u00e9 o que chamamos de pagina\u00e7\u00e3o. Para fazer a pagina\u00e7\u00e3o de uma lista precisamos pensar em alguns detalhes: \u00b6 Temos que montar a query (consulta) no banco de dados; Temos de definir os par\u00e2metros de pagina\u00e7\u00e3o; N\u00famero de itens por p\u00e1gina Quantidade de links de p\u00e1ginas N\u00famero da p\u00e1gina atual Montar o HTML para mostrar os resultados; Query no Banco de Dados (SQL) \u00b6 Para criar pagina\u00e7\u00e3o a montagem da consulta SQL n\u00e3o deve sofrer nenhuma altera\u00e7\u00e3o, a \u00fanica mudan\u00e7a \u00e9 que no retorno do m\u00e9todo do Gateway vamos retornar o objeto de pagina\u00e7\u00e3o do SuitUp que \u00e9 o m\u00e9todo paginate da classe db , ou seja, return $this->db->paginate($query) . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <?php namespace ModuleDefault\\Model\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class User extends AbstractGateway { protected $name = 'user' ; protected $primary = array ( 'pk_user' ); /** * Gera lista paginada de usuarios * * @param array $filters Lista de filtros para a listagem * @return SuitUp\\Paginate\\Paginate */ public function listaUsuarios ( array $filters = array ()) { $query = $this -> select ( \"SELECT u.* FROM { $this -> name } u\" ) -> columns ( array ( 'id_user' => 'id' , 'name' , 'age' , 'document' , 'email' , )) -> innerJoin ( \"profile p\" , \"p.id_profile = u.id_profile\" ) -> innerJoin ( \"sector r\" , \"r.id_sector = p.id_sector\" ) -> where ( \"u.status = 1\" ); if ( isset ( $filters [ 'sector' ]) && $filters [ 'sector' ]) { $query -> where ( \"r.id_sector = ?\" , $filters [ 'sector' ]); } // Esta linha \u00e9 que realmente faz com que os resultados // da consulta sejam paginados. return $this -> db -> paginate ( $query ); } } Par\u00e2metros de pagina\u00e7\u00e3o \u00b6 Dentro do controlador \u00e9 poss\u00edvel modificar algumas diretrizes da pagina\u00e7\u00e3o como quantidade de itens por p\u00e1gina, quantidade de links de outras p\u00e1ginas e n\u00famero da p\u00e1gina atual. N\u00e3o \u00e9 necess\u00e1rio mudar essas configura\u00e7\u00f5es, mas voc\u00ea pode faze-lo caso n\u00e3o se aplique \u00e0s suas necessidades. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 namespace ModuleDefault\\Controllers; use ModuleDefault\\Model\\UserBusiness; class UserController extends AbstractController { public function indexAction() { $filters = $this->getPost(); // Note que este n\u00e3o \u00e9 o GATEWAY, // Veja o porque disso em // https://github.com/braghimsistemas/suitup-php/wiki/5.-Banco-de-dados#business-regras-de-neg%C3%B3cio $userBo = new UserBusiness(); $list = $userBo->listaUsuarios($filters); /** Aqui voc\u00ea pode mudar as configuracoes da pagina\u00e7\u00e3o se quiser. N\u00e3o \u00e9 obrigat\u00f3rio**/ // N\u00famero de links para outras paginas $list->setPageRange(7); // Padrao \u00e9 5 // N\u00famero da p\u00e1gina atual $list->setCurrentPage($this->getParam('page', 1)); // padr\u00e3o = $_GET['pagina'] // N\u00famero de itens por pagina $list->setNumberPerPage(100); // Padr\u00e3o = 50 $this->addViewVar(array( 'list' => $list )); } } Note que acima existe a solu\u00e7\u00e3o para um problema que pode tirar o seu sono, \u00e9 o nome do par\u00e2metro pagina que voc\u00ea pode querer alter\u00e1-lo. Lembre-se que para alter\u00e1-lo tamb\u00e9m \u00e9 necess\u00e1rio modificar o HTML do arquivo aqui Par\u00e2metros padr\u00e3o \u00b6 O sistema pega o $this->getParam('pagina', 1); como par\u00e2metro de pagina atual. O range de p\u00e1ginas \u00e9 5. Este \u00e9 o n\u00famero de links para outras p\u00e1ginas que vai aparecer para o usu\u00e1rio. Quantidade de resultados por p\u00e1gina \u00e9 50. M\u00e9todos do objeto de pagina\u00e7\u00e3o \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Muda o numero total de itens que v\u00e3o aparecer na lista de p\u00e1ginas para selecionar public function setPageRange($pageRange); // Pega o numero total de itens que aparecem na lista para selecionar a p\u00e1gina public function getPageRange(); // Indica o numero da p\u00e1gina atual ** Por padr\u00e3o pega o parametro 'pagina' da URL ** public function setCurrentPage($currentPage); // P\u00e1gina atual. Pega o parametro 'pagina' da URL public function getCurrentPage(); // Numero de resultados da query que v\u00e3o aparecer em cada p\u00e1gina. public function setNumberPerPage($numberPerPage); public function getNumberPerPage(); // Numero total de paginas que esta query ir\u00e1 retornar. public function getTotalPages(); HTML \u00b6 Mostrando o resultado \u00b6 Uma vez no HTML o objeto de pagina\u00e7\u00e3o pode ser utilizado junto a um foreach sem problemas. P\u00e1ginas \u00b6 Para mostrar as p\u00e1ginas basta adicionar o seguinte c\u00f3digo no seu html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- HTML da sua listagem --> < table class = \"table table-striped\" > < tr > < td > ID </ td > < td > Nome </ td > </ tr > <?php foreach($list as $key => $item): ?> < tr > < td > <?php echo $item['id']; ?> </ td > < td > <?php echo $item['nome']; ?> </ td > </ tr > <?php endforeach; ?> </ table > <!-- /Fim da tabela --> <!-- Paginacao da tela --> <?php echo paginateControl($list); ?> <!-- /Paginacao da tela --> HTML para paginacao \u00b6 Adicione o seguinte arquivo em ModuleDefault/views/paginacao.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <?php if(count($items)): ?> < nav > < ul class = \"pagination\" > <?php if($previousPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>pagina=<?php echo $previousPage; ?>\" aria-label = \"Anterior\" >< span aria-hidden = \"true\" > &laquo; </ span ></ a ></ li > <?php else:?> < li class = \"disabled\" >< a href = \"javascript:void(0);\" aria-label = \"Previous\" >< span aria-hidden = \"true\" > &laquo; </ span ></ a ></ li > <?php endif; ?> <?php foreach($items as $key => $page): ?> <?php if($page != $currentPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>pagina=<?php echo $page; ?>\" > <?php echo $page; ?> </ a ></ li > <?php else: ?> < li class = \"active\" >< a href = \"javascript:void(0);\" > <?php echo $page; ?> < span class = \"sr-only\" > (current) </ span ></ a ></ li > <?php endif; ?> <?php endforeach; ?> <?php if($nextPage): ?> < li >< a href = \"<?php echo $baseUrl; ?>pagina=<?php echo $nextPage; ?>\" aria-label = \"Pr\u00f3xima\" >< span aria-hidden = \"true\" > &raquo; </ span ></ a ></ li > <?php else:?> < li class = \"disabled\" >< a href = \"javascript:void(0);\" aria-label = \"Previous\" >< span aria-hidden = \"true\" > &raquo; </ span ></ a ></ li > <?php endif; ?> </ ul > </ nav > <?php endif; ?> Lembre-se que para mudar o par\u00e2metro pagina \u00e9 necess\u00e1rio tamb\u00e9m capturar este par\u00e2metro no controlador com $this->getParam('page', 1); . Veja aqui o exemplo.","title":"2.3 Pagina\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#o-que-e-paginacao","text":"Uma das situa\u00e7\u00f5es mais comuns em um sistema \u00e9 a necessidade de listar dados, como uma lista de usu\u00e1rios por exemplo. Mas as vezes esta lista \u00e9 muito grande para ser exibida em apenas uma p\u00e1gina, por isso separamos os resultados em diversas p\u00e1ginas diferentes. Isso \u00e9 o que chamamos de pagina\u00e7\u00e3o.","title":"O que \u00e9 pagina\u00e7\u00e3o?"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#para-fazer-a-paginacao-de-uma-lista-precisamos-pensar-em-alguns-detalhes","text":"Temos que montar a query (consulta) no banco de dados; Temos de definir os par\u00e2metros de pagina\u00e7\u00e3o; N\u00famero de itens por p\u00e1gina Quantidade de links de p\u00e1ginas N\u00famero da p\u00e1gina atual Montar o HTML para mostrar os resultados;","title":"Para fazer a pagina\u00e7\u00e3o de uma lista precisamos pensar em alguns detalhes:"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#query-no-banco-de-dados-sql","text":"Para criar pagina\u00e7\u00e3o a montagem da consulta SQL n\u00e3o deve sofrer nenhuma altera\u00e7\u00e3o, a \u00fanica mudan\u00e7a \u00e9 que no retorno do m\u00e9todo do Gateway vamos retornar o objeto de pagina\u00e7\u00e3o do SuitUp que \u00e9 o m\u00e9todo paginate da classe db , ou seja, return $this->db->paginate($query) . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <?php namespace ModuleDefault\\Model\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class User extends AbstractGateway { protected $name = 'user' ; protected $primary = array ( 'pk_user' ); /** * Gera lista paginada de usuarios * * @param array $filters Lista de filtros para a listagem * @return SuitUp\\Paginate\\Paginate */ public function listaUsuarios ( array $filters = array ()) { $query = $this -> select ( \"SELECT u.* FROM { $this -> name } u\" ) -> columns ( array ( 'id_user' => 'id' , 'name' , 'age' , 'document' , 'email' , )) -> innerJoin ( \"profile p\" , \"p.id_profile = u.id_profile\" ) -> innerJoin ( \"sector r\" , \"r.id_sector = p.id_sector\" ) -> where ( \"u.status = 1\" ); if ( isset ( $filters [ 'sector' ]) && $filters [ 'sector' ]) { $query -> where ( \"r.id_sector = ?\" , $filters [ 'sector' ]); } // Esta linha \u00e9 que realmente faz com que os resultados // da consulta sejam paginados. return $this -> db -> paginate ( $query ); } }","title":"Query no Banco de Dados (SQL)"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#parametros-de-paginacao","text":"Dentro do controlador \u00e9 poss\u00edvel modificar algumas diretrizes da pagina\u00e7\u00e3o como quantidade de itens por p\u00e1gina, quantidade de links de outras p\u00e1ginas e n\u00famero da p\u00e1gina atual. N\u00e3o \u00e9 necess\u00e1rio mudar essas configura\u00e7\u00f5es, mas voc\u00ea pode faze-lo caso n\u00e3o se aplique \u00e0s suas necessidades. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 namespace ModuleDefault\\Controllers; use ModuleDefault\\Model\\UserBusiness; class UserController extends AbstractController { public function indexAction() { $filters = $this->getPost(); // Note que este n\u00e3o \u00e9 o GATEWAY, // Veja o porque disso em // https://github.com/braghimsistemas/suitup-php/wiki/5.-Banco-de-dados#business-regras-de-neg%C3%B3cio $userBo = new UserBusiness(); $list = $userBo->listaUsuarios($filters); /** Aqui voc\u00ea pode mudar as configuracoes da pagina\u00e7\u00e3o se quiser. N\u00e3o \u00e9 obrigat\u00f3rio**/ // N\u00famero de links para outras paginas $list->setPageRange(7); // Padrao \u00e9 5 // N\u00famero da p\u00e1gina atual $list->setCurrentPage($this->getParam('page', 1)); // padr\u00e3o = $_GET['pagina'] // N\u00famero de itens por pagina $list->setNumberPerPage(100); // Padr\u00e3o = 50 $this->addViewVar(array( 'list' => $list )); } } Note que acima existe a solu\u00e7\u00e3o para um problema que pode tirar o seu sono, \u00e9 o nome do par\u00e2metro pagina que voc\u00ea pode querer alter\u00e1-lo. Lembre-se que para alter\u00e1-lo tamb\u00e9m \u00e9 necess\u00e1rio modificar o HTML do arquivo aqui","title":"Par\u00e2metros de pagina\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#parametros-padrao","text":"O sistema pega o $this->getParam('pagina', 1); como par\u00e2metro de pagina atual. O range de p\u00e1ginas \u00e9 5. Este \u00e9 o n\u00famero de links para outras p\u00e1ginas que vai aparecer para o usu\u00e1rio. Quantidade de resultados por p\u00e1gina \u00e9 50.","title":"Par\u00e2metros padr\u00e3o"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#metodos-do-objeto-de-paginacao","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Muda o numero total de itens que v\u00e3o aparecer na lista de p\u00e1ginas para selecionar public function setPageRange($pageRange); // Pega o numero total de itens que aparecem na lista para selecionar a p\u00e1gina public function getPageRange(); // Indica o numero da p\u00e1gina atual ** Por padr\u00e3o pega o parametro 'pagina' da URL ** public function setCurrentPage($currentPage); // P\u00e1gina atual. Pega o parametro 'pagina' da URL public function getCurrentPage(); // Numero de resultados da query que v\u00e3o aparecer em cada p\u00e1gina. public function setNumberPerPage($numberPerPage); public function getNumberPerPage(); // Numero total de paginas que esta query ir\u00e1 retornar. public function getTotalPages();","title":"M\u00e9todos do objeto de pagina\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#html","text":"","title":"HTML"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#mostrando-o-resultado","text":"Uma vez no HTML o objeto de pagina\u00e7\u00e3o pode ser utilizado junto a um foreach sem problemas.","title":"Mostrando o resultado"},{"location":"user-guide/old-version/ptbr/2.3-Pagina\u00e7\u00e3o/#paginas","text":"Para mostrar as p\u00e1ginas basta adicionar o seguinte c\u00f3digo no seu html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- HTML da sua listagem --> < table class = \"table table-striped\" > < tr > < td > ID </ td > < td > Nome </ td > </ tr > <?php foreach($list as $key => $item): ?> < tr > < td > <?php echo $item['id']; ?> </ td > < td > <?php echo $item['nome']; ?> </ td > </ tr > <?php endforeach; ?> </ table > <!-- /Fim da tabela --> <!-- Paginacao da tela --> <?php echo paginateControl($list); ?> <!-- /Paginacao da tela -->","title":"P\u00e1ginas"},{"location":"user-guide/old-version/ptbr/2.4-Debug/","text":"Verificando o funcionamento do sistema \u00b6 \u00c9 realmente muito \u00fatil poder ver o que uma vari\u00e1vel est\u00e1 retornando enquanto vamos desenvolvendo o sistema, para isso n\u00f3s disponibilizamos uma fun\u00e7\u00e3o simples (\u00e9 uma fun\u00e7\u00e3o mesmo, n\u00e3o \u00e9 um m\u00e9todo) para mostrar o conte\u00fado de qualquer tipo de vari\u00e1vel. dump($var); Isso ir\u00e1 imprimir de modo bem otimizado visualmente qualquer tipo de vari\u00e1vel que for passada como par\u00e2metro. Esta fun\u00e7\u00e3o trava o sistema ap\u00f3s o print \u00b6 De fato, ao final da fun\u00e7\u00e3o \u00e9 dado um exit para o sistema parar, isso faz com que o resultado da vari\u00e1vel seja mostrado integralmente na tela sem nenhuma distra\u00e7\u00e3o visual. Mas voc\u00ea pode desabilitar isso passando o segundo par\u00e2metro como false ; 1 echo dump($var, false);","title":"2.4 Debug"},{"location":"user-guide/old-version/ptbr/2.4-Debug/#verificando-o-funcionamento-do-sistema","text":"\u00c9 realmente muito \u00fatil poder ver o que uma vari\u00e1vel est\u00e1 retornando enquanto vamos desenvolvendo o sistema, para isso n\u00f3s disponibilizamos uma fun\u00e7\u00e3o simples (\u00e9 uma fun\u00e7\u00e3o mesmo, n\u00e3o \u00e9 um m\u00e9todo) para mostrar o conte\u00fado de qualquer tipo de vari\u00e1vel. dump($var); Isso ir\u00e1 imprimir de modo bem otimizado visualmente qualquer tipo de vari\u00e1vel que for passada como par\u00e2metro.","title":"Verificando o funcionamento do sistema"},{"location":"user-guide/old-version/ptbr/2.4-Debug/#esta-funcao-trava-o-sistema-apos-o-print","text":"De fato, ao final da fun\u00e7\u00e3o \u00e9 dado um exit para o sistema parar, isso faz com que o resultado da vari\u00e1vel seja mostrado integralmente na tela sem nenhuma distra\u00e7\u00e3o visual. Mas voc\u00ea pode desabilitar isso passando o segundo par\u00e2metro como false ; 1 echo dump($var, false);","title":"Esta fun\u00e7\u00e3o trava o sistema ap\u00f3s o print"},{"location":"user-guide/old-version/ptbr/3.-Layouts/","text":"N\u00e3o repita voc\u00ea mesmo \u00b6 Cada m\u00f3dulo necessita de um arquivo dentro de views para ser o HTML padr\u00e3o para todas as a\u00e7\u00f5es, ou seja, todos os scripts .phtml ser\u00e3o renderizados dentro deste arquivo. Ele \u00e9 chamado layout porqu\u00ea ele cont\u00e9m a parte do HTML que se repete em todas as p\u00e1ginas do sistema. N\u00e3o \u00e9 necess\u00e1rio fazer nenhum include ou require para incluir este arquivo, o SuitUp faz isso para voc\u00ea automaticamente. Onde voc\u00ea incluir no seu HTML a vari\u00e1vel <?php echo $content; ?> \u00e9 onde ser\u00e1 renderizado (impresso) o conte\u00fado da view . O layout \u00b6 Arquivo: ModuleDefault/views/layout.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- ... --> </ head > < body > < nav ></ nav > < div class = \"sidebar\" ></ div > < div class = \"content\" > <!-- Eh aqui que o conteudo sera impresso --> <?php echo $content; ?> </ div > <!-- Monitoramento de consultas SQL --> <?php echo $queryLog; ?> </ body > </ html > Se voce habilitou o [[monitoramento de SQL|5.2 Monitoramento de SQL]] indique no layout onde quer que esse HTML de monitoramento seja injetado, geralmente no final da p\u00e1gina antes da tag de fechamento </body> . Mensagens de layout \u00b6 Dentro de qualquer a\u00e7\u00e3o de qualquer controlador voc\u00ea pode chamar o m\u00e9todo $this->addMsg(\"mensagem\", MsgType::SUCCESS, true); para mensagens que v\u00e3o para o layout depois de um redirecionamento ou $this->addMsg(\"mensagem\", MsgType::SUCCESS); para mensagens que v\u00e3o para o layout diretamente. Para isso funcionar adicione estas linhas em qualquer lugar de seu layout.phtml 1 2 3 4 5 6 7 8 9 10 <!-- Mensagens do sistema --> <?php foreach ($layoutMessages as $type => $msgs): ?> < div class = \"alert alert-<?php echo $type; ?>\" > < a href = \"#\" class = \"close\" > &times; </ a > <?php foreach ($msgs as $msg): ?> < p >< i class = \"fa fa-check\" ></ i > <?php echo $msg; ?> </ p > <?php endforeach; ?> </ div > <?php endforeach; ?> <!-- /Mensagens do sistema --> Veja mais sobre este assunto aqui .","title":"3. Layouts"},{"location":"user-guide/old-version/ptbr/3.-Layouts/#nao-repita-voce-mesmo","text":"Cada m\u00f3dulo necessita de um arquivo dentro de views para ser o HTML padr\u00e3o para todas as a\u00e7\u00f5es, ou seja, todos os scripts .phtml ser\u00e3o renderizados dentro deste arquivo. Ele \u00e9 chamado layout porqu\u00ea ele cont\u00e9m a parte do HTML que se repete em todas as p\u00e1ginas do sistema. N\u00e3o \u00e9 necess\u00e1rio fazer nenhum include ou require para incluir este arquivo, o SuitUp faz isso para voc\u00ea automaticamente. Onde voc\u00ea incluir no seu HTML a vari\u00e1vel <?php echo $content; ?> \u00e9 onde ser\u00e1 renderizado (impresso) o conte\u00fado da view .","title":"N\u00e3o repita voc\u00ea mesmo"},{"location":"user-guide/old-version/ptbr/3.-Layouts/#o-layout","text":"Arquivo: ModuleDefault/views/layout.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- ... --> </ head > < body > < nav ></ nav > < div class = \"sidebar\" ></ div > < div class = \"content\" > <!-- Eh aqui que o conteudo sera impresso --> <?php echo $content; ?> </ div > <!-- Monitoramento de consultas SQL --> <?php echo $queryLog; ?> </ body > </ html > Se voce habilitou o [[monitoramento de SQL|5.2 Monitoramento de SQL]] indique no layout onde quer que esse HTML de monitoramento seja injetado, geralmente no final da p\u00e1gina antes da tag de fechamento </body> .","title":"O layout"},{"location":"user-guide/old-version/ptbr/3.-Layouts/#mensagens-de-layout","text":"Dentro de qualquer a\u00e7\u00e3o de qualquer controlador voc\u00ea pode chamar o m\u00e9todo $this->addMsg(\"mensagem\", MsgType::SUCCESS, true); para mensagens que v\u00e3o para o layout depois de um redirecionamento ou $this->addMsg(\"mensagem\", MsgType::SUCCESS); para mensagens que v\u00e3o para o layout diretamente. Para isso funcionar adicione estas linhas em qualquer lugar de seu layout.phtml 1 2 3 4 5 6 7 8 9 10 <!-- Mensagens do sistema --> <?php foreach ($layoutMessages as $type => $msgs): ?> < div class = \"alert alert-<?php echo $type; ?>\" > < a href = \"#\" class = \"close\" > &times; </ a > <?php foreach ($msgs as $msg): ?> < p >< i class = \"fa fa-check\" ></ i > <?php echo $msg; ?> </ p > <?php endforeach; ?> </ div > <?php endforeach; ?> <!-- /Mensagens do sistema --> Veja mais sobre este assunto aqui .","title":"Mensagens de layout"},{"location":"user-guide/old-version/ptbr/4.-Formul\u00e1rios/","text":"Criar, validar e filtrar formul\u00e1rios \u00b6 N\u00f3s implementamos uma forma bem simples e produtiva de criar formul\u00e1rios, uma vez que um projeto normalmente disp\u00f5e de muitos formul\u00e1rios e isto acaba nos fazendo perder bastante tempo programando cada um deles. A proposta do SuitUp n\u00e3o \u00e9 monopolizar seu formul\u00e1rio e tomar conta dele, isso faz com que voc\u00ea perca o controle sobre alguns pontos e acaba gerando muitas dificuldades de altera\u00e7\u00f5es e personaliza\u00e7\u00f5es. N\u00f3s queremos facilitar sua vida por isso automatizamos a parte chata e deixamos para voc\u00ea o HTML totalmente livre para ser alterado. Criar \u00b6 Vamos come\u00e7ar montando o HTML do formul\u00e1rio. Arquivo: ModuleDefault/views/index/index.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 < form action = \"\" method = \"post\" > < div class = \"input-group\" > < span class = \"input-group-addon\" > Nome *: </ span > < input type = \"text\" name = \"name\" class = \"form-control\" value = \"<?php echo isset($data['name']) ? $data['name'] : '' ;?>\" /> </ div > <?php if (isset($form->messages['name'])): ?> < span class = \"text-danger\" > <?php echo implode(\"<br/>\", $form->messages['name']); ?> </ span > <?php endif; ?> < br /> < div class = \"input-group\" > < span class = \"input-group-addon\" > E-mail: </ span > < input type = \"text\" name = \"email\" class = \"form-control\" value = \"<?php echo isset($data['email']) ? $data['email'] : '' ;?>\" /> </ div > <?php if (isset($form->messages['email'])): ?> < span class = \"text-danger\" > <?php echo implode(\"<br/>\", $form->messages['email']); ?> </ span > <?php endif; ?> < br /> < button type = \"submit\" class = \"btn btn-success pull-right\" > < i class = \"fa fa-save\" ></ i > Salvar </ button > </ form > Valida\u00e7\u00e3o \u00b6 Agora vamos a classe que ir\u00e1 fazer a valida\u00e7\u00e3o e filtros do formul\u00e1rio. Voc\u00ea se lembra que comentamos la na [[1. Instala\u00e7\u00e3o]] que a estrutura de Form era opcional? Pois \u00e9, voc\u00ea pode colocar as classes de formul\u00e1rios onde quiser, mas n\u00f3s recomendamos que sejam organizados os formul\u00e1rios segundo a estrutura de views No arquivo abaixo, por exemplo, este formul\u00e1rio aparecer\u00e1 na mesma view que segue sua estrutura, ou seja, ModuleDefault/views/index/index.phtml . Desse modo somente de olhar para uma view voc\u00ea sabe exatamente onde estar\u00e1 a classe do formul\u00e1rio. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { /** * Tudo que voc\u00ea tem que fazer \u00e9 indicar aqui como * quer que seu formul\u00e1rio seja validado e filtrado. * * Note que voc\u00ea pode criar m\u00e9todos para valida\u00e7\u00e3o * a sua maneira como o metodo randomTrueFalse() * * O indice 'name' e 'email' s\u00e3o os nomes do campos no HTML. * * @var array */ protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randomTrueFalse' ), 'filter' => array ( 'trim' )), // Exempo com valida\u00e7\u00e3o do Zend 'email' => array ( 'validation' => array ( '\\Zend\\Validator\\EmailAddress' => array ( 'messages' => array ( \\Zend\\Validator\\EmailAddress :: INVALID => \"Endere\u00e7o de e-mail inv\u00e1lido\" , \\Zend\\Validator\\EmailAddress :: INVALID_FORMAT => \"Endere\u00e7o de e-mail inv\u00e1lido\" , \\Zend\\Validator\\EmailAddress :: INVALID_HOSTNAME => \"Endere\u00e7o de e-mail inv\u00e1lido\" , ) ), ), 'filter' => array ( 'trim' ), ) ); /** * Exemplo de metodo para validacao, crie quantos quiser. * * @param type $value * @return \\stdClass */ public function randomTrueFalse ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if (( mctime () % 2 ) == 0 ) { $result -> error = true ; $result -> message = \"Randomicamente eu quero que d\u00ea erro\" ; } return $result ; } } Note que a valida\u00e7\u00e3o de e-mail foi feita utilizando as valida\u00e7\u00f5es do Zend Framework. Se voc\u00ea abrir o arquivo composer.json do SuitUp vai notar que os projetos do Zend para valida\u00e7\u00f5es j\u00e1 est\u00e3o inclusas. O Zend \u00e9 um framework grande, muito bem testado com uma garantia de funcionalidade incr\u00edvel, por isso n\u00f3s aproveitamos para inclu\u00ed-lo. N\u00f3s temos tamb\u00e9m diversos m\u00e9todos que n\u00f3s mesmos desenvolvemos para valida\u00e7\u00f5es e filtros corriqueiros. Acompanhe a lista abaixo. No controlador \u00b6 Depois disso basta adequar o controlador para utilizar esta valida\u00e7\u00e3o. Voc\u00ea s\u00f3 precisa instanciar a classe do formul\u00e1rio, verificar se houve post e se o formul\u00e1rio \u00e9 v\u00e1lido. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 namespace ModuleDefault\\Controllers; use Braghim\\Enum\\MsgType; class IndexController extends AbstractController { public function indexAction() { // Note que nos preferimos colocar o formul\u00e1rio a exemplo do caminho na URL // Assim fica mais f\u00e1cil achar ele para dar manuten\u00e7\u00e3o. $form = new \\ModuleDefault\\Form\\Index\\Index(); $data = array(); // Houve post? if ($this->isPost()) { // Formul\u00e1rio \u00e9 v\u00e1lido? if ($form->isValid()) { // Sim, aqui voc\u00ea prossegue com sua logica... $data = $form->getData(); dump($data); } else { // Erro de formul\u00e1rio, adiciona mensagem geral e alimenta data para // preencher novamente os campos. $this->addMsg(\"Verifique os erros no formul\u00e1rio\", MsgType::DANGER); $data = $form->getData(); } } // Envia dados para view. return $this->addViewVar(array( 'form' => $form, 'data' => $data, )); } }","title":"4. Formul\u00e1rios"},{"location":"user-guide/old-version/ptbr/4.-Formul\u00e1rios/#criar-validar-e-filtrar-formularios","text":"N\u00f3s implementamos uma forma bem simples e produtiva de criar formul\u00e1rios, uma vez que um projeto normalmente disp\u00f5e de muitos formul\u00e1rios e isto acaba nos fazendo perder bastante tempo programando cada um deles. A proposta do SuitUp n\u00e3o \u00e9 monopolizar seu formul\u00e1rio e tomar conta dele, isso faz com que voc\u00ea perca o controle sobre alguns pontos e acaba gerando muitas dificuldades de altera\u00e7\u00f5es e personaliza\u00e7\u00f5es. N\u00f3s queremos facilitar sua vida por isso automatizamos a parte chata e deixamos para voc\u00ea o HTML totalmente livre para ser alterado.","title":"Criar, validar e filtrar formul\u00e1rios"},{"location":"user-guide/old-version/ptbr/4.-Formul\u00e1rios/#criar","text":"Vamos come\u00e7ar montando o HTML do formul\u00e1rio. Arquivo: ModuleDefault/views/index/index.phtml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 < form action = \"\" method = \"post\" > < div class = \"input-group\" > < span class = \"input-group-addon\" > Nome *: </ span > < input type = \"text\" name = \"name\" class = \"form-control\" value = \"<?php echo isset($data['name']) ? $data['name'] : '' ;?>\" /> </ div > <?php if (isset($form->messages['name'])): ?> < span class = \"text-danger\" > <?php echo implode(\"<br/>\", $form->messages['name']); ?> </ span > <?php endif; ?> < br /> < div class = \"input-group\" > < span class = \"input-group-addon\" > E-mail: </ span > < input type = \"text\" name = \"email\" class = \"form-control\" value = \"<?php echo isset($data['email']) ? $data['email'] : '' ;?>\" /> </ div > <?php if (isset($form->messages['email'])): ?> < span class = \"text-danger\" > <?php echo implode(\"<br/>\", $form->messages['email']); ?> </ span > <?php endif; ?> < br /> < button type = \"submit\" class = \"btn btn-success pull-right\" > < i class = \"fa fa-save\" ></ i > Salvar </ button > </ form >","title":"Criar"},{"location":"user-guide/old-version/ptbr/4.-Formul\u00e1rios/#validacao","text":"Agora vamos a classe que ir\u00e1 fazer a valida\u00e7\u00e3o e filtros do formul\u00e1rio. Voc\u00ea se lembra que comentamos la na [[1. Instala\u00e7\u00e3o]] que a estrutura de Form era opcional? Pois \u00e9, voc\u00ea pode colocar as classes de formul\u00e1rios onde quiser, mas n\u00f3s recomendamos que sejam organizados os formul\u00e1rios segundo a estrutura de views No arquivo abaixo, por exemplo, este formul\u00e1rio aparecer\u00e1 na mesma view que segue sua estrutura, ou seja, ModuleDefault/views/index/index.phtml . Desse modo somente de olhar para uma view voc\u00ea sabe exatamente onde estar\u00e1 a classe do formul\u00e1rio. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { /** * Tudo que voc\u00ea tem que fazer \u00e9 indicar aqui como * quer que seu formul\u00e1rio seja validado e filtrado. * * Note que voc\u00ea pode criar m\u00e9todos para valida\u00e7\u00e3o * a sua maneira como o metodo randomTrueFalse() * * O indice 'name' e 'email' s\u00e3o os nomes do campos no HTML. * * @var array */ protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randomTrueFalse' ), 'filter' => array ( 'trim' )), // Exempo com valida\u00e7\u00e3o do Zend 'email' => array ( 'validation' => array ( '\\Zend\\Validator\\EmailAddress' => array ( 'messages' => array ( \\Zend\\Validator\\EmailAddress :: INVALID => \"Endere\u00e7o de e-mail inv\u00e1lido\" , \\Zend\\Validator\\EmailAddress :: INVALID_FORMAT => \"Endere\u00e7o de e-mail inv\u00e1lido\" , \\Zend\\Validator\\EmailAddress :: INVALID_HOSTNAME => \"Endere\u00e7o de e-mail inv\u00e1lido\" , ) ), ), 'filter' => array ( 'trim' ), ) ); /** * Exemplo de metodo para validacao, crie quantos quiser. * * @param type $value * @return \\stdClass */ public function randomTrueFalse ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if (( mctime () % 2 ) == 0 ) { $result -> error = true ; $result -> message = \"Randomicamente eu quero que d\u00ea erro\" ; } return $result ; } } Note que a valida\u00e7\u00e3o de e-mail foi feita utilizando as valida\u00e7\u00f5es do Zend Framework. Se voc\u00ea abrir o arquivo composer.json do SuitUp vai notar que os projetos do Zend para valida\u00e7\u00f5es j\u00e1 est\u00e3o inclusas. O Zend \u00e9 um framework grande, muito bem testado com uma garantia de funcionalidade incr\u00edvel, por isso n\u00f3s aproveitamos para inclu\u00ed-lo. N\u00f3s temos tamb\u00e9m diversos m\u00e9todos que n\u00f3s mesmos desenvolvemos para valida\u00e7\u00f5es e filtros corriqueiros. Acompanhe a lista abaixo.","title":"Valida\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/4.-Formul\u00e1rios/#no-controlador","text":"Depois disso basta adequar o controlador para utilizar esta valida\u00e7\u00e3o. Voc\u00ea s\u00f3 precisa instanciar a classe do formul\u00e1rio, verificar se houve post e se o formul\u00e1rio \u00e9 v\u00e1lido. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 namespace ModuleDefault\\Controllers; use Braghim\\Enum\\MsgType; class IndexController extends AbstractController { public function indexAction() { // Note que nos preferimos colocar o formul\u00e1rio a exemplo do caminho na URL // Assim fica mais f\u00e1cil achar ele para dar manuten\u00e7\u00e3o. $form = new \\ModuleDefault\\Form\\Index\\Index(); $data = array(); // Houve post? if ($this->isPost()) { // Formul\u00e1rio \u00e9 v\u00e1lido? if ($form->isValid()) { // Sim, aqui voc\u00ea prossegue com sua logica... $data = $form->getData(); dump($data); } else { // Erro de formul\u00e1rio, adiciona mensagem geral e alimenta data para // preencher novamente os campos. $this->addMsg(\"Verifique os erros no formul\u00e1rio\", MsgType::DANGER); $data = $form->getData(); } } // Envia dados para view. return $this->addViewVar(array( 'form' => $form, 'data' => $data, )); } }","title":"No controlador"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/","text":"Valida\u00e7\u00f5es j\u00e1 inclusas no SuitUp \u00b6 O SuitUp j\u00e1 vem com diversos tipos de valida\u00e7\u00f5es de formul\u00e1rio prontos para serem utilizados, confira abaixo a lista desses m\u00e9todos. notEmpty isEmail isCep minLen maxLen maiorQue menorQue identico inArray notEmpty \u00b6 Ao utilizar este m\u00e9todo de valida\u00e7\u00e3o o valor do campo no formul\u00e1rio n\u00e3o pode estar vazio. Internamente o if para este m\u00e9todo avalia com !$value , ou seja, para o PHP vazio (false) \u00e9 o mesmo que: - String vazia - String com valor 0 num\u00e9rico - inteiro igual a zero - float ou double igual a zero - boolean igual a false - array sem elementos - tipo NULL Consulte a refer\u00eancia no manual PHP Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('notEmpty'), 'filter' => array()), ); \u00b6 isEmail \u00b6 Este m\u00e9todo avalia se o valor do campo \u00e9 correspondente a um endere\u00e7o de e-mail. Para isso utiliza a express\u00e3o regular: 1 \"/^[a-zA-Z0-9][a-zA-Z0-9\\._-]+@([a-zA-Z0-9\\._-]+\\.)[a-zA-Z-0-9]{2}/\" Este m\u00e9todo n\u00e3o avalia se o endere\u00e7o de e-mail realmente existe, apenas se ele tem o formato de um endere\u00e7o de e-mail Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isEmail'), 'filter' => array()), ); \u00b6 isCep \u00b6 Verifica se o n\u00famero de um CEP \u00e9 considerado v\u00e1lido no formato 99999-999 . Este m\u00e9todo n\u00e3o verifica se o campo est\u00e1 vazio , ou seja, ele n\u00e3o validar\u00e1 nem apresentar\u00e1 erro caso o campo chegue vazio, para isso utilize o m\u00e9todo notEmpty Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isCep', 'notEmpty'), 'filter' => array()), ); minLen \u00b6 Verifica se um campo do formul\u00e1rio \u00e9 menor que um dado valor. Este m\u00e9todo ir\u00e1 invalidar qualquer valor menor que o valor indicado como par\u00e2metro. Aceita par\u00e2metros size e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 6 caract\u00e9res 'name' => array('validation' => array('minLen' => 6), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 8 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('minLen' => array( 'size' => 8, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); maxLen \u00b6 Verifica se um campo do formul\u00e1rio \u00e9 maior que um dado valor. Este m\u00e9todo ir\u00e1 invalidar qualquer valor maior que o valor indicado como par\u00e2metro. Aceita par\u00e2metros size e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo no m\u00e1ximo 18 caract\u00e9res 'name' => array('validation' => array('minLen' => 18), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m no m\u00e1ximo 20 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('maxLen' => array( 'size' => 20, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); maiorQue \u00b6 O valor deste input deve ser maior que do target . Este m\u00e9todo compara o valor do input do formul\u00e1rio ao valor de outro input do mesmo formul\u00e1rio. A compara\u00e7\u00e3o que este m\u00e9todo realiza \u00e9 matem\u00e1tica , ou seja, o valor que deve ser inclu\u00eddo neste input bem como no target deve ser no seguinte formato 999.999,99 . Isto porque a ideia \u00e9 realizar compara\u00e7\u00e3o de valores monet\u00e1rios. Aceita par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name > name3 'name' => array('validation' => array('maiorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 > name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('maiorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), ); menorQue \u00b6 O valor deste input deve ser menor que do target . Este m\u00e9todo compara o valor do input do formul\u00e1rio ao valor de outro input do mesmo formul\u00e1rio. A compara\u00e7\u00e3o que este m\u00e9todo realiza \u00e9 matem\u00e1tica , ou seja, o valor que deve ser inclu\u00eddo neste input bem como no target deve ser no seguinte formato 999.999,99 . Isto porque a ideia \u00e9 realizar compara\u00e7\u00e3o de valores monet\u00e1rios. Aceita par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name < name3 'name' => array('validation' => array('menorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 < name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('menorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), ); identico \u00b6 Uma situa\u00e7\u00e3o muito comum \u00e9 comparar dois campos de um mesmo formul\u00e1rio que devem ser id\u00eanticos. Senha e confirma\u00e7\u00e3o de senha, por exemplo, para garantir assim que o usu\u00e1rio n\u00e3o vai cadastrar a senha errado. Este m\u00e9todo compara se dois campos do formul\u00e1rio s\u00e3o exatamente iguais. Aceita os par\u00e2metros target e message . Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara se o valor do input name == name2 'name' => array('validation' => array('identico' => 'name2'), 'filter' => array()), // Compara se o valor do input name3 == name4 'name3' => array('validation' => array('identico' => array( 'target' => 'name4', 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), ); inArray \u00b6 Qualquer usu\u00e1rio pode editar o HTML de uma p\u00e1gina em tempo real para injetar valores em um <select> o que pode significar uma falha de seguran\u00e7a, para isso este m\u00e9todo de valida\u00e7\u00e3o verifica se o valor que veio do post \u00e9 parte da lista de valores poss\u00edveis para este campo. Este m\u00e9todo necessita obrigatoriamente um array com a lista de valores poss\u00edveis para este campo. Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // File: ModuleDefault/Form/Index/Index.php protected $data = array( /** * Vamos assumir que o Select do formul\u00e1rio seria gerado a partir do seguinte array: * array( * '' => 'Selecione!', * 1 => 'Paran\u00e1', * 2 => 'S\u00e3o Paulo', * 3 => 'Minas Gerais', * 4 => 'Bahia', * ) */ 'name' => array('validation' => array('inArray' => array( '', 1, 2, 3, 4, )), 'filter' => array()), );","title":"4.1 Valida\u00e7\u00f5es"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#validacoes-ja-inclusas-no-suitup","text":"O SuitUp j\u00e1 vem com diversos tipos de valida\u00e7\u00f5es de formul\u00e1rio prontos para serem utilizados, confira abaixo a lista desses m\u00e9todos. notEmpty isEmail isCep minLen maxLen maiorQue menorQue identico inArray","title":"Valida\u00e7\u00f5es j\u00e1 inclusas no SuitUp"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-arraynotempty-filter-array","text":"","title":"1"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_1","text":"","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#1-2-3-4-5-file-moduledefaultformindexindexphp-protected-data-array-name-arrayvalidation-arrayisemail-filter-array","text":"","title":"1"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_2","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array('isCep', 'notEmpty'), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 6 caract\u00e9res 'name' => array('validation' => array('minLen' => 6), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo menos 8 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('minLen' => array( 'size' => 8, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Neste caso ir\u00e1 verificar se o campo cont\u00e9m pelo no m\u00e1ximo 18 caract\u00e9res 'name' => array('validation' => array('minLen' => 18), 'filter' => array()), // Neste caso ir\u00e1 verificar se o campo cont\u00e9m no m\u00e1ximo 20 caract\u00e9res // e com mensagem personalizada 'name2' => array( 'validation' => array('maxLen' => array( 'size' => 20, 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name > name3 'name' => array('validation' => array('maiorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 > name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('maiorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara diretamente se o campo name < name3 'name' => array('validation' => array('menorQue' => 'name3'), 'filter' => array()), // Compara se o campo name2 < name3 e ainda personaliza a mensagem de erro. 'name2' => array('validation' => array('menorQue' => array( 'target' => 'name4', 'message' => 'Esta \u00e9 uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: ModuleDefault/Form/Index/Index.php protected $data = array( // Compara se o valor do input name == name2 'name' => array('validation' => array('identico' => 'name2'), 'filter' => array()), // Compara se o valor do input name3 == name4 'name3' => array('validation' => array('identico' => array( 'target' => 'name4', 'message' => 'Uma mensagem personalizada', )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.1-Valida\u00e7\u00f5es/#exemplo_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // File: ModuleDefault/Form/Index/Index.php protected $data = array( /** * Vamos assumir que o Select do formul\u00e1rio seria gerado a partir do seguinte array: * array( * '' => 'Selecione!', * 1 => 'Paran\u00e1', * 2 => 'S\u00e3o Paulo', * 3 => 'Minas Gerais', * 4 => 'Bahia', * ) */ 'name' => array('validation' => array('inArray' => array( '', 1, 2, 3, 4, )), 'filter' => array()), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/","text":"Filtros j\u00e1 inclusos no SuitUp \u00b6 Ap\u00f3s validar um campo do formul\u00e1rio pode ser necess\u00e1rio fazer alguns filtros nele antes de utilizar estes dados, por quest\u00e3o de seguran\u00e7a e tamb\u00e9m de integridade das informa\u00e7\u00f5es que voc\u00ea vai salvar no banco de dados. Mas do que se tratam esses filtros? Remo\u00e7\u00e3o de espa\u00e7os desnecess\u00e1rios, de caract\u00e9res como pontos, v\u00edrgulas, etc.. Confira abaixo a lista de m\u00e9todos para filtros que j\u00e1 vem junto com o SuitUp string trim toDbDate digits toDouble string \u00b6 Este m\u00e9todo remove espa\u00e7os em branco no in\u00edcio e final do campo do formul\u00e1rio e tamb\u00e9m aplica a fun\u00e7\u00e3o strip_tags que protege contra inser\u00e7\u00e3o de tags HTML. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('string')), ); trim \u00b6 Este m\u00e9todo remove espa\u00e7os em branco no in\u00edcio e final do campo do formul\u00e1rio. O filtro string \u00e9 uma esp\u00e9cie de evolu\u00e7\u00e3o deste m\u00e9todo e oferece mais seguran\u00e7a. Isso n\u00e3o quer dizer que este m\u00e9todo esteja obsoleto, apenas depende de qual a sua necessidade. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('trim')), ); toDbDate \u00b6 Este m\u00e9todo foi feito pensando no formato de data utilizado no Brasil (dd/mm/yyyy), ele pega este formato e o reverte para caber no formato universal do banco de dados (yyyy-mm-dd). Aten\u00e7\u00e3o \u00b6 Este m\u00e9todo n\u00e3o valida se o formato de entrada est\u00e1 correto, ele apenas realiza a invers\u00e3o, por isso certifique-se de criar um m\u00e9todo de valida\u00e7\u00e3o neste mesmo campo para garantir que o formato est\u00e1 correto. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDbDate')), ); digits \u00b6 Este m\u00e9todo garante que o campo ir\u00e1 retornar somente n\u00fameros (d\u00edgitos, inteiros ), ele remove automaticamente todos os caract\u00e9res que s\u00e3o diferentes de 0 a 9. Funciona somente com INTEIROS, para float ou double utilize toDouble Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('digits')), ); toDouble \u00b6 Este m\u00e9todo foi criado pensando no formato de moeda brasileira atual (BRL - Real), ou seja, R$ 999.999,99. Este m\u00e9todo pega um n\u00famero que chegou neste formato ou parecido e o transforma para double . Este m\u00e9todo utiliza as seguintes express\u00f5es regulares array(\"/[^0-9,.]/\", \"/\\./\", \"/\\,/\") . Isso significa que s\u00e3o tr\u00eas passos de formata\u00e7\u00e3o do campo. 1\u00ba Remover os caract\u00e9res que n\u00e3o sao num\u00e9ricos, v\u00edrgula ou ponto. 2\u00ba Remover os pontos e 3\u00ba substituir a v\u00edrgula por ponto. Ap\u00f3s isso o PHP consegue fazer a convers\u00e3o para double facilmente. Se o formato do campo for o inverso (R$ 999,999.99) ent\u00e3o este m\u00e9todo n\u00e3o ser\u00e1 eficiente, para isso voc\u00ea deve implementar seu [[pr\u00f3prio filtro|4.4 Filtro Personalizado]]. Exemplo: \u00b6 1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDouble')), );","title":"4.2 Filtros"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#filtros-ja-inclusos-no-suitup","text":"Ap\u00f3s validar um campo do formul\u00e1rio pode ser necess\u00e1rio fazer alguns filtros nele antes de utilizar estes dados, por quest\u00e3o de seguran\u00e7a e tamb\u00e9m de integridade das informa\u00e7\u00f5es que voc\u00ea vai salvar no banco de dados. Mas do que se tratam esses filtros? Remo\u00e7\u00e3o de espa\u00e7os desnecess\u00e1rios, de caract\u00e9res como pontos, v\u00edrgulas, etc.. Confira abaixo a lista de m\u00e9todos para filtros que j\u00e1 vem junto com o SuitUp string trim toDbDate digits toDouble","title":"Filtros j\u00e1 inclusos no SuitUp"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#exemplo","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('string')), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#exemplo_1","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('trim')), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#atencao","text":"Este m\u00e9todo n\u00e3o valida se o formato de entrada est\u00e1 correto, ele apenas realiza a invers\u00e3o, por isso certifique-se de criar um m\u00e9todo de valida\u00e7\u00e3o neste mesmo campo para garantir que o formato est\u00e1 correto.","title":"Aten\u00e7\u00e3o"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#exemplo_2","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDbDate')), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#exemplo_3","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('digits')), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.2-Filtros/#exemplo_4","text":"1 2 3 4 5 // File: ModuleDefault/Form/Index/Index.php protected $data = array( 'name' => array('validation' => array(), 'filter' => array('toDouble')), );","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/","text":"Levando as valida\u00e7\u00f5es do seu formul\u00e1rio a outro n\u00edvel \u00b6 N\u00f3s queremos ampliar os horizontes \u00b6 Nosso objetivo criando o SuitUp nunca foi monopolizar seu projeto, ingessando-o para que voc\u00ea n\u00e3o utilize nada fora do nosso escopo, muito pelo contr\u00e1rio, em vez de ficar reinventando a roda, se existe uma ferramenta que faz o que precisamos e que funciona muito bem, ent\u00e3o por que n\u00e3o utiliz\u00e1-la? O SuitUp te ajuda com diversas situa\u00e7\u00f5es previstas e comuns de valida\u00e7\u00e3o de formul\u00e1rios, al\u00e9m disso voc\u00ea pode inserir as valida\u00e7\u00f5es do Zend Framework ( Github ) que inclusive j\u00e1 s\u00e3o marcadas pelo SuitUp como depend\u00eancias no composer , ou seja, ao utilizar o composer para fazer o download do SuitUp voc\u00ea estar\u00e1 automaticamente baixando as bibliotecas de valida\u00e7\u00f5es do Zend tamb\u00e9m. Mesmo depois de tudo isso, voc\u00ea muito provavelmente ir\u00e1 encontrar em seu sistema situa\u00e7\u00f5es de valida\u00e7\u00f5es que nem n\u00f3s do SuitUp nem o pessoal do Zend Framework previu. Para isso voc\u00ea pode muito facilmente criar seus pr\u00f3prios m\u00e9todos de valida\u00e7\u00e3o. Como fazer? \u00b6 Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar um stdClass com dois atributos ( error e message ). Exemplo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randErr' , 'randInvalid' => 'Mensagem personalizada' ), 'filter' => array ( 'string' ) ), ); // Exemplo simples de validacao public function randErr ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = '' ; // Casualmente retorna 1 e gera erro if ( rand ( 0 , 1 ) == 1 ) { $result -> error = true ; $result -> message = \"Este m\u00e9todo retorna erro aleatoriamente\" ; } return $result ; } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randInvalid ( $value , $options = null ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if ( is_int ( $value ) && ( $value % 2 ) == 0 ) { $result -> error = true ; // Verifica se foi passado parametro 'mensagem' if ( isset ( $options [ 'message' ]) { $result -> message = $options [ 'message' ]; // Verifica se foi passado simplesmente mensagem } elseif ( is_string ( $options )) { $result -> message = $options ; // Mensagem padrao (sem parametro) } else { $result -> message = 'Um erro foi detectado' ; } } return $result ; } } Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator \u00b6 Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de valida\u00e7\u00e3o ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios. Parece, mas n\u00e3o \u00e9 complicado! \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"4.3 Valida\u00e7\u00e3o Personalizada"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#levando-as-validacoes-do-seu-formulario-a-outro-nivel","text":"","title":"Levando as valida\u00e7\u00f5es do seu formul\u00e1rio a outro n\u00edvel"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#nos-queremos-ampliar-os-horizontes","text":"Nosso objetivo criando o SuitUp nunca foi monopolizar seu projeto, ingessando-o para que voc\u00ea n\u00e3o utilize nada fora do nosso escopo, muito pelo contr\u00e1rio, em vez de ficar reinventando a roda, se existe uma ferramenta que faz o que precisamos e que funciona muito bem, ent\u00e3o por que n\u00e3o utiliz\u00e1-la? O SuitUp te ajuda com diversas situa\u00e7\u00f5es previstas e comuns de valida\u00e7\u00e3o de formul\u00e1rios, al\u00e9m disso voc\u00ea pode inserir as valida\u00e7\u00f5es do Zend Framework ( Github ) que inclusive j\u00e1 s\u00e3o marcadas pelo SuitUp como depend\u00eancias no composer , ou seja, ao utilizar o composer para fazer o download do SuitUp voc\u00ea estar\u00e1 automaticamente baixando as bibliotecas de valida\u00e7\u00f5es do Zend tamb\u00e9m. Mesmo depois de tudo isso, voc\u00ea muito provavelmente ir\u00e1 encontrar em seu sistema situa\u00e7\u00f5es de valida\u00e7\u00f5es que nem n\u00f3s do SuitUp nem o pessoal do Zend Framework previu. Para isso voc\u00ea pode muito facilmente criar seus pr\u00f3prios m\u00e9todos de valida\u00e7\u00e3o.","title":"N\u00f3s queremos ampliar os horizontes"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#como-fazer","text":"Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar um stdClass com dois atributos ( error e message ).","title":"Como fazer?"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' , 'randErr' , 'randInvalid' => 'Mensagem personalizada' ), 'filter' => array ( 'string' ) ), ); // Exemplo simples de validacao public function randErr ( $value ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = '' ; // Casualmente retorna 1 e gera erro if ( rand ( 0 , 1 ) == 1 ) { $result -> error = true ; $result -> message = \"Este m\u00e9todo retorna erro aleatoriamente\" ; } return $result ; } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randInvalid ( $value , $options = null ) { $result = new \\stdClass (); $result -> error = false ; $result -> message = \"\" ; if ( is_int ( $value ) && ( $value % 2 ) == 0 ) { $result -> error = true ; // Verifica se foi passado parametro 'mensagem' if ( isset ( $options [ 'message' ]) { $result -> message = $options [ 'message' ]; // Verifica se foi passado simplesmente mensagem } elseif ( is_string ( $options )) { $result -> message = $options ; // Mensagem padrao (sem parametro) } else { $result -> message = 'Um erro foi detectado' ; } } return $result ; } }","title":"Exemplo"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#extendendo-a-classe-suitupformvalidatorabstractformvalidator","text":"Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de valida\u00e7\u00e3o ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios.","title":"Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator"},{"location":"user-guide/old-version/ptbr/4.3-Valida\u00e7\u00e3o-Personalizada/#parece-mas-nao-e-complicado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"Parece, mas n\u00e3o \u00e9 complicado!"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/","text":"Filtrando dados do formul\u00e1rio \u00b6 Diferente das [[valida\u00e7\u00f5es|4.1-Valida\u00e7\u00f5es]] onde voc\u00ea tem a op\u00e7\u00e3o de utilizar os m\u00e9todos do Zend Framework os m\u00e9todos de filtro para formul\u00e1rios n\u00e3o t\u00eam esta op\u00e7\u00e3o. O motivo \u00e9 que ainda n\u00e3o houve interesse em incorporar este tipo filtro ainda. Por outro lado voc\u00ea ainda tem a op\u00e7\u00e3o de criar seus pr\u00f3prios m\u00e9todos de filtro assim como valida\u00e7\u00f5es o que te proporciona a possibilidade de levar seus filtros a outro n\u00edvel tamb\u00e9m. Como fazer? \u00b6 Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar o valor do input j\u00e1 com a aplica\u00e7\u00e3o dos filtros desejados. Exemplo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' ), 'filter' => array ( 'string' , 'randConcatNumber' , 'randConcatLetter' => 'abc' ) ), ); // Exemplo simples de filtro public function randConcatNumber ( $value ) { return $value . '_' . (( string ) rand ( 0 , 9 )); } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randConcatLetter ( $value , $options = 'ab' ) { // Garante que $options \u00e9 string $options = ( string ) $options ; // pega um indice randomico de $options $i = rand ( 0 , strlen ( $options )) - 1 ; // Retorna $value concatenado da letra randomica encontrada return $value . '-' . $options [ $i ]; } } Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator \u00b6 Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de filtro ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios. Parece, mas n\u00e3o \u00e9 complicado! \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"4.4 Filtro Personalizado"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/#filtrando-dados-do-formulario","text":"Diferente das [[valida\u00e7\u00f5es|4.1-Valida\u00e7\u00f5es]] onde voc\u00ea tem a op\u00e7\u00e3o de utilizar os m\u00e9todos do Zend Framework os m\u00e9todos de filtro para formul\u00e1rios n\u00e3o t\u00eam esta op\u00e7\u00e3o. O motivo \u00e9 que ainda n\u00e3o houve interesse em incorporar este tipo filtro ainda. Por outro lado voc\u00ea ainda tem a op\u00e7\u00e3o de criar seus pr\u00f3prios m\u00e9todos de filtro assim como valida\u00e7\u00f5es o que te proporciona a possibilidade de levar seus filtros a outro n\u00edvel tamb\u00e9m.","title":"Filtrando dados do formul\u00e1rio"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/#como-fazer","text":"Dentro da sua classe de formul\u00e1rio (vamos usar de ex.: ModuleDefault/Form/Index/Index.php ) basta adicionar um m\u00e9todo com visibilidade pelo menos protected que recebe no m\u00e1ximo dois par\u00e2metros sendo o primeiro obrigat\u00f3rio: 1 2 ( string ) $ value ; // OBRIGAT\u00d3RIO - O m\u00e9todo receber\u00e1 automaticamente o valor do input neste par\u00e2metro ( mixed ) $ options ; // Op\u00e7\u00f5es que n\u00e3o s\u00e3o obrigat\u00f3rias. Este m\u00e9todo deve retornar o valor do input j\u00e1 com a aplica\u00e7\u00e3o dos filtros desejados.","title":"Como fazer?"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/#exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?php // File: ModuleDefault/Form/Index/Index.php namespace ModuleDefault\\Form\\Index ; use SuitUp\\FormValidator\\AbstractFormValidator ; class Index extends AbstractFormValidator { protected $data = array ( 'name' => array ( 'validation' => array ( 'notEmpty' ), 'filter' => array ( 'string' , 'randConcatNumber' , 'randConcatLetter' => 'abc' ) ), ); // Exemplo simples de filtro public function randConcatNumber ( $value ) { return $value . '_' . (( string ) rand ( 0 , 9 )); } // Este \u00e9 um exemplo mais complexo, com op\u00e7\u00f5es public function randConcatLetter ( $value , $options = 'ab' ) { // Garante que $options \u00e9 string $options = ( string ) $options ; // pega um indice randomico de $options $i = rand ( 0 , strlen ( $options )) - 1 ; // Retorna $value concatenado da letra randomica encontrada return $value . '-' . $options [ $i ]; } }","title":"Exemplo"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/#extendendo-a-classe-suitupformvalidatorabstractformvalidator","text":"Uma das grandes vantagens de utilizar Programa\u00e7\u00e3o Orientada a Objetos do PHP \u00e9 o conceito de heran\u00e7a. N\u00e3o vamos entrar no m\u00e9rito de explicar o que este conceito significa ent\u00e3o na pr\u00e1tica o SuitUp foi constru\u00eddo para voc\u00ea criar a sua classe de formul\u00e1rio herdando (extends) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator fazendo com que sua classe tenha todas as caracter\u00edsticas dela sem alter\u00e1-la. Desta maneira, quando voc\u00ea criar em sua classe de formul\u00e1rio um m\u00e9todo de filtro ele ser\u00e1 vis\u00edvel apenas dentro deste \u00fanico formul\u00e1rio. Mas se por outro lado voc\u00ea tiver uma classe no \"meio do caminho\" que herda (extende) \u00e0 \\SuitUp\\FormValidator\\AbstractFormValidator e todas as suas classes de formul\u00e1rio herdar dela voc\u00ea ir\u00e1 compartilhar os seus m\u00e9todos de valida\u00e7\u00e3o com todos seus formul\u00e1rios.","title":"Extendendo a classe \\SuitUp\\FormValidator\\AbstractFormValidator"},{"location":"user-guide/old-version/ptbr/4.4-Filtro-Personalizado/#parece-mas-nao-e-complicado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 \\ SuitUp \\ FormValidator \\ AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ AbstractFormPersonal extends AbstractFormValidator ^ | \\ ModuleDefault \\ Form \\ Index \\ IndexForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ ListForm extends AbstractFormPersonal \\ ModuleDefault \\ Form \\ Index \\ EditForm extends AbstractFormPersonal","title":"Parece, mas n\u00e3o \u00e9 complicado!"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/","text":"Banco de dados (Mysql) \u00b6 Tudo bem, este artigo \u00e9 um pouco grande, n\u00f3s entendemos. Mas \u00e9 realmente necess\u00e1rio que voc\u00ea leia e compreenda tudo, para assim poder ter certeza de que est\u00e1 fazendo seu aplicativo funcionar corretamente. Valos l\u00e1, voc\u00ea j\u00e1 leu artigos maiores e muito menos interessantes... At\u00e9 este momento n\u00f3s inclu\u00edmos no SuitUp somente o banco de dados mais famoso do mundo ( MySql da Oracle ). N\u00f3s n\u00e3o temos absolutamente nada contra nenhum outro tipo de banco de dados, muito pelo contr\u00e1rio, as op\u00e7\u00f5es s\u00e3o muitas e cada um tem seus pontos fortes a oferecer. Talvez voc\u00ea queira utilizar outro tipo de banco de dados e pense que por isso n\u00e3o \u00e9 poss\u00edvel utilizar o SuitUp , mas a verdade \u00e9 que com poucas adapta\u00e7\u00f5es \u00e9 poss\u00edvel integrar outro m\u00f3dulo de banco de dados. Mesmo assim n\u00e3o vamos entrar neste assunto sem antes existir demanda pra isso. O que h\u00e1 nesta p\u00e1gina \u00b6 Conectando com o banco de dados Estrutura Business (Regras de Neg\u00f3cio) Criando um Business (BO) M\u00e9todos padr\u00e3o de Business INSERT UPDATE DELETE GET SAVE Gateway Criando um Gateway Montar consultas complexas M\u00e9todos para consultas SQL Tipos de retorno de dados Arquivos SQL Transa\u00e7\u00f5es Conectando com o Banco de Dados \u00b6 Antes de come\u00e7ar a utilizar seu banco de dados via SuitUp voc\u00ea precisa incluir ao projeto as configura\u00e7\u00f5es para realizar a conex\u00e3o com ele. Para isso n\u00f3s fizemos [[este manual|5.1 database.config.php]] que ir\u00e1 explicar tudo que voc\u00ea precisa fazer para realizar esta conex\u00e3o. [[Manual para conex\u00e3o com seu banco de dados MySql|5.1 database.config.php]] Estrutura \u00b6 Dentro de cada m\u00f3dulo deve haver uma pasta Model com a seguinte estrutura 1 2 3 4 5 6 7 8 ModuleName | Model | | Gateway | | | User . php | | SqlFiles ( opcional ) | | | user | | | | getById . sql | | UserBusiness . php Os arquivos demonstrados na estrutura acima s\u00e3o representativos, ou seja, servem apenas de exemplos. Business (Regras de Neg\u00f3cio) \u00b6 Esta \u00e9 uma estrutura interessante de projeto que evita problemas como perder ou pular uma regra de neg\u00f3cio, como? Um controlador nunca deve acessar um Gateway , esta \u00e9 a classe que efetiva as consultas no banco de dados. Em vez disso um controlador ou qualquer outro lugar do sistema deve acessar sempre um Business (BO, BusinessObject) que deve retornar resultados do banco de dados, mas aplicando regras de neg\u00f3cio. Para entender melhor, vamos supor que voc\u00ea tenha uma regra de neg\u00f3cio em seu projeto que ao excluir um usu\u00e1rio tamb\u00e9m apaga todos os pedidos feito por ele. Se voc\u00ea acessar o Gateway diretamente para excluir este usu\u00e1rio ele ser\u00e1 exclu\u00eddo e deixar\u00e1 os pedidos sem serem exclu\u00eddos, dessa forma voc\u00ea garante que a regra de neg\u00f3cio ser\u00e1 sempre aplicada. Claro que o programador pode pular esta estrutura se desejar, esta \u00e9 a maneira que n\u00f3s recomendamos. IMPORTANTE: Nunca deixe um Business chamar um m\u00e9todo de outro Gateway que n\u00e3o \u00e9 o dele, isto tamb\u00e9m seria uma quebra de regras de neg\u00f3cio. Business s\u00f3 se comunica com Business Criando um Business (BO) \u00b6 Lembre-se, cada tabela do banco de dados deve ter sua Business e sua Gateway . Para criar a Business de uma tabela basta estend\u00ea-la de \\SuitUp\\Database\\Business\\AbstractBusiness e criar um atributo protected de nome $gateway . Os m\u00e9todos ficam por sua necessidade. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace ModuleName\\Model use \\SuitUp\\Database\\Business\\AbstractBusiness; class UserBusiness extends AbstractBusiness { /** * Atributo obrigat\u00f3rio * @var Gateway\\User */ protected $gateway; /** * EXEMPLO. * Retorna o nome do usu\u00e1rio. * * @param int $userId ID do usu\u00e1rio * @return string */ public function userNameById($userId) { // Note aqui a regra de neg\u00f3cio sendo aplicada. $result = $this->gateway->getUserById($userId); return $result['name']; } } M\u00e9todos padr\u00e3o de Business \u00b6 Todas as Business v\u00eam por padr\u00e3o com os seguintes m\u00e9todos. S\u00e3o a\u00e7\u00f5es muito comuns de serem necess\u00e1rias que n\u00e3o precisam ser reescritas. Lembre-se de que para que esses m\u00e9todos funcionem \u00e9 necess\u00e1rio tamb\u00e9m criar a respectiva classe Gateway para a mesma tabela. INSERT - $someBo->insert(array $data); \u00b6 Este m\u00e9todo realiza somente o INSERT no banco de dados e retorna o ID ( last insert ID ) gerado para a tabela. Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 // Apenas um exemplo try { // Insert $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->insert(array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); } catch (\\Exception $e) { // Error control } UPDATE - $someBo->update(array $data, array $where, $noWhereForSure = false); \u00b6 Este m\u00e9todo realiza somente o UPDATE no banco de dados e retorna o n\u00famero de linhas alteradas com isso. O par\u00e2metro $noWhereForSure ativado (true) significa que o par\u00e2metro $where foi passado vazio de prop\u00f3sito, pois isso significa que o UPDATE ir\u00e1 alterar todos os registros da tabela, o que n\u00e3o \u00e9 de modo algum algo comum. Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Apenas um exemplo try { $data = array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', ); // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->update($data, array('pk' => 1)); } catch (\\Exception $e) { // Error control } DELETE - $someBo->delete(array $where); \u00b6 Este m\u00e9todo remove efetivamente um registro do banco de dados e retorna o n\u00famero de linhas afetadas. Exemplo: 1 2 3 4 5 6 7 8 9 10 // Apenas um exemplo try { // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->delete(array('pk' => 1)); } catch (\\Exception $e) { // Error control } Caso voc\u00ea tenha necessidade de fazer delete l\u00f3gico, ou seja, utilizar status para identificar registros removidos em vez de remov\u00ea-los de fato ser\u00e1 necess\u00e1rio implementar seu pr\u00f3prio m\u00e9todo. GET - $someBo->get('PK 1'); \u00b6 Este m\u00e9todo ir\u00e1 retornar o item da tabela do banco de dados que tem este(s) ID('s). Voc\u00ea ver\u00e1 mais adiante que ao criar um Gateway voc\u00ea dever\u00e1 indicar o(s) ID('s) da tabela, assim o SuitUp sabe quais registros procurar. Se sua tabela trabalha com chaves compostas (varias colunas como chave prim\u00e1ria) ser\u00e1 necess\u00e1rio passar todas elas como par\u00e2metros separados. Exemplo: 1 2 3 // Apenas um exemplo $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $user = $userBo->get(1, 'active'); SAVE - $someBo->save(array()); \u00b6 Este m\u00e9todo identifica se \u00e9 necess\u00e1rio fazer um insert ou update no banco de dados automaticamente, serve na realidade como apelido para ambos. Para identificar qual m\u00e9todo o SuitUp ir\u00e1 utilizar, este m\u00e9todo verifica se no array existem as chaves prim\u00e1rias da tabela e se existirem faz um update , caso contr\u00e1rio ser\u00e1 um insert . Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Apenas um exemplo try { // Insert $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->save(array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $userBo->save(array( 'pk' => $newId, 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); } catch (\\Exception $e) { // Error } Gateway \u00b6 S\u00e3o os gateways que v\u00e3o de fato realizar as consultas no banco de dados, voc\u00ea pode criar queries (SQL) por Objeto, String e at\u00e9 mesmo por arquivos (.sql). Criando um Gateway \u00b6 Um Gateway deve obrigatoriamente conter os atributos $name e $primary onde o primeiro deve ser uma string com o nome da tabela (pode conter o nome do banco como db_main.tb_user por exemplo) e o segundo pode ser uma string com o nome da PK, mas preferencialmente um array com a lista dele(s). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 namespace ModuleDefault\\Model\\Gateway use \\SuitUp\\Database\\Gateway\\AbstractGateway; class User extends AbstractGateway { /** * Defina aqui o nome da tabela e o nome da(s) chave(s) prim\u00e1ria(s). * Isto \u00e9 obrigat\u00f3rio. */ protected $name = 'user'; protected $primary = array('id_user'); /** * Opcionalmente voc\u00ea pode indicar uma coluna que a cada update receber\u00e1 um update * autom\u00e1tico sem que voc\u00ea precise indicar na chamada do m\u00e9todo update(); */ protected $onUpdate = array('edit' => 'NOW()'); /** * Sql por Objeto. Este \u00e9 o m\u00e9todo que n\u00f3s recomendamos em primeiro lugar, * mais seguro e mais f\u00e1cil de dar manuten\u00e7\u00e3o */ public function getUserByIdObject($userId) { $sql = $this->select(\"SELECT * FROM user\") ->where(\"pk_user = ?\", $userId); return $this->db->row($sql); } /** * Sql por String. */ public function getUserByIdString($userId) { $sql = \"SELECT * FROM user WHERE pk_user = :user\"; return $this->db->row($sql, array( 'user' => $userId )); } /** Utilize este apenas em queries pequenas e simples. * Arquivo SQL que vai estar em ModuleDefault/Model/SqlFiles/user/getById.sql * este caminho \u00e9 encontrado automaticamente pelo caminho at\u00e9 o model. */ public function getUserById($userId) { $sql = $this->sqlFile('getById'); return $this->db->row($sql, array( 'user' => $userId )); } } Montar consultas complexas \u00b6 Ao montar uma consulta mais complexa n\u00f3s recomendamos utilizar os objetos como $this->select('SELECT * FROM ...'); . Esta \u00e9 a forma mais segura e mais f\u00e1cil de dar manuten\u00e7\u00e3o depois, al\u00e9m tamb\u00e9m de facilitar para montar a consulta quando esta tem quest\u00f5es condicionais como filtros. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <?php namespace ModuleDefault\\ModelMain\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class Phone extends AbstractGateway { protected $name = 'maindb.tb_phone' ; // database + table protected $primary = array ( 'id_phone' ); /** * Lista os telefones de um usuario * * @param int $idRegion * @param array $filters * @return \\SuitUp\\Paginate\\Paginate */ public function listphonesByRegion ( $idRegion , array $filters = array ()) { // Subquery retorna o n\u00famero de atendentes em cada telefone da regiao $subQuery = $this -> select ( \"SELECT COUNT(1) FROM otherdb.tb_operator op1\" ) -> where ( 'p.id_phone = op1.id_phone' ) -> where ( 'op1.status = 1' ); $query = $this -> select ( \"SELECT p.* FROM { $this -> name } as p\" ) -> columns ( array ( 'p.id_phone' , 'p.country' , 'p.area_code' , 'p.number' , 'r.id_region' , 'r.state' , 'r.city' , 'r.neighborhood' , \"( $subQuery )\" => 'qtdOps' , // Subquery )) -> innerJoin ( \"maindb.tb_region as r\" , \"r.id_region = p.id_region\" ) -> where ( 'r.id_region = ?' , $idRegion ) -> where ( 'r.status = 1' ) -> where ( \"( $subQuery ) > 0\" ) // Subquery > 0 -> order ( \"u.`name` ASC\" ); // Filtro por regiao (estado) if ( isset ( $filters [ 'state' ]) && $filters [ 'state' ]) { $query -> where ( 'UPPER(r.state) LIKE UPPER(?)' , '%' . $filters [ 'state' ] . '%' ); } // Retornando dados paginados return $this -> db -> paginate ( $query ); } } M\u00e9todos para consultas SQL \u00b6 De fato, para quem est\u00e1 habituado a escrever consultas para banco de dados estes m\u00e9todos seguintes dispensam qualquer tipo de apresenta\u00e7\u00e3o. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public function columns(array $columns) public function innerJoin($table, $onClause) public function leftJoin($table, $onClause) public function rightJoin($table, $onClause) public function where($where, $value = null, $type = null) public function orWhere($where, $value = null, $type = null) public function group($column) public function order($column) public function having($text); public function limit($limit, $offset = null); Tipos de retorno de dados \u00b6 \u00c9 poss\u00edvel escolher como a consulta vai retornar resultados, em array para v\u00e1rias linhas ao mesmo tempo, apenas uma linha, apenas um valor sem nome ou at\u00e9 mesmo em pares do tipo id => valor . S\u00e3o esses m\u00e9todos: 1 2 3 4 5 6 7 8 9 10 11 // Retorna lista com v\u00e1rias linhas do banco de dados (de acordo com a consulta) $this->db->query($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC); // Retorna apenas as colunas indicadas por n\u00famero (come\u00e7ando por 0 [zero]) $this->db->column($query, $params = null); // Retorna apenas a primeira linha do resultado segundo a consulta $this->db->row($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC); // Retorna um \u00fanico resultado sem nem mesmo nome de coluna $this->db->single($query, $params = null); Os m\u00e9todos acima s\u00e3o aqueles que n\u00f3s julgamos que sejam mais necess\u00e1rios e utilizados para o dia-a-dia, mas \u00e9 poss\u00edvel escolher o \\PDO::FETCH_* necess\u00e1rio que o PHP disponibiliza aqui . Neste caso utilize da seguinte forma: 1 $this->db->query($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC); Arquivos SQL \u00b6 Recomendado para consultas simples \u00b6 Para montar a consulta por meio de arquivo SQL voc\u00ea deve simplesmente seguir as regras SQL para a instru\u00e7\u00e3o desejada, n\u00f3s pegamos o conte\u00fado deste arquivo, substitu\u00edmos os valores e rodamos ela no banco de dados exatamente como voc\u00ea a montou. O que complica \u00e9 que quando voc\u00ea precisar adicionar instru\u00e7\u00f5es condicionalmente como filtros fica muito dif\u00edcil fazer isso simplesmente com SQL e sem programa\u00e7\u00e3o, por isso indicamos este m\u00e9todo de arquivos .sql apenas para consultas simples. Os par\u00e2metros da consulta devem ser precedidos do : 1 SELECT * FROM user u WHERE u . pk_user = : user Transa\u00e7\u00f5es \u00b6 A qualquer momento voc\u00ea pode iniciar uma transa\u00e7\u00e3o no banco de dados. As transa\u00e7\u00f5es fazem com que as a\u00e7\u00f5es realizadas no escopo depois de begin s\u00f3 tenham efeito ap\u00f3s um commit , ou seja, se houver um rollBack nada ser\u00e1 alterado no banco. \u00c9 uma forma de garantir a persist\u00eancia dos dados e n\u00e3o realizar a\u00e7\u00f5es pela metade, causando assim inconsist\u00eancia nos dados do banco. Veja abaixo um exemplo na pr\u00e1tica. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \\SuitUp\\Database\\Database::beginTransaction(); try { $phoneBo = new \\ModuleDefault\\ModelLogs\\PhoneBusiness(); $newPhone = $phoneBo->insert(array( 'country' => '+55', 'area_code' => '85', 'number' => '555-5555', )); // Erro absurdo if ($newPhone%2 == 0) { throw new \\Exception(\"Arbitrary error\"); } // N\u00e3o caiu no erro absurdo, agora sim o banco vai gravar este valor \\SuitUp\\Database\\Database::commit(); } catch(\\Exception $e) { // Nada foi alterado \\SuitUp\\Database\\Database::rollBack(); }","title":"5. Banco de dados"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#banco-de-dados-mysql","text":"Tudo bem, este artigo \u00e9 um pouco grande, n\u00f3s entendemos. Mas \u00e9 realmente necess\u00e1rio que voc\u00ea leia e compreenda tudo, para assim poder ter certeza de que est\u00e1 fazendo seu aplicativo funcionar corretamente. Valos l\u00e1, voc\u00ea j\u00e1 leu artigos maiores e muito menos interessantes... At\u00e9 este momento n\u00f3s inclu\u00edmos no SuitUp somente o banco de dados mais famoso do mundo ( MySql da Oracle ). N\u00f3s n\u00e3o temos absolutamente nada contra nenhum outro tipo de banco de dados, muito pelo contr\u00e1rio, as op\u00e7\u00f5es s\u00e3o muitas e cada um tem seus pontos fortes a oferecer. Talvez voc\u00ea queira utilizar outro tipo de banco de dados e pense que por isso n\u00e3o \u00e9 poss\u00edvel utilizar o SuitUp , mas a verdade \u00e9 que com poucas adapta\u00e7\u00f5es \u00e9 poss\u00edvel integrar outro m\u00f3dulo de banco de dados. Mesmo assim n\u00e3o vamos entrar neste assunto sem antes existir demanda pra isso.","title":"Banco de dados (Mysql)"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#o-que-ha-nesta-pagina","text":"Conectando com o banco de dados Estrutura Business (Regras de Neg\u00f3cio) Criando um Business (BO) M\u00e9todos padr\u00e3o de Business INSERT UPDATE DELETE GET SAVE Gateway Criando um Gateway Montar consultas complexas M\u00e9todos para consultas SQL Tipos de retorno de dados Arquivos SQL Transa\u00e7\u00f5es","title":"O que h\u00e1 nesta p\u00e1gina"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#conectando-com-o-banco-de-dados","text":"Antes de come\u00e7ar a utilizar seu banco de dados via SuitUp voc\u00ea precisa incluir ao projeto as configura\u00e7\u00f5es para realizar a conex\u00e3o com ele. Para isso n\u00f3s fizemos [[este manual|5.1 database.config.php]] que ir\u00e1 explicar tudo que voc\u00ea precisa fazer para realizar esta conex\u00e3o. [[Manual para conex\u00e3o com seu banco de dados MySql|5.1 database.config.php]]","title":"Conectando com o Banco de Dados"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#estrutura","text":"Dentro de cada m\u00f3dulo deve haver uma pasta Model com a seguinte estrutura 1 2 3 4 5 6 7 8 ModuleName | Model | | Gateway | | | User . php | | SqlFiles ( opcional ) | | | user | | | | getById . sql | | UserBusiness . php Os arquivos demonstrados na estrutura acima s\u00e3o representativos, ou seja, servem apenas de exemplos.","title":"Estrutura"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#business-regras-de-negocio","text":"Esta \u00e9 uma estrutura interessante de projeto que evita problemas como perder ou pular uma regra de neg\u00f3cio, como? Um controlador nunca deve acessar um Gateway , esta \u00e9 a classe que efetiva as consultas no banco de dados. Em vez disso um controlador ou qualquer outro lugar do sistema deve acessar sempre um Business (BO, BusinessObject) que deve retornar resultados do banco de dados, mas aplicando regras de neg\u00f3cio. Para entender melhor, vamos supor que voc\u00ea tenha uma regra de neg\u00f3cio em seu projeto que ao excluir um usu\u00e1rio tamb\u00e9m apaga todos os pedidos feito por ele. Se voc\u00ea acessar o Gateway diretamente para excluir este usu\u00e1rio ele ser\u00e1 exclu\u00eddo e deixar\u00e1 os pedidos sem serem exclu\u00eddos, dessa forma voc\u00ea garante que a regra de neg\u00f3cio ser\u00e1 sempre aplicada. Claro que o programador pode pular esta estrutura se desejar, esta \u00e9 a maneira que n\u00f3s recomendamos. IMPORTANTE: Nunca deixe um Business chamar um m\u00e9todo de outro Gateway que n\u00e3o \u00e9 o dele, isto tamb\u00e9m seria uma quebra de regras de neg\u00f3cio. Business s\u00f3 se comunica com Business","title":"Business (Regras de Neg\u00f3cio)"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#criando-um-business-bo","text":"Lembre-se, cada tabela do banco de dados deve ter sua Business e sua Gateway . Para criar a Business de uma tabela basta estend\u00ea-la de \\SuitUp\\Database\\Business\\AbstractBusiness e criar um atributo protected de nome $gateway . Os m\u00e9todos ficam por sua necessidade. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace ModuleName\\Model use \\SuitUp\\Database\\Business\\AbstractBusiness; class UserBusiness extends AbstractBusiness { /** * Atributo obrigat\u00f3rio * @var Gateway\\User */ protected $gateway; /** * EXEMPLO. * Retorna o nome do usu\u00e1rio. * * @param int $userId ID do usu\u00e1rio * @return string */ public function userNameById($userId) { // Note aqui a regra de neg\u00f3cio sendo aplicada. $result = $this->gateway->getUserById($userId); return $result['name']; } }","title":"Criando um Business (BO)"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#metodos-padrao-de-business","text":"Todas as Business v\u00eam por padr\u00e3o com os seguintes m\u00e9todos. S\u00e3o a\u00e7\u00f5es muito comuns de serem necess\u00e1rias que n\u00e3o precisam ser reescritas. Lembre-se de que para que esses m\u00e9todos funcionem \u00e9 necess\u00e1rio tamb\u00e9m criar a respectiva classe Gateway para a mesma tabela.","title":"M\u00e9todos padr\u00e3o de Business"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#insert-somebo-gtinsertarray-data","text":"Este m\u00e9todo realiza somente o INSERT no banco de dados e retorna o ID ( last insert ID ) gerado para a tabela. Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 // Apenas um exemplo try { // Insert $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->insert(array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); } catch (\\Exception $e) { // Error control }","title":"INSERT - $someBo-&gt;insert(array $data);"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#update-somebo-gtupdatearray-data-array-where-nowhereforsure-false","text":"Este m\u00e9todo realiza somente o UPDATE no banco de dados e retorna o n\u00famero de linhas alteradas com isso. O par\u00e2metro $noWhereForSure ativado (true) significa que o par\u00e2metro $where foi passado vazio de prop\u00f3sito, pois isso significa que o UPDATE ir\u00e1 alterar todos os registros da tabela, o que n\u00e3o \u00e9 de modo algum algo comum. Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Apenas um exemplo try { $data = array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', ); // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->update($data, array('pk' => 1)); } catch (\\Exception $e) { // Error control }","title":"UPDATE - $someBo-&gt;update(array $data, array $where, $noWhereForSure = false);"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#delete-somebo-gtdeletearray-where","text":"Este m\u00e9todo remove efetivamente um registro do banco de dados e retorna o n\u00famero de linhas afetadas. Exemplo: 1 2 3 4 5 6 7 8 9 10 // Apenas um exemplo try { // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->delete(array('pk' => 1)); } catch (\\Exception $e) { // Error control } Caso voc\u00ea tenha necessidade de fazer delete l\u00f3gico, ou seja, utilizar status para identificar registros removidos em vez de remov\u00ea-los de fato ser\u00e1 necess\u00e1rio implementar seu pr\u00f3prio m\u00e9todo.","title":"DELETE - $someBo-&gt;delete(array $where);"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#get-somebo-gtgetpk-1","text":"Este m\u00e9todo ir\u00e1 retornar o item da tabela do banco de dados que tem este(s) ID('s). Voc\u00ea ver\u00e1 mais adiante que ao criar um Gateway voc\u00ea dever\u00e1 indicar o(s) ID('s) da tabela, assim o SuitUp sabe quais registros procurar. Se sua tabela trabalha com chaves compostas (varias colunas como chave prim\u00e1ria) ser\u00e1 necess\u00e1rio passar todas elas como par\u00e2metros separados. Exemplo: 1 2 3 // Apenas um exemplo $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $user = $userBo->get(1, 'active');","title":"GET - $someBo-&gt;get('PK 1');"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#save-somebo-gtsavearray","text":"Este m\u00e9todo identifica se \u00e9 necess\u00e1rio fazer um insert ou update no banco de dados automaticamente, serve na realidade como apelido para ambos. Para identificar qual m\u00e9todo o SuitUp ir\u00e1 utilizar, este m\u00e9todo verifica se no array existem as chaves prim\u00e1rias da tabela e se existirem faz um update , caso contr\u00e1rio ser\u00e1 um insert . Exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Apenas um exemplo try { // Insert $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $newId = $userBo->save(array( 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); // Update $userBo = new \\ModuleDefault\\Model\\UserBusiness(); $userBo->save(array( 'pk' => $newId, 'name' => 'Braghim Sistemas', 'email' => 'braghim.sistemas@gmail.com', )); } catch (\\Exception $e) { // Error }","title":"SAVE - $someBo-&gt;save(array());"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#gateway","text":"S\u00e3o os gateways que v\u00e3o de fato realizar as consultas no banco de dados, voc\u00ea pode criar queries (SQL) por Objeto, String e at\u00e9 mesmo por arquivos (.sql).","title":"Gateway"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#criando-um-gateway","text":"Um Gateway deve obrigatoriamente conter os atributos $name e $primary onde o primeiro deve ser uma string com o nome da tabela (pode conter o nome do banco como db_main.tb_user por exemplo) e o segundo pode ser uma string com o nome da PK, mas preferencialmente um array com a lista dele(s). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 namespace ModuleDefault\\Model\\Gateway use \\SuitUp\\Database\\Gateway\\AbstractGateway; class User extends AbstractGateway { /** * Defina aqui o nome da tabela e o nome da(s) chave(s) prim\u00e1ria(s). * Isto \u00e9 obrigat\u00f3rio. */ protected $name = 'user'; protected $primary = array('id_user'); /** * Opcionalmente voc\u00ea pode indicar uma coluna que a cada update receber\u00e1 um update * autom\u00e1tico sem que voc\u00ea precise indicar na chamada do m\u00e9todo update(); */ protected $onUpdate = array('edit' => 'NOW()'); /** * Sql por Objeto. Este \u00e9 o m\u00e9todo que n\u00f3s recomendamos em primeiro lugar, * mais seguro e mais f\u00e1cil de dar manuten\u00e7\u00e3o */ public function getUserByIdObject($userId) { $sql = $this->select(\"SELECT * FROM user\") ->where(\"pk_user = ?\", $userId); return $this->db->row($sql); } /** * Sql por String. */ public function getUserByIdString($userId) { $sql = \"SELECT * FROM user WHERE pk_user = :user\"; return $this->db->row($sql, array( 'user' => $userId )); } /** Utilize este apenas em queries pequenas e simples. * Arquivo SQL que vai estar em ModuleDefault/Model/SqlFiles/user/getById.sql * este caminho \u00e9 encontrado automaticamente pelo caminho at\u00e9 o model. */ public function getUserById($userId) { $sql = $this->sqlFile('getById'); return $this->db->row($sql, array( 'user' => $userId )); } }","title":"Criando um Gateway"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#montar-consultas-complexas","text":"Ao montar uma consulta mais complexa n\u00f3s recomendamos utilizar os objetos como $this->select('SELECT * FROM ...'); . Esta \u00e9 a forma mais segura e mais f\u00e1cil de dar manuten\u00e7\u00e3o depois, al\u00e9m tamb\u00e9m de facilitar para montar a consulta quando esta tem quest\u00f5es condicionais como filtros. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <?php namespace ModuleDefault\\ModelMain\\Gateway ; use SuitUp\\Database\\Gateway\\AbstractGateway ; class Phone extends AbstractGateway { protected $name = 'maindb.tb_phone' ; // database + table protected $primary = array ( 'id_phone' ); /** * Lista os telefones de um usuario * * @param int $idRegion * @param array $filters * @return \\SuitUp\\Paginate\\Paginate */ public function listphonesByRegion ( $idRegion , array $filters = array ()) { // Subquery retorna o n\u00famero de atendentes em cada telefone da regiao $subQuery = $this -> select ( \"SELECT COUNT(1) FROM otherdb.tb_operator op1\" ) -> where ( 'p.id_phone = op1.id_phone' ) -> where ( 'op1.status = 1' ); $query = $this -> select ( \"SELECT p.* FROM { $this -> name } as p\" ) -> columns ( array ( 'p.id_phone' , 'p.country' , 'p.area_code' , 'p.number' , 'r.id_region' , 'r.state' , 'r.city' , 'r.neighborhood' , \"( $subQuery )\" => 'qtdOps' , // Subquery )) -> innerJoin ( \"maindb.tb_region as r\" , \"r.id_region = p.id_region\" ) -> where ( 'r.id_region = ?' , $idRegion ) -> where ( 'r.status = 1' ) -> where ( \"( $subQuery ) > 0\" ) // Subquery > 0 -> order ( \"u.`name` ASC\" ); // Filtro por regiao (estado) if ( isset ( $filters [ 'state' ]) && $filters [ 'state' ]) { $query -> where ( 'UPPER(r.state) LIKE UPPER(?)' , '%' . $filters [ 'state' ] . '%' ); } // Retornando dados paginados return $this -> db -> paginate ( $query ); } }","title":"Montar consultas complexas"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#metodos-para-consultas-sql","text":"De fato, para quem est\u00e1 habituado a escrever consultas para banco de dados estes m\u00e9todos seguintes dispensam qualquer tipo de apresenta\u00e7\u00e3o. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public function columns(array $columns) public function innerJoin($table, $onClause) public function leftJoin($table, $onClause) public function rightJoin($table, $onClause) public function where($where, $value = null, $type = null) public function orWhere($where, $value = null, $type = null) public function group($column) public function order($column) public function having($text); public function limit($limit, $offset = null);","title":"M\u00e9todos para consultas SQL"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#tipos-de-retorno-de-dados","text":"\u00c9 poss\u00edvel escolher como a consulta vai retornar resultados, em array para v\u00e1rias linhas ao mesmo tempo, apenas uma linha, apenas um valor sem nome ou at\u00e9 mesmo em pares do tipo id => valor . S\u00e3o esses m\u00e9todos: 1 2 3 4 5 6 7 8 9 10 11 // Retorna lista com v\u00e1rias linhas do banco de dados (de acordo com a consulta) $this->db->query($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC); // Retorna apenas as colunas indicadas por n\u00famero (come\u00e7ando por 0 [zero]) $this->db->column($query, $params = null); // Retorna apenas a primeira linha do resultado segundo a consulta $this->db->row($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC); // Retorna um \u00fanico resultado sem nem mesmo nome de coluna $this->db->single($query, $params = null); Os m\u00e9todos acima s\u00e3o aqueles que n\u00f3s julgamos que sejam mais necess\u00e1rios e utilizados para o dia-a-dia, mas \u00e9 poss\u00edvel escolher o \\PDO::FETCH_* necess\u00e1rio que o PHP disponibiliza aqui . Neste caso utilize da seguinte forma: 1 $this->db->query($query, $params = null, $fetchmode = \\PDO::FETCH_ASSOC);","title":"Tipos de retorno de dados"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#arquivos-sql","text":"","title":"Arquivos SQL"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#recomendado-para-consultas-simples","text":"Para montar a consulta por meio de arquivo SQL voc\u00ea deve simplesmente seguir as regras SQL para a instru\u00e7\u00e3o desejada, n\u00f3s pegamos o conte\u00fado deste arquivo, substitu\u00edmos os valores e rodamos ela no banco de dados exatamente como voc\u00ea a montou. O que complica \u00e9 que quando voc\u00ea precisar adicionar instru\u00e7\u00f5es condicionalmente como filtros fica muito dif\u00edcil fazer isso simplesmente com SQL e sem programa\u00e7\u00e3o, por isso indicamos este m\u00e9todo de arquivos .sql apenas para consultas simples. Os par\u00e2metros da consulta devem ser precedidos do : 1 SELECT * FROM user u WHERE u . pk_user = : user","title":"Recomendado para consultas simples"},{"location":"user-guide/old-version/ptbr/5.-Banco-de-dados/#transacoes","text":"A qualquer momento voc\u00ea pode iniciar uma transa\u00e7\u00e3o no banco de dados. As transa\u00e7\u00f5es fazem com que as a\u00e7\u00f5es realizadas no escopo depois de begin s\u00f3 tenham efeito ap\u00f3s um commit , ou seja, se houver um rollBack nada ser\u00e1 alterado no banco. \u00c9 uma forma de garantir a persist\u00eancia dos dados e n\u00e3o realizar a\u00e7\u00f5es pela metade, causando assim inconsist\u00eancia nos dados do banco. Veja abaixo um exemplo na pr\u00e1tica. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \\SuitUp\\Database\\Database::beginTransaction(); try { $phoneBo = new \\ModuleDefault\\ModelLogs\\PhoneBusiness(); $newPhone = $phoneBo->insert(array( 'country' => '+55', 'area_code' => '85', 'number' => '555-5555', )); // Erro absurdo if ($newPhone%2 == 0) { throw new \\Exception(\"Arbitrary error\"); } // N\u00e3o caiu no erro absurdo, agora sim o banco vai gravar este valor \\SuitUp\\Database\\Database::commit(); } catch(\\Exception $e) { // Nada foi alterado \\SuitUp\\Database\\Database::rollBack(); }","title":"Transa\u00e7\u00f5es"},{"location":"user-guide/old-version/ptbr/5.1-database.config.php/","text":"Conex\u00e3o do Banco de Dados \u00b6 Para que o SuitUp consiga conectar no seu banco de dados \u00e9 necess\u00e1rio informar os par\u00e2metros de conex\u00e3o e isso \u00e9 feito atrav\u00e9s do arquivo config/database.config.php . N\u00f3s escolhemos fazer desta forma por diversos motivos. Primeiro que assim voc\u00ea pode adicionar no .gitignore uma regra para este arquivo ser ignorado, assim voc\u00ea n\u00e3o corre o risco de subir para o reposit\u00f3rio os par\u00e2metros de conex\u00e3o e abrir falha de seguran\u00e7a compartilhando dados que deveriam ficar ocultos. O segundo motivo \u00e9 que assim fica f\u00e1cil tamb\u00e9m de alterar os par\u00e2metros at\u00e9 mesmo por se tratar de um script PHP, que pode ser programado para conectar com bancos diferentes em diferentes situa\u00e7\u00f5es. Par\u00e2metros de Conex\u00e3o \u00b6 Por padr\u00e3o basta adicionar o arquivo config/database.config.php com a seguinte estrutura. Esta pasta config deve se encontrar na raiz de seu projeto. 1 2 3 4 5 6 7 <?php return array ( 'host' => 'localhost' , 'database' => 'mydatabase' , 'username' => 'root' , 'password' => '' ); Feito isso basta configurar as consultas da seguinte forma [[Banco de Dados (Mysql)|5. Banco de Dados]]","title":"5.1 database.config.php"},{"location":"user-guide/old-version/ptbr/5.1-database.config.php/#conexao-do-banco-de-dados","text":"Para que o SuitUp consiga conectar no seu banco de dados \u00e9 necess\u00e1rio informar os par\u00e2metros de conex\u00e3o e isso \u00e9 feito atrav\u00e9s do arquivo config/database.config.php . N\u00f3s escolhemos fazer desta forma por diversos motivos. Primeiro que assim voc\u00ea pode adicionar no .gitignore uma regra para este arquivo ser ignorado, assim voc\u00ea n\u00e3o corre o risco de subir para o reposit\u00f3rio os par\u00e2metros de conex\u00e3o e abrir falha de seguran\u00e7a compartilhando dados que deveriam ficar ocultos. O segundo motivo \u00e9 que assim fica f\u00e1cil tamb\u00e9m de alterar os par\u00e2metros at\u00e9 mesmo por se tratar de um script PHP, que pode ser programado para conectar com bancos diferentes em diferentes situa\u00e7\u00f5es.","title":"Conex\u00e3o do Banco de Dados"},{"location":"user-guide/old-version/ptbr/5.1-database.config.php/#parametros-de-conexao","text":"Por padr\u00e3o basta adicionar o arquivo config/database.config.php com a seguinte estrutura. Esta pasta config deve se encontrar na raiz de seu projeto. 1 2 3 4 5 6 7 <?php return array ( 'host' => 'localhost' , 'database' => 'mydatabase' , 'username' => 'root' , 'password' => '' ); Feito isso basta configurar as consultas da seguinte forma [[Banco de Dados (Mysql)|5. Banco de Dados]]","title":"Par\u00e2metros de Conex\u00e3o"},{"location":"user-guide/old-version/ptbr/5.2-Monitoramento-de-SQL/","text":"Monitore em tempo real suas consultas SQL \u00b6 O SuitUp pode gerar uma lista de todas as consultas realizadas no banco de dados durante o carregamento da p\u00e1gina, assim voc\u00ea tem mais facilidade para saber achar erros em consultas de seu sistema em ambiente de desenvolvimento. Quando habilitar \u00b6 Mostrar suas consultas SQL em ambiente de produ\u00e7\u00e3o se trata obviamente de uma falha de seguran\u00e7a, por isso, n\u00f3s recomendamos que voc\u00ea habilite somente quando estiver em ambiente de desenvolvimento. Voc\u00ea at\u00e9 pode habilitar em produ\u00e7\u00e3o, mas apenas se voc\u00ea puder fazer um condicional e mostrar somente para usu\u00e1rios com permiss\u00e3o especial como desenvolvimento ou ger\u00eancia . Como habilitar \u00b6 Se voc\u00ea tem acompanhado este manual desde o come\u00e7o ent\u00e3o j\u00e1 passou por essa parte antes na [[instala\u00e7\u00e3o|1. Instala\u00e7\u00e3o#indexphp]]. Para habilitar voc\u00ea s\u00f3 precisa pegar a inst\u00e2ncia principal do SuitUp e executar o m\u00e9todo setSqlMonitor com par\u00e2metro true , isto \u00e9 feito no arquivo index.php da raiz do projeto. Observe no exemplo abaixo. Exemplo: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // File: index.php // ... // Setup SuitUp $mvc = SuitUpStart::setup('modules/'); // Ao utilizar a constante DEVELOPMENT o sistema // entender\u00e1 que deve habilitar em desenvolvimento, // mas desabilitar em produ\u00e7\u00e3o. $mvc->setSqlMonitor(DEVELOPMENT); // ... Ps.: Estamos levando em considera\u00e7\u00e3o simplesmente que voc\u00ea quer habilitar em ambiente de desenvolvimento e desabilitar em ambiente de produ\u00e7\u00e3o. N\u00f3s temos o conhecimento de um bug onde o monitoramento repete algumas vezes o log da mesma consulta quando se trata de pagina\u00e7\u00e3o e n\u00f3s estamos analisando a melhor forma de resolver isso em breve.","title":"5.2 Monitoramento de SQL"},{"location":"user-guide/old-version/ptbr/5.2-Monitoramento-de-SQL/#monitore-em-tempo-real-suas-consultas-sql","text":"O SuitUp pode gerar uma lista de todas as consultas realizadas no banco de dados durante o carregamento da p\u00e1gina, assim voc\u00ea tem mais facilidade para saber achar erros em consultas de seu sistema em ambiente de desenvolvimento.","title":"Monitore em tempo real suas consultas SQL"},{"location":"user-guide/old-version/ptbr/5.2-Monitoramento-de-SQL/#quando-habilitar","text":"Mostrar suas consultas SQL em ambiente de produ\u00e7\u00e3o se trata obviamente de uma falha de seguran\u00e7a, por isso, n\u00f3s recomendamos que voc\u00ea habilite somente quando estiver em ambiente de desenvolvimento. Voc\u00ea at\u00e9 pode habilitar em produ\u00e7\u00e3o, mas apenas se voc\u00ea puder fazer um condicional e mostrar somente para usu\u00e1rios com permiss\u00e3o especial como desenvolvimento ou ger\u00eancia .","title":"Quando habilitar"},{"location":"user-guide/old-version/ptbr/5.2-Monitoramento-de-SQL/#como-habilitar","text":"Se voc\u00ea tem acompanhado este manual desde o come\u00e7o ent\u00e3o j\u00e1 passou por essa parte antes na [[instala\u00e7\u00e3o|1. Instala\u00e7\u00e3o#indexphp]]. Para habilitar voc\u00ea s\u00f3 precisa pegar a inst\u00e2ncia principal do SuitUp e executar o m\u00e9todo setSqlMonitor com par\u00e2metro true , isto \u00e9 feito no arquivo index.php da raiz do projeto. Observe no exemplo abaixo.","title":"Como habilitar"},{"location":"user-guide/old-version/ptbr/5.2-Monitoramento-de-SQL/#exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // File: index.php // ... // Setup SuitUp $mvc = SuitUpStart::setup('modules/'); // Ao utilizar a constante DEVELOPMENT o sistema // entender\u00e1 que deve habilitar em desenvolvimento, // mas desabilitar em produ\u00e7\u00e3o. $mvc->setSqlMonitor(DEVELOPMENT); // ... Ps.: Estamos levando em considera\u00e7\u00e3o simplesmente que voc\u00ea quer habilitar em ambiente de desenvolvimento e desabilitar em ambiente de produ\u00e7\u00e3o. N\u00f3s temos o conhecimento de um bug onde o monitoramento repete algumas vezes o log da mesma consulta quando se trata de pagina\u00e7\u00e3o e n\u00f3s estamos analisando a melhor forma de resolver isso em breve.","title":"Exemplo:"},{"location":"user-guide/old-version/ptbr/6.-Rotas/","text":"Rotas \u00b6 O que s\u00e3o rotas ? \u00b6 Por padr\u00e3o o sistema utiliza a l\u00f3gica modulo/controlador/acao na URL para saber que arquivo e m\u00e9todo acessar e executar. Isso faz com que suas URL's nem sempre se pare\u00e7am como voc\u00ea acredita que seja a melhor forma. As rotas mascaram a URL para fazer o sistema acessar um determinado m\u00f3dulo -> controlador -> acao sem a necessidade de indicar um por um na URL. Ex.: * Voc\u00ea acessa a URL: http://seusite.com.br/admin/cadastro-de-usuario.html * O sistema executa: * m\u00f3dulo: Admin * controlador: UsuarioController * m\u00e9todo: cadastroAction() Pela Genki Dama de Goku, como isso \u00e9 poss\u00edvel? \u00b6 Para cada m\u00f3dulo \u00e9 necess\u00e1rio um arquivo espec\u00edfico de rotas . Ent\u00e3o primeiro voc\u00ea deve criar um arquivo dentro da pasta config da seguinte forma: nome-do-modulo.routes.php admin.routes.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php return array ( 'cadastro-de-usuario.html' => array ( // N\u00e2o \u00e9 necess\u00e1rio adicionar o par\u00e2metro para o m\u00f3dulo, // pois este arquivo \u00e9 espec\u00edfico para o m\u00f3dulo admin, ;) 'controller' => 'usuario' , 'action' => 'cadastro' , // Um par\u00e2metro que \u00e9 passado pela URL e seu valor padr\u00e3o 'params' => array ( 'from' => 'direct' ), ), 'meu-perfil.html' => array ( 'controller' => 'perfil' , 'action' => 'index' , ), ); Par\u00e2metros \u00b6 Quando existem rotas os par\u00e2metros devem ser passados no final da URL, aquelas que foram pr\u00e9 definidas n\u00e3o levam nome=valor (ou mesmo nome/valor ). No exemplo acima uma forma de mudar o valor padr\u00e3o (direct) para facebook deveria ser feito da seguinte forma: 1 http : // seusite . com . br / admin / cadastro - de - usuario . html / facebook Ao mesmo tempo \u00e9 poss\u00edvel utilizar Query Strings o que deixaria a URL mais ou menos assim: 1 http : // seusite . com . br / admin / cadastro - de - usuario . html / facebook ? ativo = sim Voc\u00ea quer que a rota fique no final da URL? Abaixo iremos ver um pouco sobre rotas reversas ;) Rotas Reversas \u00b6 Aqui em nossos exemplos estamos utilizando a extens\u00e3o .html para exemplificar as rotas, mas isso n\u00e3o \u00e9 de fato necess\u00e1rio. Por\u00e9m \u00e9 uma pr\u00e1tica bastante usada e \u00e9 algo meio esquisito ter o .html e logo ap\u00f3s uma barra com um par\u00e2metro, por isso n\u00f3s tamb\u00e9m criamos as rotas reversas que deixam os par\u00e2metros antes do nome da rota na URL. Para isso \u00e9 necess\u00e1rio informar que esta rota \u00e9 reversa: 1 2 3 4 5 6 7 8 9 10 11 12 13 'cadastro-de-usuario.html' => array( // N\u00e2o \u00e9 necess\u00e1rio adicionar o par\u00e2metro para o m\u00f3dulo, // pois este arquivo \u00e9 espec\u00edfico para o m\u00f3dulo admin, ;) 'controller' => 'usuario', 'action' => 'cadastro', // Aqui indicamos que a rota \u00e9 reversa 'type' => \\SuitUp\\Routes\\Routes::TYPE_REVERSE, // Um par\u00e2metro que \u00e9 passado pela URL e seu valor padr\u00e3o 'params' => array('from' => 'direct'), ), O mesmo exemplo citado acima, mas com rotas reversas ficaria da seguinte forma: 1 2 3 http : // seusite . com . br / admin / facebook / cadastro - de - usuario . html ou seja http : // seusite . com . br / modulo / parametro / rota Ao mesmo tempo \u00e9 poss\u00edvel utilizar Query Strings o que deixaria a URL mais ou menos assim: 1 http : // seusite . com . br / admin / facebook / cadastro - de - usuario . html ? ativo = sim No controlador \u00b6 Voc\u00ea pode capturar os par\u00e2metros dentro do controlador da seguinte forma: 1 $this->getParams(); Em qualquer lugar \u00b6 \u00c9 poss\u00edvel recuperar a inst\u00e2ncia de Routes de qualquer lugar fazendo: 1 2 // Esta classe funciona com Design Pattern Singleton \\SuitUp\\Routes\\Routes::getInstance();","title":"6. Rotas"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#rotas","text":"","title":"Rotas"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#o-que-sao-rotas","text":"Por padr\u00e3o o sistema utiliza a l\u00f3gica modulo/controlador/acao na URL para saber que arquivo e m\u00e9todo acessar e executar. Isso faz com que suas URL's nem sempre se pare\u00e7am como voc\u00ea acredita que seja a melhor forma. As rotas mascaram a URL para fazer o sistema acessar um determinado m\u00f3dulo -> controlador -> acao sem a necessidade de indicar um por um na URL. Ex.: * Voc\u00ea acessa a URL: http://seusite.com.br/admin/cadastro-de-usuario.html * O sistema executa: * m\u00f3dulo: Admin * controlador: UsuarioController * m\u00e9todo: cadastroAction()","title":"O que s\u00e3o rotas?"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#pela-genki-dama-de-goku-como-isso-e-possivel","text":"Para cada m\u00f3dulo \u00e9 necess\u00e1rio um arquivo espec\u00edfico de rotas . Ent\u00e3o primeiro voc\u00ea deve criar um arquivo dentro da pasta config da seguinte forma: nome-do-modulo.routes.php admin.routes.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php return array ( 'cadastro-de-usuario.html' => array ( // N\u00e2o \u00e9 necess\u00e1rio adicionar o par\u00e2metro para o m\u00f3dulo, // pois este arquivo \u00e9 espec\u00edfico para o m\u00f3dulo admin, ;) 'controller' => 'usuario' , 'action' => 'cadastro' , // Um par\u00e2metro que \u00e9 passado pela URL e seu valor padr\u00e3o 'params' => array ( 'from' => 'direct' ), ), 'meu-perfil.html' => array ( 'controller' => 'perfil' , 'action' => 'index' , ), );","title":"Pela Genki Dama de Goku, como isso \u00e9 poss\u00edvel?"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#parametros","text":"Quando existem rotas os par\u00e2metros devem ser passados no final da URL, aquelas que foram pr\u00e9 definidas n\u00e3o levam nome=valor (ou mesmo nome/valor ). No exemplo acima uma forma de mudar o valor padr\u00e3o (direct) para facebook deveria ser feito da seguinte forma: 1 http : // seusite . com . br / admin / cadastro - de - usuario . html / facebook Ao mesmo tempo \u00e9 poss\u00edvel utilizar Query Strings o que deixaria a URL mais ou menos assim: 1 http : // seusite . com . br / admin / cadastro - de - usuario . html / facebook ? ativo = sim Voc\u00ea quer que a rota fique no final da URL? Abaixo iremos ver um pouco sobre rotas reversas ;)","title":"Par\u00e2metros"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#rotas-reversas","text":"Aqui em nossos exemplos estamos utilizando a extens\u00e3o .html para exemplificar as rotas, mas isso n\u00e3o \u00e9 de fato necess\u00e1rio. Por\u00e9m \u00e9 uma pr\u00e1tica bastante usada e \u00e9 algo meio esquisito ter o .html e logo ap\u00f3s uma barra com um par\u00e2metro, por isso n\u00f3s tamb\u00e9m criamos as rotas reversas que deixam os par\u00e2metros antes do nome da rota na URL. Para isso \u00e9 necess\u00e1rio informar que esta rota \u00e9 reversa: 1 2 3 4 5 6 7 8 9 10 11 12 13 'cadastro-de-usuario.html' => array( // N\u00e2o \u00e9 necess\u00e1rio adicionar o par\u00e2metro para o m\u00f3dulo, // pois este arquivo \u00e9 espec\u00edfico para o m\u00f3dulo admin, ;) 'controller' => 'usuario', 'action' => 'cadastro', // Aqui indicamos que a rota \u00e9 reversa 'type' => \\SuitUp\\Routes\\Routes::TYPE_REVERSE, // Um par\u00e2metro que \u00e9 passado pela URL e seu valor padr\u00e3o 'params' => array('from' => 'direct'), ), O mesmo exemplo citado acima, mas com rotas reversas ficaria da seguinte forma: 1 2 3 http : // seusite . com . br / admin / facebook / cadastro - de - usuario . html ou seja http : // seusite . com . br / modulo / parametro / rota Ao mesmo tempo \u00e9 poss\u00edvel utilizar Query Strings o que deixaria a URL mais ou menos assim: 1 http : // seusite . com . br / admin / facebook / cadastro - de - usuario . html ? ativo = sim","title":"Rotas Reversas"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#no-controlador","text":"Voc\u00ea pode capturar os par\u00e2metros dentro do controlador da seguinte forma: 1 $this->getParams();","title":"No controlador"},{"location":"user-guide/old-version/ptbr/6.-Rotas/#em-qualquer-lugar","text":"\u00c9 poss\u00edvel recuperar a inst\u00e2ncia de Routes de qualquer lugar fazendo: 1 2 // Esta classe funciona com Design Pattern Singleton \\SuitUp\\Routes\\Routes::getInstance();","title":"Em qualquer lugar"},{"location":"user-guide/old-version/ptbr/7.-Fun\u00e7\u00f5es/","text":"Fun\u00e7\u00f5es \u00fateis \u00b6 Voc\u00ea j\u00e1 sabe que o foco do SuitUp \u00e9 produtividade, por isso nem tudo aqui \u00e9 feito atrav\u00e9s de objetos. N\u00f3s temos que observar que o fato de algo n\u00e3o ser feito atrav\u00e9s de Orienta\u00e7\u00e3o a Objetos n\u00e3o significa que est\u00e1 mal feito ou que n\u00e3o vai funcionar direito. O PHP \u00e9 uma linguagem que tamb\u00e9m funciona atrav\u00e9s de script e n\u00f3s podemos tirar proveito disso para agilizar o desenvolvimento dos nossos aplicativos. De modo pr\u00e1tico n\u00f3s queremos dizer que escrever dump($var) \u00e9 muito mais r\u00e1pido que escrever \\SuitUp\\Debug\\Debug::dump($var) . ~ throwNewExceptionFromAnywhere ~ \u00b6 Reservado pelo sistema. Serve para n\u00f3s conseguirmos jogar Exceptions mesmo fora do escopo do SuitUp . Voc\u00ea n\u00e3o deve sobrescrever ou alterar isso. dump \u00b6 1 2 ( mixed ) $ var ; // Vari\u00e1vel que ser\u00e1 testada ( bool ) $ echo ; // Quando true em vez de travar o sistema , a fun\u00e7\u00e3o ir\u00e1 retornar o valor . Como j\u00e1 hav\u00edamos citado antes [[aqui|2.4 Debug]], esta fun\u00e7\u00e3o \u00e9 utilizada para realizar os testes ( debugs ) e poder assim verificar o funcionamento do sistema","title":"7. Fun\u00e7\u00f5es"},{"location":"user-guide/old-version/ptbr/7.-Fun\u00e7\u00f5es/#funcoes-uteis","text":"Voc\u00ea j\u00e1 sabe que o foco do SuitUp \u00e9 produtividade, por isso nem tudo aqui \u00e9 feito atrav\u00e9s de objetos. N\u00f3s temos que observar que o fato de algo n\u00e3o ser feito atrav\u00e9s de Orienta\u00e7\u00e3o a Objetos n\u00e3o significa que est\u00e1 mal feito ou que n\u00e3o vai funcionar direito. O PHP \u00e9 uma linguagem que tamb\u00e9m funciona atrav\u00e9s de script e n\u00f3s podemos tirar proveito disso para agilizar o desenvolvimento dos nossos aplicativos. De modo pr\u00e1tico n\u00f3s queremos dizer que escrever dump($var) \u00e9 muito mais r\u00e1pido que escrever \\SuitUp\\Debug\\Debug::dump($var) .","title":"Fun\u00e7\u00f5es \u00fateis"},{"location":"user-guide/old-version/ptbr/7.-Fun\u00e7\u00f5es/#thrownewexceptionfromanywhere","text":"Reservado pelo sistema. Serve para n\u00f3s conseguirmos jogar Exceptions mesmo fora do escopo do SuitUp . Voc\u00ea n\u00e3o deve sobrescrever ou alterar isso.","title":"~throwNewExceptionFromAnywhere~"},{"location":"user-guide/old-version/ptbr/7.-Fun\u00e7\u00f5es/#dump","text":"1 2 ( mixed ) $ var ; // Vari\u00e1vel que ser\u00e1 testada ( bool ) $ echo ; // Quando true em vez de travar o sistema , a fun\u00e7\u00e3o ir\u00e1 retornar o valor . Como j\u00e1 hav\u00edamos citado antes [[aqui|2.4 Debug]], esta fun\u00e7\u00e3o \u00e9 utilizada para realizar os testes ( debugs ) e poder assim verificar o funcionamento do sistema","title":"dump"},{"location":"user-guide/reference/abstract-controller/","text":"Overview \u00b6 Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized. Structure \u00b6 The index file (rewrite mod) \u00b6 First of all you need to understand that Suitup works with mod_rewrite . It means that all the URL routes will load, for first, the same index.php file in the document root of the project. Except resources files like css, js, jpg, png, txt... Remember that to make it works you will need to set up the properly .htaccess file. You will find more about it here . What about routes? \u00b6 Suitup build automatic routes using three obvious parameters that are: module name, controller name and the current action. Default Routes \u00b6 Module = ModuleDefault (folder name) 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } AbstractController It's actually a middle class that stands for SuitUp\\Mvc\\MvcAbstractController class. Keep reading about it in this section , this is one of the most important things about Suitup. Personal Routes \u00b6 Yes! You can set your own routes, of course. To do that you just need to create one file by module like bellow. Read more about the contents of this files here . config/default.routes.php to the module default. config/admin.routes.php to the module admin. Database connection \u00b6 All you got to do to setup the database connection is to configure the config/database.config.php file as shown detailed here . Help wanted We really need help to improve Suitup compatibility with other kinds of database than MySql. Come on and contribute with us. Workflow \u00b6 The path that Suitup system takes to run properly. to be continued ...","title":"Abstract Controller"},{"location":"user-guide/reference/abstract-controller/#overview","text":"Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized.","title":"Overview"},{"location":"user-guide/reference/abstract-controller/#structure","text":"","title":"Structure"},{"location":"user-guide/reference/abstract-controller/#the-index-file-rewrite-mod","text":"First of all you need to understand that Suitup works with mod_rewrite . It means that all the URL routes will load, for first, the same index.php file in the document root of the project. Except resources files like css, js, jpg, png, txt... Remember that to make it works you will need to set up the properly .htaccess file. You will find more about it here .","title":"The index file (rewrite mod)"},{"location":"user-guide/reference/abstract-controller/#what-about-routes","text":"Suitup build automatic routes using three obvious parameters that are: module name, controller name and the current action.","title":"What about routes?"},{"location":"user-guide/reference/abstract-controller/#default-routes","text":"Module = ModuleDefault (folder name) 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } AbstractController It's actually a middle class that stands for SuitUp\\Mvc\\MvcAbstractController class. Keep reading about it in this section , this is one of the most important things about Suitup.","title":"Default Routes"},{"location":"user-guide/reference/abstract-controller/#personal-routes","text":"Yes! You can set your own routes, of course. To do that you just need to create one file by module like bellow. Read more about the contents of this files here . config/default.routes.php to the module default. config/admin.routes.php to the module admin.","title":"Personal Routes"},{"location":"user-guide/reference/abstract-controller/#database-connection","text":"All you got to do to setup the database connection is to configure the config/database.config.php file as shown detailed here . Help wanted We really need help to improve Suitup compatibility with other kinds of database than MySql. Come on and contribute with us.","title":"Database connection"},{"location":"user-guide/reference/abstract-controller/#workflow","text":"The path that Suitup system takes to run properly. to be continued ...","title":"Workflow"},{"location":"user-guide/reference/overview/","text":"Overview \u00b6 Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized. Structure \u00b6 The index file (rewrite mod) \u00b6 First of all you need to understand that Suitup works with mod_rewrite . It means that all the URL routes will load, for first, the same index.php file in the document root of the project. Except resources files like css, js, jpg, png, txt... Remember that to make it works you will need to set up the properly .htaccess file. You will find more about it here . What about routes? \u00b6 Suitup build automatic routes using three obvious parameters that are: module name, controller name and the current action. Default Routes \u00b6 Module = ModuleDefault (folder name) 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } AbstractController It's actually a middle class that stands for SuitUp\\Mvc\\MvcAbstractController class. Keep reading about it in this section , this is one of the most important things about Suitup. Personal Routes \u00b6 Yes! You can set your own routes, of course. To do that you just need to create one file by module like bellow. Read more about the contents of this files here . config/default.routes.php to the module default. config/admin.routes.php to the module admin. Database connection \u00b6 All you got to do to setup the database connection is to configure the config/database.config.php file as shown detailed here . Help wanted We really need help to improve Suitup compatibility with other kinds of database than MySql. Come on and contribute with us. Workflow \u00b6 The path that Suitup system takes to run properly. to be continued ...","title":"Functions outstand"},{"location":"user-guide/reference/overview/#overview","text":"Here you will understand how and when Suitup do stuff to build your website or system fast and really well organized.","title":"Overview"},{"location":"user-guide/reference/overview/#structure","text":"","title":"Structure"},{"location":"user-guide/reference/overview/#the-index-file-rewrite-mod","text":"First of all you need to understand that Suitup works with mod_rewrite . It means that all the URL routes will load, for first, the same index.php file in the document root of the project. Except resources files like css, js, jpg, png, txt... Remember that to make it works you will need to set up the properly .htaccess file. You will find more about it here .","title":"The index file (rewrite mod)"},{"location":"user-guide/reference/overview/#what-about-routes","text":"Suitup build automatic routes using three obvious parameters that are: module name, controller name and the current action.","title":"What about routes?"},{"location":"user-guide/reference/overview/#default-routes","text":"Module = ModuleDefault (folder name) 1 2 3 4 5 6 7 8 9 <?php namespace ModuleDefault\\Controllers ; class IndexController extends AbstractController { public function indexAction () { // Here is where the legends begins... } } AbstractController It's actually a middle class that stands for SuitUp\\Mvc\\MvcAbstractController class. Keep reading about it in this section , this is one of the most important things about Suitup.","title":"Default Routes"},{"location":"user-guide/reference/overview/#personal-routes","text":"Yes! You can set your own routes, of course. To do that you just need to create one file by module like bellow. Read more about the contents of this files here . config/default.routes.php to the module default. config/admin.routes.php to the module admin.","title":"Personal Routes"},{"location":"user-guide/reference/overview/#database-connection","text":"All you got to do to setup the database connection is to configure the config/database.config.php file as shown detailed here . Help wanted We really need help to improve Suitup compatibility with other kinds of database than MySql. Come on and contribute with us.","title":"Database connection"},{"location":"user-guide/reference/overview/#workflow","text":"The path that Suitup system takes to run properly. to be continued ...","title":"Workflow"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SuitUp 2 Legendary web applications Composer composer require braghim-sistemas/suitup-php dev-version2.0 What is it? While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! SuitUp is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts. Modules You can write different and separate applications in the same project which will be accessed just changing the base URL. MVC It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project Getting Started Let us walk you through our Tutorial project and show you how Suitup can help you Why we keep this project? At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created SuitUp, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with SuitUp yet here. Try it you too, awesome web projects with SuitUp PHP Framework! Now in version 2!! Contributors Everyone is welcome to contribute with SuitUp PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case. Thanks to JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas. Thank you very much!","title":"Home"},{"location":"#suitup-2","text":"Legendary web applications","title":"SuitUp 2"},{"location":"#composer","text":"composer require braghim-sistemas/suitup-php dev-version2.0","title":"Composer"},{"location":"#what-is-it","text":"While you write the code for an application there is a lot of code you probably will use again and again and will have to copy for another application in future. Because of this, someone too smarty for whon we have to congrats a lot, created a project which works as a structure (just like a wireframe) with a lot of features you only have to use. With this project is possible to create whatever kind of web application quickly and it's just awesome! SuitUp is a PHP* OOP** framework which helps you to do what you have to do quickly, it's focused on productivity without forget about security and good practices. * Works on PHP applications based ** OOP - Object-oriented programming where programming projects works with objects concepts.","title":"What is it?"},{"location":"#modules","text":"You can write different and separate applications in the same project which will be accessed just changing the base URL.","title":"Modules"},{"location":"#mvc","text":"It means, roughly, that you will write PHP and HTML separate and all logic is organized to make a more readable and easy maintainer project","title":"MVC"},{"location":"#getting-started","text":"Let us walk you through our Tutorial project and show you how Suitup can help you","title":"Getting Started"},{"location":"#why-we-keep-this-project","text":"At the start, we created this project just for personal use, because the usual frameworks wasn't giving us the speed and facility we expected from a framework PHP. We just want to create a web project as quick as possible. So we created SuitUp, a framework which you can create your web project truly fast and everything is really patterned. We are really happy and satisfied with the results we got with SuitUp yet here. Try it you too, awesome web projects with SuitUp PHP Framework! Now in version 2!!","title":"Why we keep this project?"},{"location":"#contributors","text":"Everyone is welcome to contribute with SuitUp PHP Framework . Just fork it, make your changes as minimal as possible and create a pull request . We ask to create minimal changes because by this way it's easier to merge your request to the project in approve case.","title":"Contributors"},{"location":"#thanks-to","text":"JetBrains that gave us a free license of PHPStorm to maintain this project and develop with maximum productivity. Made with love by Braghim Sistemas. Thank you very much!","title":"Thanks to"},{"location":"about/LICENSE/","text":"The MIT License (MIT) Copyright (c) 2016 Braghim Sistemas Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"compatibility/","text":"Comparing to SuitUp version 1 We keep great compatibility with previous version talking about construct a project with SuitUp of course, but there are some differences as the list below. Database connection You can keep the usual file config/database.config.php but now its contents must to be like that: ?php return array( 'adapter' = 'mysql', // New property key 'host' = '127.0.0.1', 'port' = '3306', 'dbname' = 'suitup', 'username' = 'root', 'password' = '', ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =) Transactions To begin/commit/rollBack transactions use the methods below: SuitUp\\Database\\DbAdapter::beginTransaction() SuitUp\\Database\\DbAdapter::commit() SuitUp\\Database\\DbAdapter::rollBack() Layout Messages To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"SuitUp 1 Compatibility"},{"location":"compatibility/#comparing-to-suitup-version-1","text":"We keep great compatibility with previous version talking about construct a project with SuitUp of course, but there are some differences as the list below.","title":"Comparing to SuitUp version 1"},{"location":"compatibility/#database-connection","text":"You can keep the usual file config/database.config.php but now its contents must to be like that: ?php return array( 'adapter' = 'mysql', // New property key 'host' = '127.0.0.1', 'port' = '3306', 'dbname' = 'suitup', 'username' = 'root', 'password' = '', ); Note the 'adapter' key that was included. So will be possible to create connection to another kind of database as postgres or DB2, but it is not implemented yet. Maybe you can help us with that... Why not? =)","title":"Database connection"},{"location":"compatibility/#transactions","text":"To begin/commit/rollBack transactions use the methods below: SuitUp\\Database\\DbAdapter::beginTransaction() SuitUp\\Database\\DbAdapter::commit() SuitUp\\Database\\DbAdapter::rollBack()","title":"Transactions"},{"location":"compatibility/#layout-messages","text":"To capture the messages from layout in the previous version there was a variable available called $layoutMessages , but now its name is just $messages .","title":"Layout Messages"},{"location":"getting-started/","text":"How to begin Requirements Suitup Framework requires PHP = 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker Docker Compose Github First of all, there are a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer. Install There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time. Docker Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project /* Step 1. */ $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder /* Step 2. */ $ cd suitup-skeleton Up the Docker services /* Step 3. */ $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. /* Step 4. */ $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder /* Step 5. */ $ cd /app Download the composer dependencies /* Step 6. */ $ php composer.phar install Grant access to the vendors folder /* Step 7. */ $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080 Skeleton Project Check here to see how to setup a web server first. Clone the project from it's repository on github: $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: $ cd suitup-skeleton/ Install composer dependencies $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file. Suitup Manager To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table (Business and Gateway files) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created From Source For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how SuitUp works and its mechanics. Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ). As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial Setup Web Server First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com Apache Web Server Install apache web server with apt: $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. $ sudo vi /etc/apache2/sites-available/000-default.conf # Apache Example VirtualHost *:80 ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html Directory /var/www/html Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all /Directory LogLevel error ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined /VirtualHost That's it. Your apache server is ready to run SuitUp framework.","title":"Getting Started"},{"location":"getting-started/#how-to-begin","text":"","title":"How to begin"},{"location":"getting-started/#requirements","text":"Suitup Framework requires PHP = 7.2 and whatever web server you prefer. For this tutorials we will create the project with some addictional features to make it easy and improve the Suitup super powers. To engage you with that check it out if you need first study some of following features: Composer - Git - Apache - htaccess and optionally MySql - Docker Docker Compose Github First of all, there are a Skeleton Project created properly to begin new projects in the link bellow, no matter how method of instalation you will choose, the structure will be the same: https://github.com/braghimsistemas/suitup-skeleton You will be able to change directory structure of the project later if you want to, but for this tutorials we will follow the basic structure, making everything easyer.","title":"Requirements"},{"location":"getting-started/#install","text":"There are several ways to create projects with Suitup Framework, you can even create a new project by command line with our Suitup Manager software. Bellow you will find a list with all this possibilities by difficult level: Docker - Very easy Skeleton Project - easy Suitup Manager (command line) - easy From Source (Recommended for beginners) - medium To really understand HOW Suitup works we recommend you to install by From Source method even it taking a bit more time.","title":"Install"},{"location":"getting-started/#docker","text":"Docker is a tool created to store containers and it works almost like virtual machines. When you create a project with Docker it's not necessary even to have Apache installed in you machine, even linux is not required, Docker will manage everything for you by a predefined structure described in the docker-compose.yml file. To begin with Docker you need to install it locally following your system requirements. Here you can find all documentation needed to do it . Remember that there are two features that you need to install: Docker and Docker Compose ! Docker is one of the easyest way to init a Suitup project but maybe it's the hardest way to modify it because of the configurations made by docker-compose.yml file. We will assume that you are on linux (GNU system based). Walk to the folder where you want to install the project, maybe you already have Apache and PHP installed, but you don't need to put it on the localhost, actually you can install anywhere when we talk about Docker, of course. Clone the project /* Step 1. */ $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Enter inside the project folder /* Step 2. */ $ cd suitup-skeleton Up the Docker services /* Step 3. */ $ docker-compose up -d After that, you must be able to access localhost:8080 and the project must to be running already, but as you don't downloaded dependencies the following message will be shown. Project dependencies not found, run 'php composer.phar install' We are assuming that you don't have php installed, so let access the Docker apache container and download the composer dependencies from there. Remember that if you already have PHP 7.2+ installed skip to the step 6 and avoid step 7. /* Step 4. */ $ docker exec -it suitup-skeleton /bin/bash Walk into application docker folder /* Step 5. */ $ cd /app Download the composer dependencies /* Step 6. */ $ php composer.phar install Grant access to the vendors folder /* Step 7. */ $ chmod 775 vendor -R Done! After that all you need is to access on your browser: localhost:8080","title":"Docker"},{"location":"getting-started/#skeleton-project","text":"Check here to see how to setup a web server first. Clone the project from it's repository on github: $ git clone git@github.com:braghimsistemas/suitup-skeleton.git Walk into folder: $ cd suitup-skeleton/ Install composer dependencies $ php composer.phar install Done! Open on the browser the following address: http://localhost/suitup-skeleton (assuming that you installed directly on the localhost). If it was done with virtual host don't forget to add the line 127.0.0.1 {the new domain} to the /etc/hosts file.","title":"Skeleton Project"},{"location":"getting-started/#suitup-manager","text":"To automate some repetitive tasks we created a command line debian based software that can initialize a new project, create a new controller, \"model\" files, forms, etc... All you gotta do to get it is to download the suitup.deb file from the latest release from here and install it with the command bellow. $ sudo dpkg -i ~/Downloads/suitup.deb After that you must to be able to run the suitup command from your terminal with the following options: $ suitup install /* Install a brand new project */ $ suitup create module /* create a new module to an existing project */ $ suitup create controller /* create a new controller with its views */ $ suitup create form /* Starts a new form validator */ $ suitup create dbtable /* Create the structure to a database table (Business and Gateway files) */ So run $ suitup install and follow the suggested steps to entirely create a new project, it will ask you to automatically download composer dependencies too. After that you just need to setup the web server and be happy with your brand new project. Ps.: A folder with that name given to the project will be created","title":"Suitup Manager"},{"location":"getting-started/#from-source","text":"For beginners, at least with this framework, we highly recommend to create your project by this method so you will understand a bit more how SuitUp works and its mechanics. Start setting up the web server as you wish. We will assume that you are creating a project named cowboys into default localhost. Get into your localhost folder (over linux defaults it is /var/www/html ). As this is the more instructive but the largest way to do, follow this complete tutorial that will lead you on how to create all the files one by one and its contents, letting you know what everything means step by step. That's why this is the best way to begin. Install From Source Tutorial","title":"From Source"},{"location":"getting-started/#setup-web-server","text":"First of all you will need a web server like apache, nginx or whatever you prefer and PHP version 7.2+. A Web server is a program that uses HTTP (Hypertext Transfer Protocol) to serve the files that form Web pages to users, in response to their requests, which are forwarded by their computers' HTTP clients. Dedicated computers and appliances may be referred to as Web servers as well. Reference: WhatIs.com","title":"Setup Web Server"},{"location":"getting-started/#apache-web-server","text":"Install apache web server with apt: $ sudo apt-get install apache2 The mod_rewrite is required to work with friendly URL's routes. $ sudo a2enmod rewrite After enable mod rewrite you shall need to restart the server. $ sudo service apache2 restart It's important that you need to allow override on the virtual host where you will run the application (even in localhost). It will allow to replace in the URL names of directories with needed route names like modules, controllers, actions and parameters too. In few words it means that every request in the http://localhost , no matter what URI, will call the same file: /var/www/html/index.php The example bellow shows how the default virtual host address must looks like with that. $ sudo vi /etc/apache2/sites-available/000-default.conf # Apache Example VirtualHost *:80 ServerAdmin webmaster@localhost ServerName localhost ServerAlias localhost DocumentRoot /var/www/html Directory /var/www/html Options Indexes FollowSymLinks AllowOverride all Order allow,deny Allow from all /Directory LogLevel error ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined /VirtualHost That's it. Your apache server is ready to run SuitUp framework.","title":"Apache Web Server"},{"location":"getting-started/from-source/","text":"Install From Source Tutorial Project Structure Create the project folder and get into it $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. cowboys/ \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main.js \u2502 \u2514\u2500\u2500 styles.css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database.config.php \u2502 \u2514\u2500\u2500 default.routes.php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController.php \u2502 \u2502 \u2514\u2500\u2500 IndexController.php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index.phtml \u2502 \u2514\u2500\u2500 layout.phtml \u251c\u2500\u2500 .htaccess \u2514\u2500\u2500 index.php Composer require Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). $ php composer.phar require braghim-sistemas/suitup-php ^2 Also you will need to set some .htaccess configs so SuitUp can work properly. Files contents .htaccess file file: cowboys/.htaccess RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI}::$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E=BASE:%1] RewriteRule ^(.*)$ %{ENV:BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true Index file file: cowboys/index.php ?php session_start(); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define('DEVELOPMENT', (bool) getenv( DEVELOPMENT )); define('SHOW_ERRORS', (bool) getenv( SHOW_ERRORS )); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); } // Root path // Now everything is related to this folder chdir(__DIR__); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if (file_exists('vendor/autoload.php')) { $loader = include 'vendor/autoload.php'; // You may want to implement your own libraries // $loader- add('System', 'library/.'); } else { exit( Project dependencies not found, run 'php composer.phar install' ); } // Let's start SuitUp Framework $mvc = new SuitUpStart('modules/'); // Sql monitoring $mvc- setSqlMonitor(DEVELOPMENT); $mvc- run(); Abstract Controller file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php ?php namespace ModuleDefault\\Controllers; use SuitUp\\Mvc\\MvcAbstractController; class AbstractController extends MvcAbstractController { public function init() { parent::init(); // Keep this line } public function posDispatch() { parent::posDispatch(); // Keep this line } } Index Controller file: cowboys/modules/ModuleDefault/Controllers/IndexController.php ?php namespace ModuleDefault\\Controllers; class IndexController extends AbstractController { public function indexAction() { // Here is where the legends begins... } } HTML Layout file: cowboys/modules/ModuleDefault/views/layout.phtml !doctype html html lang= en head !-- Required meta tags -- meta charset= utf-8 meta name= viewport content= width=device-width, initial-scale=1, shrink-to-fit=no !-- Bootstrap CSS -- link rel= stylesheet href= https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css integrity= sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO crossorigin= anonymous title Hello, world! /title /head body div class= container h1 ModuleDefault /h1 h4 Created by SuitUp Manager Version: 1.0.0 /h4 ?php echo $content; ? /div !-- Optional JavaScript -- !-- jQuery first, then Popper.js, then Bootstrap JS -- script src= https://code.jquery.com/jquery-3.3.1.slim.min.js integrity= sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo crossorigin= anonymous /script script src= https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js integrity= sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49 crossorigin= anonymous /script script src= https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js integrity= sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy crossorigin= anonymous /script script src= https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js /script /body /html HTML View file: cowboys/modules/ModuleDefault/views/index/index.phtml !-- The content created automatically -- div class= row div class= col-6 div class= card img class= card-img-top src= holder.js/100px180/ alt= Card image cap div class= card-body h5 class= card-title Card title /h5 p class= card-text Some quick example text to build on the card title and make up the bulk of the card's content. /p a href= # class= btn btn-primary Go somewhere /a /div /div /div div class= col-6 div class= card img class= card-img-top src= holder.js/100px180/ alt= Card image cap div class= card-body h5 class= card-title Card title /h5 p class= card-text Some quick example text to build on the card title and make up the bulk of the card's content. /p a href= # class= btn btn-primary Go somewhere /a /div /div /div /div","title":"Install From Source Tutorial"},{"location":"getting-started/from-source/#install-from-source-tutorial","text":"","title":"Install From Source Tutorial"},{"location":"getting-started/from-source/#project-structure","text":"Create the project folder and get into it $ mkdir cowboys $ cd cowboys Let's create all basic needed structure of folders and files, to do that just follow the tree below. cowboys/ \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 main.js \u2502 \u2514\u2500\u2500 styles.css \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 database.config.php \u2502 \u2514\u2500\u2500 default.routes.php \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 ModuleDefault \u2502 \u251c\u2500\u2500 Controllers \u2502 \u2502 \u251c\u2500\u2500 AbstractController.php \u2502 \u2502 \u2514\u2500\u2500 IndexController.php \u2502 \u251c\u2500\u2500 Form \u2502 \u251c\u2500\u2500 Model \u2502 \u2502 \u2514\u2500\u2500 Gateway \u2502 \u2514\u2500\u2500 views \u2502 \u251c\u2500\u2500 index \u2502 \u2502 \u2514\u2500\u2500 index.phtml \u2502 \u2514\u2500\u2500 layout.phtml \u251c\u2500\u2500 .htaccess \u2514\u2500\u2500 index.php","title":"Project Structure"},{"location":"getting-started/from-source/#composer-require","text":"Composer will download all Suitup files and its dependencies as well manage future updates, so you don't have to worry about it. Download the composer.phar file to manage the project dependencies from here or go to the Composer Download page and choose your preferred type of install. Run composer require to download suitup and its dependencies. It will automatically create a composer.json file too (a file with your project specifications). $ php composer.phar require braghim-sistemas/suitup-php ^2 Also you will need to set some .htaccess configs so SuitUp can work properly.","title":"Composer require"},{"location":"getting-started/from-source/#files-contents","text":"","title":"Files contents"},{"location":"getting-started/from-source/#htaccess-file","text":"file: cowboys/.htaccess RewriteEngine on # The following rule tells Apache that if the requested filename # exists, simply serve it. RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # The following rewrites all other queries to index.php. The # condition ensures that if you are using Apache aliases to do # mass virtual hosting, the base path will be prepended to # allow proper resolution of the index.php file; it will work # in non-aliased environments as well, providing a safe, one-size # fits all solution. RewriteCond %{REQUEST_URI}::$1 ^(/.+)(.+)::\\2$ RewriteRule ^(.*) - [E=BASE:%1] RewriteRule ^(.*)$ %{ENV:BASE}index.php [NC,L] # Env variables SetEnv DEVELOPMENT true SetEnv SHOW_ERRORS true","title":".htaccess file"},{"location":"getting-started/from-source/#index-file","text":"file: cowboys/index.php ?php session_start(); // Set your timezone // date_default_timezone_set('America/Sao_Paulo'); // Defined constants to determine test environment or production define('DEVELOPMENT', (bool) getenv( DEVELOPMENT )); define('SHOW_ERRORS', (bool) getenv( SHOW_ERRORS )); if (SHOW_ERRORS) { error_reporting(E_ALL); ini_set('display_errors', true); } // Root path // Now everything is related to this folder chdir(__DIR__); // Simple functions you should implement // include_once './functions.php'; // Setup autoloading composer if (file_exists('vendor/autoload.php')) { $loader = include 'vendor/autoload.php'; // You may want to implement your own libraries // $loader- add('System', 'library/.'); } else { exit( Project dependencies not found, run 'php composer.phar install' ); } // Let's start SuitUp Framework $mvc = new SuitUpStart('modules/'); // Sql monitoring $mvc- setSqlMonitor(DEVELOPMENT); $mvc- run();","title":"Index file"},{"location":"getting-started/from-source/#abstract-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/AbstractController.php ?php namespace ModuleDefault\\Controllers; use SuitUp\\Mvc\\MvcAbstractController; class AbstractController extends MvcAbstractController { public function init() { parent::init(); // Keep this line } public function posDispatch() { parent::posDispatch(); // Keep this line } }","title":"Abstract Controller"},{"location":"getting-started/from-source/#index-controller","text":"file: cowboys/modules/ModuleDefault/Controllers/IndexController.php ?php namespace ModuleDefault\\Controllers; class IndexController extends AbstractController { public function indexAction() { // Here is where the legends begins... } }","title":"Index Controller"},{"location":"getting-started/from-source/#html-layout","text":"file: cowboys/modules/ModuleDefault/views/layout.phtml !doctype html html lang= en head !-- Required meta tags -- meta charset= utf-8 meta name= viewport content= width=device-width, initial-scale=1, shrink-to-fit=no !-- Bootstrap CSS -- link rel= stylesheet href= https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css integrity= sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO crossorigin= anonymous title Hello, world! /title /head body div class= container h1 ModuleDefault /h1 h4 Created by SuitUp Manager Version: 1.0.0 /h4 ?php echo $content; ? /div !-- Optional JavaScript -- !-- jQuery first, then Popper.js, then Bootstrap JS -- script src= https://code.jquery.com/jquery-3.3.1.slim.min.js integrity= sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo crossorigin= anonymous /script script src= https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js integrity= sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49 crossorigin= anonymous /script script src= https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js integrity= sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy crossorigin= anonymous /script script src= https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.0/holder.js /script /body /html","title":"HTML Layout"},{"location":"getting-started/from-source/#html-view","text":"file: cowboys/modules/ModuleDefault/views/index/index.phtml !-- The content created automatically -- div class= row div class= col-6 div class= card img class= card-img-top src= holder.js/100px180/ alt= Card image cap div class= card-body h5 class= card-title Card title /h5 p class= card-text Some quick example text to build on the card title and make up the bulk of the card's content. /p a href= # class= btn btn-primary Go somewhere /a /div /div /div div class= col-6 div class= card img class= card-img-top src= holder.js/100px180/ alt= Card image cap div class= card-body h5 class= card-title Card title /h5 p class= card-text Some quick example text to build on the card title and make up the bulk of the card's content. /p a href= # class= btn btn-primary Go somewhere /a /div /div /div /div","title":"HTML View"}]}